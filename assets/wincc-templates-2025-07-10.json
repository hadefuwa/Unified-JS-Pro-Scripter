[
  {
    "id": "tag-read-basic",
    "title": "Read Tag Value (Basic)",
    "category": "Tag Operations",
    "description": "Basic tag reading with error handling",
    "isCustom": false,
    "code": "// Basic Tag Read\nfunction readTag(tagName) {\n    try {\n        var value = Tags(tagName).Read();\n        HMIRuntime.Trace(\"Read \" + tagName + \": \" + value);\n        return value;\n    } catch (error) {\n        HMIRuntime.Trace(\"Error reading tag: \" + error.message);\n        return null;\n    }\n}"
  },
  {
    "id": "tag-write-basic",
    "title": "Write Tag Value (Basic)",
    "category": "Tag Operations",
    "description": "Basic tag writing with error handling",
    "isCustom": false,
    "code": "// Basic Tag Write\nfunction writeTag(tagName, value) {\n    try {\n        Tags(tagName).Write(value);\n        HMIRuntime.Trace(\"Wrote \" + tagName + \": \" + value);\n        return true;\n    } catch (error) {\n        HMIRuntime.Trace(\"Error writing tag: \" + error.message);\n        return false;\n    }\n}"
  },
  {
    "id": "custom-1750984944946-e8hsxthv0",
    "title": "Tag Read Simple",
    "category": "User",
    "description": "var tagValue = Tags(tagName).Read();",
    "isCustom": true,
    "code": "var tagValue = Tags(tagName).Read();",
    "createdAt": "2025-06-27T00:42:24.947Z"
  },
  {
    "id": "custom-1750992754645-4w7x2uvvc",
    "title": "Disable Zoom On Screen",
    "category": "User",
    "description": "UI.RootWindow.InteractiveZooming = false;",
    "isCustom": true,
    "code": "UI.RootWindow.InteractiveZooming = false;",
    "createdAt": "2025-06-27T02:52:34.645Z"
  },
  {
    "id": "custom-1751584815920-3ytfcdhd0",
    "title": "User Login Status Checker",
    "category": "User",
    "description": "hecks the currently logged-in username and sets a tag (LoggedIn) based on whether it matches a specific user",
    "isCustom": true,
    "code": "let tag2 = Tags(\"@UserName\");\nlet username = tag2.Read();\nlet tag1 = Tags(\"LoggedIn\");\n\n    if (username == \"Matrix\") {\n        tag1.Write(1);\n    } else {\n        tag1.Write(0);\n    }",
    "createdAt": "2025-07-03T23:20:15.921Z"
  },
  {
    "id": "custom-1751585086534-2o5pyyxav",
    "title": "Reset Fault Popup Position on No Faults",
    "category": "User",
    "description": "Checks if Faults_Count is zero and resets the popup position to X:90, Y:38 using the fault_position_x and fault_position_y tags.",
    "isCustom": true,
    "code": "export function ResetFaultPopup() {\n\n    let faultsCountTag = Tags(\"Faults_Count\");\n    let faultsCount = faultsCountTag.Read();\n    \n    let faultPositionXTag = Tags(\"fault_position_x\");\n    let faultPositionX = faultPositionXTag.Read();\n    \n    let faultPositionYTag = Tags(\"fault_position_y\");\n    let faultPositionY = faultPositionYTag.Read();\n    \n    if (faultsCount === 0) {\n        faultPositionXTag.Write(90);\n        faultPositionYTag.Write(38);\n    }\n\n}",
    "createdAt": "2025-07-03T23:24:46.534Z"
  },
  {
    "id": "custom-1751585385373-z0i4pfdb5",
    "title": "Fault Popup Visibility Trigger",
    "category": "User",
    "description": "Returns 1 to show a popup if faults are active and the user is not on any excluded screens like Home, Alarms, or Admin. Otherwise, returns 0.",
    "isCustom": true,
    "code": "export function Screen_window_2_Visible_Trigger(item, triggerDataSet) {\n  var value;\n  let faultsCountTag = HMIRuntime.Tags(\"Faults_Count\");\n  let faultsCount = faultsCountTag.Read();\n  \n  let screen = HMIRuntime.Tags(\"screen\");\n  let currentScreen = screen.Read();\n  \n  if ((faultsCount > 0) && (currentScreen !== \"About\") && (currentScreen !== \"Alarms\") && (currentScreen !== \"Scenarios\")&& (currentScreen !== \"Worksheets\") && (currentScreen !== \"Faults\") && (currentScreen !== \"Home\") && (currentScreen !== \"Main_Menu\") && (currentScreen !== \"Admin\") && (currentScreen !== \"IO\")) {\n      value = 1;\n  } else {\n      value = 0;\n  }\n\n  return value;\n}",
    "createdAt": "2025-07-03T23:29:45.373Z"
  },
  {
    "id": "custom-1751586184746-qexh9jts5",
    "title": "Open IO Popup on Button Press",
    "category": "User",
    "description": "Opens a popup displaying analog input details (value, offset, scalar) for the \"Tank Temp\" tag when a button is pressed. Sets the popup size, position, and visibility.",
    "isCustom": true,
    "code": "export function Button_10_OnDown(item, x, y, modifiers, trigger) {\n\n    // Define the title for the popup\n    let sTitle = \"Tank Temp\";\n\n    // Define the data object with the tag values\n    var data = {\n        Tag_Name: { Tag: \"Tank Temp\" }, \n        value: { Tag: \"IO.Inputs.Analogues.AI0.Scaled\" }, \n        offset: { Tag: \"IO.Inputs.Analogues.AI0.Offset\" }, \n        scalar: { Tag: \"IO.Inputs.Analogues.AI0.Scalar\" },   \n    };\n\n    // Define the parent screen, if necessary (use null if not applicable)\n    var parentScreen = null;\n\n    // Define additional parameters as required\n    var invisible = false; // Set to true if the popup should be invisible initially\n    var popupWindowName = \"PopupWindow\"; // Set a unique name for the popup window\n    var alwaysOnTop = false; // Set to true if the popup should always be on top\n\n    // Open the faceplate in a popup\n    let po = UI.OpenFaceplateInPopup(\"AI_Popup_V_0_0_12\", sTitle, data, parentScreen, invisible, popupWindowName, alwaysOnTop);\n\n    // Set the size of the popup\n    po.Width = 605; // Adjust width as needed\n    po.Height = 330; // Adjust height as needed\n\n    // Set the position of the popup\n    po.Left = 100;\n    po.Top = 50;\n\n    // Make the popup visible\n    po.Visible = true;\n\n}",
    "createdAt": "2025-07-03T23:43:04.746Z"
  },
  {
    "id": "custom-1751587657318-qe6rpljub",
    "title": "Toggle Machine1 Popup Tag",
    "category": "User",
    "description": "Toggles the value of the Machine1_popup tag between 1 and 0 each time the button is tapped.",
    "isCustom": true,
    "code": "export async function Button_1_OnTapped(item, x, y, modifiers, trigger) {\n    // Optional: Reset the popup bit (currently commented out)\n    // HMIRuntime.Tags.SysFct.SetBitInTag(\"Machine1_popup\", 0);\n\n    // Get the tag reference\n    let tag = HMIRuntime.Tags(\"Machine1_popup\");\n\n    // Read the current value of the tag\n    let currentValue = tag.Read();\n\n    // Toggle the value\n    if (currentValue === 1) {\n        tag.Write(0); // Set the tag to 0\n    } else {\n        tag.Write(1); // Set the tag to 1\n    }\n}",
    "createdAt": "2025-07-04T00:07:37.318Z"
  },
  {
    "id": "custom-1751587982783-rm0gbvd8b",
    "title": "Set Security Level Based on User Role",
    "category": "User",
    "description": "When the process value changes, this function retrieves the current user's roles and sets a SecurityLevel tag based on the highest matching role: Monitor = 1, Student = 2, Educator = 3, Engineer = 4, or 0 if none. Roles are also logged for debugging.",
    "isCustom": true,
    "code": "export function IO_field_4_ProcessValue_OnPropertyChanged(item, value) {\n    HMIRuntime.Trace(\"Getting Roles\");\n// Assuming you have a variable called 'userRole'\nlet roles = HMIRuntime.UserManagement.GetRolesFromUser();\n\n\nif (roles.length > 0) {\n    let strRoles = '';\n    roles.forEach((roleName) => {\n        strRoles += roleName + ';';\n    });\n    HMIRuntime.Trace(\"The current user is in role(s): \" + strRoles);\n\n    // Handle specific roles\n    if (roles.includes(\"Monitor\")) {\n        // Role-specific logic for Viewer\n        Tags(\"SecurityLevel\").Write(1);\n    } else if (roles.includes(\"Student\")) {\n        // Role-specific logic for Operator\n        Tags(\"SecurityLevel\").Write(2);\n    } else if (roles.includes(\"Educator\")) {\n        // Role-specific logic for Maintenance\n        Tags(\"SecurityLevel\").Write(3);\n    } else if (roles.includes(\"Engineer\")) {\n        // Role-specific logic for Engineer\n        Tags(\"SecurityLevel\").Write(4);\n    } else {\n        // Handle other roles here or set a default security level\n        Tags(\"SecurityLevel\").Write(0);\n    }\n} else {\n    HMIRuntime.Trace(\"User has no roles.\");\n    // Handle the case where the user has no roles or set a default security level\n    Tags(\"SecurityLevel\").Write(0);\n}\n}",
    "createdAt": "2025-07-04T00:13:02.783Z"
  },
  {
    "id": "custom-1751588149478-tkwg4rcvo",
    "title": "Alarm Button Text & Count Updater",
    "category": "User",
    "description": "Fetches the number of active alarms by type (Info, Warning, Fault), writes them to separate tags, calculates the total, and returns a dynamic button label like \"Alarms (3)\" if any are active.",
    "isCustom": true,
    "code": "export function Button_6_Text_Trigger(item) {\n   //HMIRuntime.Trace(\"The following traces come from the Alarms button on the footer\");\n   const warningFilter = \"AlarmClassName='Warning!'\";\n   const faultFilter = \"AlarmClassName='Fault!'\";\n   const infoFilter = \"AlarmClassName='Info!'\";\n   \n    // Language Codes (first Parameter): DE = 1031; EN = 1033; Default = 127\n\n    HMIRuntime.Alarming.GetActiveAlarms(127,infoFilter).then(\n    function(numInfo){\n    // Write number to tag for amount of warnings\n    HMIRuntime.Trace(\"Writing \" + numInfo.length + \" to Warning Count\");\n    Tags(\"InfoCount\").Write(numInfo.length);\n    }).catch(function(errorCode){\n    Tags(\"InfoCount\").Write(0);\n    });\n\n    HMIRuntime.Alarming.GetActiveAlarms(127,warningFilter).then(\n    function(numWarnings){\n    // Write number to tag for amount of warnings\n    HMIRuntime.Trace(\"Writing \" + numWarnings.length + \" to Warning Count\");\n    Tags(\"WarningCount\").Write(numWarnings.length);\n    }).catch(function(errorCode){\n    Tags(\"WarningCount\").Write(0);\n    });\n\n    HMIRuntime.Alarming.GetActiveAlarms(127,faultFilter).then(\n    function(numFaults){\n    // Write number to tag for amount of warnings\n    HMIRuntime.Trace(\"Writing \" + numFaults.length + \" to Fault Count\");\n    \n    Tags(\"AlarmCount\").Write(numFaults.length);\n    }).catch(function(errorCode){\n    Tags(\"AlarmCount\").Write(0);\n    });\n\n\n  let numAlarms = Tags(\"AlarmCount\").Read();\n  let warningAlarms = Tags(\"WarningCount\").Read();\n  let infoAlarms = Tags(\"InfoCount\").Read();\n\n  let total = numAlarms + warningAlarms + infoAlarms;\n\n  let value;\n       if (total > 0) {\n           value = \"Alarms (\" + total + \")\";\n       } else {\n           value = \"Alarms\";\n       }\n\n  Tags(\"TotalAlarms\").Write(total);\n  //Count the Faults\n//  numAlarms = Screen.FindItem(\"FAULTS\").Properties.Elements[3].Text;\n\n  return value;\n}",
    "createdAt": "2025-07-04T00:15:49.478Z"
  },
  {
    "id": "custom-1751588559033-nuq5qr5oj",
    "title": "Set Zoom Level of Root Window",
    "category": "User",
    "description": "Description: Sets the current zoom factor of the UI root window to 0.5 (50% scale).",
    "isCustom": true,
    "code": "UI.RootWindow.CurrentZoomFactor = 0.5;",
    "createdAt": "2025-07-04T00:22:39.033Z"
  },
  {
    "id": "custom-1751592476055-xbm38zchc",
    "title": "Green or Red Status Color",
    "category": "User",
    "description": "Returns green if both Demand_Tag and Feedback_Tag are greater than 0, otherwise returns red. Commented out but intended for status indication via color.",
    "isCustom": true,
    "code": "export function GreenOrRed() {\n\n/*\n    let red = 0xFFFF0000;\n    let grey = 0xFFC8CDD7;\n    let green = HMIRuntime.Math.RGB(255, 0, 255, 0);\n\n    let Demand = HMIRuntime.Tags(\"Demand_Tag\").Read();\n    let Feedback = HMIRuntime.Tags(\"Feedback_Tag\").Read();\n\n    if (Feedback > 0 && Demand > 0)\n    {\n        return green;\n    }\n    else\n    {\n        return red;\n    } \n*/\n}",
    "createdAt": "2025-07-04T01:27:56.055Z"
  },
  {
    "id": "custom-1751592539109-i3l1pbsrq",
    "title": "Read Faceplate Property Value",
    "category": "User",
    "description": "Reads the Fault_Name_6 property from a faceplate instance and returns 1 if it equals \"ignore\", otherwise 0. Demonstrates how to access faceplate properties at runtime.",
    "isCustom": true,
    "code": "let Fault_Name = Faceplate.Properties.Fault_Name_6;\n\nif (Fault_Name == \"ignore\") \n  {\n    return 1; \n  }\n  else\n  {\n    return 0; \n  }",
    "createdAt": "2025-07-04T01:28:59.109Z"
  },
  {
    "id": "custom-1751592570205-0uuckf3to",
    "title": "Enable Control Based on Security Level",
    "category": "User",
    "description": "Reads the SecurityLevel tag and returns 1 to enable control if level is 3 or higher; otherwise returns 0 to disable it. Used for access control based on user level.",
    "isCustom": true,
    "code": "let tag1 = Tags(\"SecurityLevel\");\nlet security = tag1.Read();\n\nif (security < 3) \n  {\n    return 0; // Set to false to disable operator control\n  }\n  else\n  {\n    return 1; // Set to true to enable operator control\n  }",
    "createdAt": "2025-07-04T01:29:30.205Z"
  },
  {
    "id": "custom-1751592672904-xzssct2ta",
    "title": "Open Popup with Dynamic Parameters",
    "category": "User",
    "description": "If SecurityLevel > 2 and aqPopIndex is valid, this function resets the index, builds tag paths for the selected AQ channel, reads popup title/units, and opens a faceplate with those values. Used to configure AQ setup dynamically.",
    "isCustom": true,
    "code": "export function IO_field_5_ProcessValue_Trigger(item) {\n  var tIndex = Tags(\"aqPopIndex\");\n  var iIndex = tIndex.Read();\n\n  var iSecurity = Tags(\"SecurityLevel\").Read();\n \n  if ((iSecurity > 2) && (iIndex > -1)) {\n      tIndex.Write(-1);\n      var sIndex = iIndex.toString();\n      var tagOffset = \"AQSetup[\" + sIndex + \"].Offset\";\n      var tagAccRamp = \"AQSetup[\" + sIndex + \"].OpenRampRate\";\n      var tagDecRamp = \"AQSetup[\" + sIndex + \"].CloseRampRate\";\n      var tagMinPosOpen = \"AQSetup[\" + sIndex + \"].MinAPos\";\n      var tagMaxPosOpen = \"AQSetup[\" + sIndex + \"].MaxAPos\";\n      var tagMinNegOpen = \"AQSetup[\" + sIndex + \"].MinBPos\";\n      var tagMaxNegOpen = \"AQSetup[\" + sIndex + \"].MaxBPos\";\n      var tagValue = \"AQ[\" + sIndex + \"]\";\n\n      var sTitle = Tags(\"popTitle\").Read();\n      var sUnits = Tags(\"popUnits\").Read();\n\n      HMIRuntime.Trace(\"==================== \" + sUnits + \" ==================\");\n    \n      // Pop up the AI properties\n      let data = {offset:{Tag:tagOffset}, accRamp:{Tag:tagAccRamp}, decRamp:{Tag:tagDecRamp}, \n                  units:sUnits, value:{Tag:tagValue}, \n                  minPosOpen:{Tag:tagMinPosOpen}, maxPosOpen:{Tag:tagMaxPosOpen}, \n                  minNegOpen:{Tag:tagMinNegOpen}, maxNegOpen:{Tag:tagMaxNegOpen},\n                  ColorProperty:0xff00ff00\n                 };\n      \n      let po = UI.OpenFaceplateInPopup(\"fpPopAQ_V_0_0_3\", sTitle, data);\n      po.Left = 450;\n      po.Top = 150;\n      po.Visible = true;\n  }\n\n  return iIndex;\n\n}",
    "createdAt": "2025-07-04T01:31:12.904Z"
  },
  {
    "id": "custom-1751592705984-p05m1dswr",
    "title": "Get Current Time as String",
    "category": "User",
    "description": "Returns the current system time as a locale-formatted string (e.g. \"14:30:15\"), using JavaScript's toLocaleTimeString().",
    "isCustom": true,
    "code": "var value = new Date().toLocaleTimeString();\n    return value;",
    "createdAt": "2025-07-04T01:31:45.984Z"
  },
  {
    "id": "custom-1751592746279-60nh649mt",
    "title": "Constructs a tag name",
    "category": "User",
    "description": "Constructs a tag name like \"DriveInfo_Motor1.Status\" using DriveName, then reads its value using Tags().Read(). Useful for handling multiple drives dynamically.",
    "isCustom": true,
    "code": "var Parameter = Tags(\"DriveInfo_\"+DriveName+\".Status\").Read();",
    "createdAt": "2025-07-04T01:32:26.279Z"
  },
  {
    "id": "custom-1751592792025-xr37m3qn2",
    "title": "Get Localised Text from Faceplate TextList",
    "category": "User",
    "description": "Retrieves a localized string from a TextList using the faceplate’s TextListID and Index properties, based on the current runtime language.",
    "isCustom": true,
    "code": "var id = String(Faceplate.Properties.TextListID);\n  var index = Faceplate.Properties.Index;\n  var value = HMIRuntime.Resources.TextLists(id).Item(index).Item(HMIRuntime.Language);\n  return value;",
    "createdAt": "2025-07-04T01:33:12.025Z"
  },
  {
    "id": "custom-1751592847097-ksnvzzz6f",
    "title": "Activate Drive Screen and Set Selected Drive",
    "category": "User",
    "description": "Activates a screen using the DriveScreenName from the faceplate and writes the drive's integer ID (Drive_Int) to the SelectedDrive_Int tag for tracking or control.",
    "isCustom": true,
    "code": "let DriveScreenName = Faceplate.Properties.DriveScreenName;\nHMIRuntime.Tags.SysFct.SetTagValue(\"ActivateScreenTag\", DriveScreenName);\n\nlet tag1 = Tags(\"SelectedDrive_Int\");\nlet myProperty = Faceplate.Properties.Drive_Int;\ntag1.Write(myProperty);",
    "createdAt": "2025-07-04T01:34:07.097Z"
  },
  {
    "id": "custom-1751592878416-8vo3jiu3j",
    "title": "Motor Enable Status Text",
    "category": "User",
    "description": "Reads the HMI_Enable_Bool tag and returns \"Enabled\" if true, otherwise returns \"Disabled\". Used for displaying motor status as text.",
    "isCustom": true,
    "code": "let MotorEnable = HMIRuntime.Tags(\"HMI_Enable_Bool\").Read();\n    \nif (MotorEnable) \n    {\n      return \"Enabled\";\n    } \nelse \n    {\n      return \"Disabled\";\n    }",
    "createdAt": "2025-07-04T01:34:38.416Z"
  },
  {
    "id": "custom-1751592914649-5fqq136mp",
    "title": "Motor State Display Text",
    "category": "User",
    "description": "Checks if the motor is enabled via HMI_Enable_Bool. If enabled, it returns \"Running\" or \"Stopped\" based on RunningStatus. If not enabled, it returns \"Disabled\".",
    "isCustom": true,
    "code": "let MotorRunning = HMIRuntime.Tags(\"RunningStatus\").Read();\n  let enable = HMIRuntime.Tags(\"HMI_Enable_Bool\").Read();\n  if (enable) {\n    if (MotorRunning) {\n      return \"Running\";\n    } else {\n      return \"Stopped\";\n    }\n  } else {\n    return \"Disabled\";\n  }",
    "createdAt": "2025-07-04T01:35:14.649Z"
  },
  {
    "id": "custom-1751592964682-k6o5pnzax",
    "title": "Activate Mimic Screen from Faceplate",
    "category": "User",
    "description": "Reads the MimicScreenName property from the faceplate and writes it to the ActivateScreenTag system tag to trigger a screen change.",
    "isCustom": true,
    "code": "let MimicScreenName = Faceplate.Properties.MimicScreenName;\nHMIRuntime.Tags.SysFct.SetTagValue(\"ActivateScreenTag\", MimicScreenName);",
    "createdAt": "2025-07-04T01:36:04.682Z"
  },
  {
    "id": "custom-1751592998599-penleficy",
    "title": "Status Text Display",
    "category": "User",
    "description": "Reads Valve_Tag_Bool and returns a string combining Valve_Name with either On_Text or Off_Text, depending on the valve’s state. Used for dynamic status labeling.",
    "isCustom": true,
    "code": "let Valve_Tag = HMIRuntime.Tags(\"Valve_Tag_Bool\").Read();\nlet value;\n\nif (Valve_Tag) \n  {\n    value = Faceplate.Properties.Valve_Name + \" \" + Faceplate.Properties.On_Text;\n    return value; \n  }\n  else\n  {\n    value = Faceplate.Properties.Valve_Name + \" \" + Faceplate.Properties.Off_Text;\n    return value; \n  }",
    "createdAt": "2025-07-04T01:36:38.599Z"
  },
  {
    "id": "custom-1751593019263-gjqa21lo1",
    "title": "Highlight Active Menu Button",
    "category": "User",
    "description": "Highlights the selected button by name and resets all others to a default color. Extracts the numeric index from the button name to loop through a button group like Nav1, Nav2, etc. Supports special styling for txtMainNav.",
    "isCustom": true,
    "code": "export function HighlightButton(ButtonName) {\n  // Highlights the active menu button and set all other buttons to default colors.\n \n  const number = ButtonName.replace(/^\\D+/g, '');\n  const BtnName = ButtonName.slice(0, ButtonName.lastIndexOf(number));\n  \n  let highlightColor = HMIRuntime.Math.RGB(0,161,209,255);\n  let defaultColor = HMIRuntime.Math.RGB(181,190,197,255);\n\n  if (BtnName === \"txtMainNav\") {\n    defaultColor = HMIRuntime.Math.RGB(38,39,41,255);\n  }\n\n  for(let i = 1; i < 20; i++) {\n    const currentButton = Screen.Items(BtnName + i);\n    if (!currentButton) {\n      break;\n    }\n    if(ButtonName === currentButton.Name) {\n      currentButton.BackColor = highlightColor;\n    } else {\n      currentButton.BackColor = defaultColor;\n    }\n  } \n}",
    "createdAt": "2025-07-04T01:36:59.263Z"
  },
  {
    "id": "custom-1751593048699-yajy0t1st",
    "title": "Load System Defaults from JSON File",
    "category": "User",
    "description": "Reads a JSON file containing default parameters for analog inputs/outputs, tanks, encoders, cylinders, and demands. It parses and writes the values to corresponding HMI tags, ensuring structured initialization during setup or reset. Includes detailed tracing for debugging.",
    "isCustom": true,
    "code": "export async function LoadDefaults() {\n   HMIRuntime.Trace(\"Loading Defaults.....\");\n  try {\n    const path = \"C:/Users/Public/Defaults/NDC_Defaults.json\"; // Read the path from a tag\n    const data = await HMIRuntime.FileSystem.ReadFile(path, \"utf8\");\n    HMIRuntime.Trace(\"Read JSON data: \" + data); // Trace the JSON data for debugging\n    const jsonData = JSON.parse(data);\n    HMIRuntime.Trace(\"Parsed JSON data: \" + JSON.stringify(jsonData)); // Trace the parsed JSON data for debugging\n\n    // Check if jsonData has the expected structure\n    if (\n      !jsonData ||\n      !jsonData.Tplc_AI ||\n      !jsonData.Tplc_AQ ||\n      !jsonData.Tanks || // Check for Tanks\n      !jsonData.Encoders || // Check for Encoders\n      !jsonData.Cylinder_Setup ||\n      !jsonData.Demands \n    ) {\n      throw new Error(\"JSON data structure is not as expected.\");\n    }\n\n    // Read TPlc_AI and TPlc_AQ data from JSON\n    const TPlc_AI = jsonData.Tplc_AI;\n    const TPlc_AQ = jsonData.Tplc_AQ;\n    const Tanks = jsonData.Tanks; // Read Tanks\n    const Encoders = jsonData.Encoders; // Read Encoders\n    const Cylinder_Setup = jsonData.Cylinder_Setup;\n    const Demands = jsonData.Demands;\n\n    // Write TPlc_AI data to the corresponding tags\n    HMIRuntime.Trace(\"Writing AI\");\n    for (let i = 0; i < TPlc_AI.length; i++) {\n      const tagPrefix = `Tplc_AI[${i}]`;\n      Tags(tagPrefix + \".Offset\").Write(TPlc_AI[i].Offset);\n      Tags(tagPrefix + \".Scaler\").Write(TPlc_AI[i].Scaler);\n    }\n\n    // Write TPlc_AQ data to the corresponding tags\n    HMIRuntime.Trace(\"Writing AQ\");\n    for (let i = 0; i < TPlc_AQ.length; i++) {\n      const tagPrefix = `Tplc_AQ[${i}]`;\n      Tags(tagPrefix + \".Offset\").Write(TPlc_AQ[i].Offset);\n      Tags(tagPrefix + \".OpenRampRate\").Write(TPlc_AQ[i].OpenRampRate);\n      Tags(tagPrefix + \".CloseRampRate\").Write(TPlc_AQ[i].CloseRampRate);\n      Tags(tagPrefix + \".MinAPos\").Write(TPlc_AQ[i].MinAPos);\n      Tags(tagPrefix + \".MaxAPos\").Write(TPlc_AQ[i].MaxAPos);\n      Tags(tagPrefix + \".MinBPos\").Write(TPlc_AQ[i].MinBPos);\n      Tags(tagPrefix + \".MaxBPos\").Write(TPlc_AQ[i].MaxBPos);\n    }\n\n    // Write Encoders data to the corresponding tags\n    HMIRuntime.Trace(\"Writing Encoders\");\n    HMIRuntime.Trace(\"Encoders length = \" + Encoders.length);\n    for (let i = 0; i < Encoders.length; i++) {\n    HMIRuntime.Trace(\"in encoder loop\");\n      const tagPrefix = `Tplc_ENC[${i}]`;\n    HMIRuntime.Trace(\"Writing to\" + tagPrefix + \".Offset\");\n      Tags(tagPrefix + \".Offset\").Write(Encoders[i].Offset);\n    }\n\n\n// Write Tanks data to the corresponding tags\nHMIRuntime.Trace(\"Writing Tanks\");\nconst tankPrefix = \"System_Data_and_Setup_Tanks_\";\nfor (const tagName in Tanks) {\n  if (Tanks.hasOwnProperty(tagName)) {\n    Tags(tankPrefix + tagName).Write(Tanks[tagName]);\n  }\n}\n\n\n    // Write Cylinder_Setup data to the corresponding tags\n    HMIRuntime.Trace(\"Writing Cylinder Setup\");\n    const cylinderPrefix = \"System_Data_and_Setup_Cylinders\";\n    for (const key in Cylinder_Setup) {\n      if (Cylinder_Setup.hasOwnProperty(key)) {\n        Tags(`${cylinderPrefix}.${key}`).Write(Cylinder_Setup[key]);\n      }\n    }\n\n    // Write Demands data to the corresponding tags\n    HMIRuntime.Trace(\"Writing Demands\");\n    const demandPrefix = \"System_Data_and_Setup_Main_Pumpsets.Demands.\";\n    for (const key in Demands) {\n      if (Demands.hasOwnProperty(key)) {\n        HMIRuntime.Trace(`${demandPrefix}.${key}`);\n        Tags(`${demandPrefix}.${key}`).Write(Demands[key]);\n      }\n    }\n\n\n    HMIRuntime.Trace(\"Defaults have been loaded and written to tags.\");\n  } catch (error) {\n    console.error(\"Error in LoadDefaults:\", error);\n    throw error;\n  }\n}",
    "createdAt": "2025-07-04T01:37:28.699Z"
  },
  {
    "id": "custom-1751593073638-5bk3j83vx",
    "title": "Save System Defaults to JSON File",
    "category": "User",
    "description": "Collects configuration data from HMI tags (AI, AQ, Encoders, Tanks, Cylinders, Demands), formats it into JSON, and saves it to a main file and a timestamped archive file. Used to back up current system settings. Includes detailed tracing and handles file system operations asynchronously.",
    "isCustom": true,
    "code": "export async function SaveDefaults() {\n  try {\n    HMIRuntime.Trace(\"Writing file\");\n    Tags(\"loading\").Write(1);\n    const formatDateTime = () => new Date().toLocaleString().replace(/\\/|:| /g, (_, c) => (c === '/' ? '.' : '_'));\n\n    const jsonData = {\n      User: \"\",\n      Modified: formatDateTime(),\n      Tplc_AI: [],\n      Tplc_AQ: [],\n      Encoders: [],\n      Tanks: {},\n      Cylinder_Setup: {},\n      Demands: {}\n    };\n    HMIRuntime.Trace(\"Writing file\");\n    const readTag = (prefix, index, suffix = '') => Tags(`${prefix}[${index}]${suffix}`).Read(1);\n\n    // Retrieve data from TPLC tags for Tplc_AI and Tplc_AQ\n    for (let i = 0; i < numAI; i++) {\n      jsonData.Tplc_AI.push({\n        Offset: readTag('Tplc_AI', i, '.Offset'),\n        Scaler: readTag('Tplc_AI', i, '.Scaler')\n      });\n    }\n    HMIRuntime.Trace(\"Writing file\");\n    for (let i = 0; i < numAQ; i++) {\n      jsonData.Tplc_AQ.push({\n        Offset: readTag('Tplc_AQ', i, '.Offset'),\n        OpenRampRate: readTag('Tplc_AQ', i, '.OpenRampRate'),\n        CloseRampRate: readTag('Tplc_AQ', i, '.CloseRampRate'),\n        MinAPos: readTag('Tplc_AQ', i, '.MinAPos'),\n        MaxAPos: readTag('Tplc_AQ', i, '.MaxAPos'),\n        MinBPos: readTag('Tplc_AQ', i, '.MinBPos'),\n        MaxBPos: readTag('Tplc_AQ', i, '.MaxBPos')\n      });\n    }\n    HMIRuntime.Trace(\"Writing file\");\n    // Encoders\n    for (let i = 0; i < 28; i++) {\n      jsonData.Encoders.push({\n        Offset: readTag('Tplc_ENC', i, '.Offset')\n      });\n    }\n    HMIRuntime.Trace(\"Writing file\");\n    // Retrieve data from tank tags\n    const tankTagNames = [\"Air_Charge_Start\", \"Air_Charge_Stop\", \"Air_Charge_Vent\", \"Cooling_Off\", \"Cooling_On\", \"Heating_Off\", \"Heating_On\", \"High_Temp_Shutdown\", \"High_Temp_Warning\", \"P_Warning\"];\n\n    tankTagNames.forEach(tagName => {\n      jsonData.Tanks[tagName] = Tags(`System_Data_and_Setup_Tanks_${tagName}`).Read(1);\n    });\n    HMIRuntime.Trace(\"Writing file\");\n    // Retrieve data from cylinder tags\n    const cylinderNames = [\"R1A\", \"R1B\", \"R1C\", \"R1D\", \"R2AC\", \"R2AB\", \"R2CD\", \"R2BD\", \"R3A\", \"R3B\", \"R1E\", \"R5AR\", \"R5BR\", \"R4R\", \"R7AR\", \"R7BR\", \"R6R\", \"R5AL\", \"R5BL\", \"R4L\", \"R7AL\", \"R7BL\", \"R6L\", \"R8\",];\n    const cylinderParams = [\"Area\", \"Bore\", \"Rod\", \"Stroke\", \"Up_Stop_Position\", \"Up_Slowdown_Position\", \"Up_Slowdown_Speed\", \"Down_Slowdown_Position\", \"Down_Stop_Position\", \"Down_Slowdown_Speed\"];\n\n    cylinderNames.forEach(cylinderName => {\n      cylinderParams.forEach(cylinderParam => {\n        jsonData.Cylinder_Setup[`${cylinderName}.${cylinderParam}`] = Tags(`System_Data_and_Setup_Cylinders.${cylinderName}.${cylinderParam}`).Read(1);\n      });\n    });\n    HMIRuntime.Trace(\"Writing file\");\n    // Retrieve data from demand tags\n    const demandTags = [\"Corner_A\", \"Corner_B\", \"Corner_C\", \"Corner_D\", \"Left_Forge\", \"Right_Forge\", \"Accumulator_fill\", \"Vertical_Pierce\"];\n\n    demandTags.forEach(demandTag => {\n      jsonData.Demands[`${demandTag}_Pumps_required`] = Tags(`System_Data_and_Setup_Main_Pumpsets.Demands.${demandTag}_Pumps_Required`).Read();\n    });\n\n    const updatedJSON = JSON.stringify(jsonData, null, 2);\n    const archivePath = `C:/Users/Public/Defaults/Archive/NDC_Defaults_${formatDateTime()}.json`;\n    const path = \"C:/Users/Public/Defaults/NDC_Defaults.json\";\n\n    await Promise.all([\n      HMIRuntime.FileSystem.WriteFile(path, updatedJSON, \"utf8\"),\n      HMIRuntime.FileSystem.WriteFile(archivePath, updatedJSON, \"utf8\")\n    ]);\n\n\n  } catch (error) {\n    HMIRuntime.Trace(\"Error in SaveDefaults:\" + error);\n\n  } finally {\n    Tags(\"loading\").Write(0);\n  }\n\n}",
    "createdAt": "2025-07-04T01:37:53.638Z"
  },
  {
    "id": "tag-read",
    "title": "Read Tag Value",
    "category": "Tag Operations",
    "description": "Safely reads values from WinCC tags with error handling.",
    "isCustom": false,
    "code": "// Read Tag Value - Siemens WinCC Unified\nfunction readTagValue(tagName) {\n    try {\n        var tagValue = Tags(tagName).Read();\n        HMIRuntime.Trace(\"Read tag: \" + tagName + \" = \" + tagValue);\n        return tagValue;\n    } catch (error) {\n        HMIRuntime.Trace(\"Error reading tag: \" + error.message);\n        return null;\n    }\n}\n\n// Example usage:\nvar motorSpeed = readTagValue(\"Motor1_Speed\");\nif (motorSpeed !== null) {\n    HMIRuntime.Trace(\"Motor speed: \" + motorSpeed + \" RPM\");\n}"
  },
  {
    "id": "tag-write",
    "title": "Write Tag Value",
    "category": "Tag Operations",
    "description": "Writes values to WinCC tags with validation and error handling.",
    "isCustom": false,
    "code": "// Write Tag Value - Siemens WinCC Unified\nfunction writeTagValue(tagName, value) {\n    try {\n        if (tagName === null || tagName === \"\") {\n            throw new Error(\"Tag name cannot be empty\");\n        }\n        Tags(tagName).Write(value);\n        HMIRuntime.Trace(\"Wrote tag: \" + tagName + \" = \" + value);\n        return true;\n    } catch (error) {\n        HMIRuntime.Trace(\"Error writing tag: \" + error.message);\n        return false;\n    }\n}\n\n// Example usage:\nvar success = writeTagValue(\"Motor1_SetPoint\", 1500);"
  },
  {
    "id": "array-sorting",
    "title": "Array Sorting",
    "category": "JavaScript Basics",
    "description": "Sort arrays including the missing Siemens documentation example.",
    "isCustom": false,
    "code": "// Array Sorting - Siemens WinCC Unified\n// The missing example from Siemens documentation:\nvar array = ['SIMATIC', 'WinCC', 'Unified'];\narray.sort();\nHMIRuntime.Trace(\"Sorted array: \" + array.join(\", \"));\n\n// Industrial examples:\nvar equipment = ['MOTOR_003', 'PUMP_001', 'VALVE_002'];\nequipment.sort();\nHMIRuntime.Trace(\"Equipment sorted: \" + equipment.join(\", \"));\n\n// Sort numbers:\nvar temperatures = [85.2, 92.1, 78.5, 88.9];\ntemperatures.sort(function(a, b) { return a - b; });\nHMIRuntime.Trace(\"Temperatures: \" + temperatures.join(\"°C, \"));"
  },
  {
    "id": "screen-navigate",
    "title": "Navigate to Screen",
    "category": "Screen Navigation",
    "description": "Navigate between different screens with error handling.",
    "isCustom": false,
    "code": "// Navigate to Screen - Siemens WinCC Unified\nfunction navigateToScreen(screenName) {\n    try {\n        HMIRuntime.Screens.Show(screenName);\n        HMIRuntime.Trace(\"Navigated to screen: \" + screenName);\n        return true;\n    } catch (error) {\n        HMIRuntime.Trace(\"Error navigating: \" + error.message);\n        return false;\n    }\n}\n\n// Example usage:\nnavigateToScreen(\"MainOverview\");\nnavigateToScreen(\"AlarmView\");"
  },
  {
    "id": "alarm-acknowledge",
    "title": "Acknowledge Alarm",
    "category": "Alarm Management",
    "description": "Acknowledge alarms with proper error handling.",
    "isCustom": false,
    "code": "// Acknowledge Alarm - Siemens WinCC Unified\nfunction acknowledgeAlarm(alarmId) {\n    try {\n        HMIRuntime.Alarms.Acknowledge(alarmId);\n        HMIRuntime.Trace(\"Acknowledged alarm: \" + alarmId);\n        return true;\n    } catch (error) {\n        HMIRuntime.Trace(\"Error acknowledging alarm: \" + error.message);\n        return false;\n    }\n}\n\n// Example usage:\nacknowledgeAlarm(\"ALM_001\");\nacknowledgeAlarm(\"TEMP_HIGH_ALARM\");"
  },
  {
    "id": "array-search",
    "title": "Array Search and Find",
    "category": "JavaScript Basics",
    "description": "Search for values in arrays with different methods.",
    "isCustom": false,
    "code": "// Array Search - Siemens WinCC Unified\n// Find equipment in array\nvar equipment = ['MOTOR_001', 'PUMP_002', 'VALVE_003'];\nvar motorIndex = equipment.indexOf('MOTOR_001');\nHMIRuntime.Trace(\"Motor found at index: \" + motorIndex);\n\n// Check if equipment exists\nvar hasPump = equipment.indexOf('PUMP_002') !== -1;\nHMIRuntime.Trace(\"Has pump: \" + hasPump);\n\n// Find alarm by type\nvar alarms = ['TEMP_HIGH', 'PRESSURE_LOW', 'MOTOR_FAULT'];\nvar tempAlarm = alarms.find(function(alarm) {\n    return alarm.indexOf('TEMP') !== -1;\n});\nHMIRuntime.Trace(\"Found temperature alarm: \" + tempAlarm);"
  },
  {
    "id": "array-filter",
    "title": "Array Filtering",
    "category": "JavaScript Basics",
    "description": "Filter arrays to find specific equipment or values.",
    "isCustom": false,
    "code": "// Array Filtering - Siemens WinCC Unified\n// Filter motors from equipment list\nvar equipment = ['MOTOR_001', 'PUMP_002', 'MOTOR_003', 'VALVE_004'];\nvar motors = equipment.filter(function(item) {\n    return item.indexOf('MOTOR') !== -1;\n});\nHMIRuntime.Trace(\"Motors found: \" + motors.join(\", \"));\n\n// Filter high temperatures\nvar temperatures = [78.5, 92.1, 85.2, 105.3, 88.9];\nvar highTemps = temperatures.filter(function(temp) {\n    return temp > 90;\n});\nHMIRuntime.Trace(\"High temperatures: \" + highTemps.join(\"°C, \"));\n\n// Filter active alarms\nvar alarmStates = [true, false, true, false];\nvar activeCount = alarmStates.filter(function(active) {\n    return active === true;\n}).length;\nHMIRuntime.Trace(\"Active alarms: \" + activeCount);"
  },
  {
    "id": "array-map",
    "title": "Array Transformation",
    "category": "JavaScript Basics",
    "description": "Transform array values for calculations and formatting.",
    "isCustom": false,
    "code": "// Array Transformation - Siemens WinCC Unified\n// Convert temperatures to Fahrenheit\nvar celsiusTemps = [25.0, 30.5, 22.8, 35.2];\nvar fahrenheitTemps = celsiusTemps.map(function(celsius) {\n    return (celsius * 9 / 5) + 32;\n});\nHMIRuntime.Trace(\"Fahrenheit: \" + fahrenheitTemps.join(\"°F, \"));\n\n// Add units to equipment names\nvar equipment = ['MOTOR_001', 'PUMP_002', 'VALVE_003'];\nvar equipmentWithUnits = equipment.map(function(item) {\n    return item + \"_UNIT\";\n});\nHMIRuntime.Trace(\"With units: \" + equipmentWithUnits.join(\", \"));\n\n// Format numbers with decimals\nvar values = [123.456, 789.123, 456.789];\nvar formatted = values.map(function(val) {\n    return val.toFixed(2);\n});\nHMIRuntime.Trace(\"Formatted: \" + formatted.join(\", \"));"
  },
  {
    "id": "array-join",
    "title": "Array Joining and Combining",
    "category": "JavaScript Basics",
    "description": "Join arrays and combine multiple arrays together.",
    "isCustom": false,
    "code": "// Array Joining - Siemens WinCC Unified\n// Join equipment names for display\nvar motors = ['MOTOR_001', 'MOTOR_002', 'MOTOR_003'];\nvar motorList = motors.join(', ');\nHMIRuntime.Trace(\"Motor list: \" + motorList);\n\n// Combine different equipment types\nvar pumps = ['PUMP_001', 'PUMP_002'];\nvar valves = ['VALVE_001', 'VALVE_002', 'VALVE_003'];\nvar allEquipment = motors.concat(pumps, valves);\nHMIRuntime.Trace(\"All equipment: \" + allEquipment.join(\", \"));\n\n// Create status report\nvar statuses = ['Running', 'Stopped', 'Maintenance'];\nvar statusReport = \"Equipment Status: \" + statuses.join(\" | \");\nHMIRuntime.Trace(statusReport);"
  },
  {
    "id": "array-reduce",
    "title": "Array Calculations and Totals",
    "category": "JavaScript Basics",
    "description": "Calculate totals, averages, and summaries from arrays.",
    "isCustom": false,
    "code": "// Array Calculations - Siemens WinCC Unified\n// Calculate total production\nvar production = [125, 150, 200, 175, 300];\nvar totalProduction = 0;\nfor (var i = 0; i < production.length; i++) {\n    totalProduction = totalProduction + production[i];\n}\nHMIRuntime.Trace(\"Total production: \" + totalProduction + \" units\");\n\n// Calculate average temperature\nvar temperatures = [78.5, 82.1, 85.2, 79.8, 81.4];\nvar totalTemp = 0;\nfor (var i = 0; i < temperatures.length; i++) {\n    totalTemp = totalTemp + temperatures[i];\n}\nvar averageTemp = totalTemp / temperatures.length;\nHMIRuntime.Trace(\"Average temperature: \" + averageTemp.toFixed(2) + \"°C\");\n\n// Count running equipment\nvar equipmentStatus = ['Running', 'Stopped', 'Running', 'Maintenance', 'Running'];\nvar runningCount = 0;\nfor (var i = 0; i < equipmentStatus.length; i++) {\n    if (equipmentStatus[i] === 'Running') {\n        runningCount = runningCount + 1;\n    }\n}\nHMIRuntime.Trace(\"Running equipment: \" + runningCount + \" out of \" + equipmentStatus.length);"
  },
  {
    "id": "string-concatenation",
    "title": "String Concatenation and Building",
    "category": "JavaScript Basics",
    "description": "Join multiple strings for display messages and file paths.",
    "isCustom": false,
    "code": "// String Concatenation - Siemens WinCC Unified\n// Build equipment names\nvar equipmentType = \"MOTOR\";\nvar equipmentNumber = \"001\";\nvar fullName = equipmentType + \"_\" + equipmentNumber;\nHMIRuntime.Trace(\"Equipment name: \" + fullName);\n\n// Build file paths\nvar basePath = \"C:\\\\Data\\\\\";\nvar fileName = \"ProductionLog.txt\";\nvar fullPath = basePath + fileName;\nHMIRuntime.Trace(\"File path: \" + fullPath);\n\n// Build alarm messages\nvar alarmType = \"Temperature\";\nvar location = \"Tank 1\";\nvar value = \"95.5°C\";\nvar alarmMessage = alarmType + \" alarm in \" + location + \": \" + value;\nHMIRuntime.Trace(\"Alarm: \" + alarmMessage);\n\n// Build status display\nvar motorName = \"Motor 1\";\nvar speed = 1500;\nvar status = \"Running\";\nvar displayText = motorName + \" (\" + speed + \" RPM) - \" + status;\nHMIRuntime.Trace(\"Display: \" + displayText);"
  },
  {
    "id": "string-search",
    "title": "String Searching and Finding",
    "category": "JavaScript Basics",
    "description": "Find text within strings and search for keywords.",
    "isCustom": false,
    "code": "// String Searching - Siemens WinCC Unified\n// Find equipment type in tag name\nvar tagName = \"MOTOR_001_Speed\";\nvar motorPosition = tagName.indexOf(\"MOTOR\");\nHMIRuntime.Trace(\"Motor found at position: \" + motorPosition);\n\n// Check if tag is motor-related\nvar isMotorTag = tagName.indexOf(\"MOTOR\") !== -1;\nHMIRuntime.Trace(\"Is motor tag: \" + isMotorTag);\n\n// Search for alarm keywords\nvar alarmMessage = \"High temperature detected in Tank 1\";\nvar hasTemperature = alarmMessage.indexOf(\"temperature\") !== -1;\nvar hasTank = alarmMessage.indexOf(\"Tank\") !== -1;\nHMIRuntime.Trace(\"Temperature alarm: \" + hasTemperature);\nHMIRuntime.Trace(\"Tank location: \" + hasTank);\n\n// Find file extension\nvar fileName = \"ProductionData.csv\";\nvar dotPosition = fileName.indexOf(\".\");\nif (dotPosition !== -1) {\n    var extension = fileName.substring(dotPosition + 1);\n    HMIRuntime.Trace(\"File extension: \" + extension);\n}"
  },
  {
    "id": "string-split",
    "title": "String Splitting and Parsing",
    "category": "JavaScript Basics",
    "description": "Split comma-separated values and parse data strings.",
    "isCustom": false,
    "code": "// String Splitting - Siemens WinCC Unified\n// Parse equipment list\nvar equipmentList = \"MOTOR_001,PUMP_002,VALVE_003\";\nvar equipment = equipmentList.split(\",\");\nHMIRuntime.Trace(\"Equipment count: \" + equipment.length);\nfor (var i = 0; i < equipment.length; i++) {\n    HMIRuntime.Trace(\"Equipment \" + (i + 1) + \": \" + equipment[i]);\n}\n\n// Parse tag name parts\nvar tagName = \"MOTOR_001_Speed_RPM\";\nvar parts = tagName.split(\"_\");\nvar equipmentType = parts[0];  // MOTOR\nvar equipmentId = parts[1];    // 001\nvar parameter = parts[2];      // Speed\nHMIRuntime.Trace(\"Type: \" + equipmentType + \", ID: \" + equipmentId + \", Parameter: \" + parameter);\n\n// Parse CSV data line\nvar csvLine = \"2024-12-27,Motor1,1500,Running\";\nvar data = csvLine.split(\",\");\nvar date = data[0];\nvar name = data[1];\nvar speed = data[2];\nvar status = data[3];\nHMIRuntime.Trace(\"Date: \" + date + \", Name: \" + name + \", Speed: \" + speed + \", Status: \" + status);"
  },
  {
    "id": "string-case",
    "title": "String Case Conversion",
    "category": "JavaScript Basics",
    "description": "Convert strings to upper/lower case for display consistency.",
    "isCustom": false,
    "code": "// String Case Conversion - Siemens WinCC Unified\n// Format equipment names for display\nvar equipmentName = \"motor_001\";\nvar displayName = equipmentName.toUpperCase();\nHMIRuntime.Trace(\"Display name: \" + displayName);\n\n// Format user input\nvar userInput = \"PUMP_STATUS\";\nvar searchTerm = userInput.toLowerCase();\nHMIRuntime.Trace(\"Search term: \" + searchTerm);\n\n// Standardize alarm messages\nvar alarmType = \"temperature high\";\nvar standardAlarm = alarmType.toUpperCase();\nHMIRuntime.Trace(\"Standard alarm: \" + standardAlarm);\n\n// Format file names\nvar fileName = \"PRODUCTION_LOG.TXT\";\nvar lowerFileName = fileName.toLowerCase();\nHMIRuntime.Trace(\"File name: \" + lowerFileName);\n\n// Mixed case formatting\nvar rawText = \"motor status\";\nvar firstChar = rawText.charAt(0).toUpperCase();\nvar restOfText = rawText.slice(1).toLowerCase();\nvar formattedText = firstChar + restOfText;\nHMIRuntime.Trace(\"Formatted: \" + formattedText);"
  },
  {
    "id": "string-trim",
    "title": "String Trimming and Cleaning",
    "category": "JavaScript Basics",
    "description": "Remove spaces and clean user input for validation.",
    "isCustom": false,
    "code": "// String Trimming - Siemens WinCC Unified\n// Clean user input\nvar userInput = \"  MOTOR_001  \";\nvar cleanInput = userInput.trim();\nHMIRuntime.Trace(\"Original: '\" + userInput + \"'\");\nHMIRuntime.Trace(\"Cleaned: '\" + cleanInput + \"'\");\n\n// Clean recipe name\nvar recipeName = \"   Recipe A   \";\nvar cleanRecipe = recipeName.trim();\nif (cleanRecipe !== \"\") {\n    HMIRuntime.Trace(\"Valid recipe: \" + cleanRecipe);\n} else {\n    HMIRuntime.Trace(\"Empty recipe name\");\n}\n\n// Remove extra spaces from alarm message\nvar alarmMessage = \"  High   temperature   in  Tank 1  \";\nvar cleanMessage = alarmMessage.trim();\n// Replace multiple spaces with single space\nvar words = cleanMessage.split(\" \");\nvar cleanWords = [];\nfor (var i = 0; i < words.length; i++) {\n    if (words[i] !== \"\") {\n        cleanWords.push(words[i]);\n    }\n}\nvar finalMessage = cleanWords.join(\" \");\nHMIRuntime.Trace(\"Clean message: '\" + finalMessage + \"'\");\n\n// Validate tag name\nvar tagName = \"  MOTOR_001_Speed  \";\nvar validTag = tagName.trim();\nif (validTag.length > 0) {\n    HMIRuntime.Trace(\"Valid tag: \" + validTag);\n}"
  },
  {
    "id": "math-basic",
    "title": "Basic Math Functions",
    "category": "JavaScript Basics",
    "description": "Min/Max functions for alarm limits and safety checks.",
    "isCustom": false,
    "code": "// Basic Math Functions - Siemens WinCC Unified\n// Safety limit checking\nvar currentTemp = 95.5;\nvar maxTemp = 100.0;\nvar minTemp = 0.0;\n\n// Ensure temperature stays within limits\nvar safeTemp = Math.min(currentTemp, maxTemp);\nHMIRuntime.Trace(\"Safe temperature: \" + safeTemp + \"°C\");\n\n// Check minimum value\nvar validTemp = Math.max(safeTemp, minTemp);\nHMIRuntime.Trace(\"Valid temperature: \" + validTemp + \"°C\");\n\n// Find highest and lowest values in array\nvar temperatures = [78.5, 92.1, 85.2, 105.3, 88.9];\nvar highestTemp = Math.max.apply(null, temperatures);\nvar lowestTemp = Math.min.apply(null, temperatures);\nHMIRuntime.Trace(\"Highest: \" + highestTemp + \"°C\");\nHMIRuntime.Trace(\"Lowest: \" + lowestTemp + \"°C\");\n\n// Absolute values for difference calculations\nvar setPoint = 80.0;\nvar actualValue = 78.5;\nvar difference = Math.abs(actualValue - setPoint);\nHMIRuntime.Trace(\"Temperature difference: \" + difference + \"°C\");"
  },
  {
    "id": "math-advanced",
    "title": "Advanced Calculations",
    "category": "JavaScript Basics",
    "description": "Percentage calculations for production efficiency.",
    "isCustom": false,
    "code": "// Advanced Calculations - Siemens WinCC Unified\n// Production efficiency calculation\nvar goodParts = 850;\nvar totalParts = 1000;\nvar efficiency = (goodParts / totalParts) * 100;\nHMIRuntime.Trace(\"Production efficiency: \" + efficiency.toFixed(2) + \"%\");\n\n// Power calculation\nvar voltage = 230;  // Volts\nvar current = 10;   // Amps\nvar power = voltage * current;\nHMIRuntime.Trace(\"Motor power: \" + power + \" Watts\");\n\n// Average calculation\nvar readings = [78.5, 82.1, 85.2, 79.8, 81.4];\nvar total = 0;\nfor (var i = 0; i < readings.length; i++) {\n    total = total + readings[i];\n}\nvar average = total / readings.length;\nHMIRuntime.Trace(\"Average reading: \" + average.toFixed(2));\n\n// Round values for display\nvar preciseValue = 123.456789;\nvar rounded = Math.round(preciseValue * 100) / 100; // Round to 2 decimals\nHMIRuntime.Trace(\"Rounded value: \" + rounded);\n\n// Square root for standard deviation\nvar variance = 25.0;\nvar standardDeviation = Math.sqrt(variance);\nHMIRuntime.Trace(\"Standard deviation: \" + standardDeviation);"
  },
  {
    "id": "math-formatting",
    "title": "Number Formatting",
    "category": "JavaScript Basics",
    "description": "Format numbers for display with proper decimals.",
    "isCustom": false,
    "code": "// Number Formatting - Siemens WinCC Unified\n// Format temperature with 2 decimals\nvar temperature = 78.456789;\nvar formattedTemp = temperature.toFixed(2);\nHMIRuntime.Trace(\"Temperature: \" + formattedTemp + \"°C\");\n\n// Format pressure with 1 decimal\nvar pressure = 123.456;\nvar formattedPressure = pressure.toFixed(1);\nHMIRuntime.Trace(\"Pressure: \" + formattedPressure + \" bar\");\n\n// Format large numbers with separators\nvar productionCount = 1234567;\nvar formattedCount = productionCount.toLocaleString();\nHMIRuntime.Trace(\"Production: \" + formattedCount + \" units\");\n\n// Format percentage\nvar efficiency = 0.8567;\nvar efficiencyPercent = (efficiency * 100).toFixed(1) + \"%\";\nHMIRuntime.Trace(\"Efficiency: \" + efficiencyPercent);\n\n// Format currency (for cost calculations)\nvar materialCost = 1234.56;\nvar formattedCost = \"$\" + materialCost.toFixed(2);\nHMIRuntime.Trace(\"Material cost: \" + formattedCost);\n\n// Remove decimals for integer display\nvar speed = 1500.789;\nvar integerSpeed = Math.floor(speed);\nHMIRuntime.Trace(\"Motor speed: \" + integerSpeed + \" RPM\");"
  },
  {
    "id": "date-current",
    "title": "Current Date and Time",
    "category": "JavaScript Basics",
    "description": "Get current timestamp for logging and displays.",
    "isCustom": false,
    "code": "// Current Date/Time - Siemens WinCC Unified\n// Get current date and time\nvar now = new Date();\nHMIRuntime.Trace(\"Current date/time: \" + now.toString());\n\n// Get individual components\nvar year = now.getFullYear();\nvar month = now.getMonth() + 1; // Month is 0-based\nvar day = now.getDate();\nvar hours = now.getHours();\nvar minutes = now.getMinutes();\nvar seconds = now.getSeconds();\n\nHMIRuntime.Trace(\"Year: \" + year);\nHMIRuntime.Trace(\"Month: \" + month);\nHMIRuntime.Trace(\"Day: \" + day);\nHMIRuntime.Trace(\"Time: \" + hours + \":\" + minutes + \":\" + seconds);\n\n// Create timestamp for logging\nvar timestamp = year + \"-\" + month + \"-\" + day + \" \" + hours + \":\" + minutes + \":\" + seconds;\nHMIRuntime.Trace(\"Log timestamp: \" + timestamp);\n\n// Get day of week\nvar dayNames = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\nvar dayOfWeek = dayNames[now.getDay()];\nHMIRuntime.Trace(\"Day of week: \" + dayOfWeek);"
  },
  {
    "id": "date-formatting",
    "title": "Date Formatting",
    "category": "JavaScript Basics",
    "description": "Format dates for reports and displays.",
    "isCustom": false,
    "code": "// Date Formatting - Siemens WinCC Unified\n// Create a date for formatting\nvar date = new Date();\n\n// Format for local display\nvar localDate = date.toLocaleDateString();\nHMIRuntime.Trace(\"Local date: \" + localDate);\n\n// Format for local time\nvar localTime = date.toLocaleTimeString();\nHMIRuntime.Trace(\"Local time: \" + localTime);\n\n// Custom format: YYYY-MM-DD\nvar year = date.getFullYear();\nvar month = (date.getMonth() + 1).toString();\nvar day = date.getDate().toString();\n// Add leading zeros\nif (month.length === 1) month = \"0\" + month;\nif (day.length === 1) day = \"0\" + day;\nvar customDate = year + \"-\" + month + \"-\" + day;\nHMIRuntime.Trace(\"Custom date: \" + customDate);\n\n// Custom format: DD/MM/YYYY HH:MM\nvar hours = date.getHours().toString();\nvar minutes = date.getMinutes().toString();\nif (hours.length === 1) hours = \"0\" + hours;\nif (minutes.length === 1) minutes = \"0\" + minutes;\nvar displayFormat = day + \"/\" + month + \"/\" + year + \" \" + hours + \":\" + minutes;\nHMIRuntime.Trace(\"Display format: \" + displayFormat);\n\n// File name format: YYYYMMDD_HHMMSS\nvar fileFormat = year + month + day + \"_\" + hours + minutes + date.getSeconds();\nHMIRuntime.Trace(\"File format: \" + fileFormat);"
  },
  {
    "id": "date-calculations",
    "title": "Date Calculations",
    "category": "JavaScript Basics",
    "description": "Calculate time differences and schedules.",
    "isCustom": false,
    "code": "// Date Calculations - Siemens WinCC Unified\n// Calculate time difference\nvar startTime = new Date();\n// Simulate some process time\nvar endTime = new Date(startTime.getTime() + 5000); // Add 5 seconds\n\nvar timeDifference = endTime - startTime; // Difference in milliseconds\nvar secondsDifference = timeDifference / 1000;\nHMIRuntime.Trace(\"Process time: \" + secondsDifference + \" seconds\");\n\n// Calculate hours difference\nvar shiftStart = new Date();\nshiftStart.setHours(8, 0, 0); // 8:00 AM\nvar shiftEnd = new Date();\nshiftEnd.setHours(16, 0, 0); // 4:00 PM\n\nvar shiftDuration = (shiftEnd - shiftStart) / (1000 * 60 * 60); // Convert to hours\nHMIRuntime.Trace(\"Shift duration: \" + shiftDuration + \" hours\");\n\n// Add days to current date (maintenance schedule)\nvar today = new Date();\nvar maintenanceDate = new Date(today.getTime() + (30 * 24 * 60 * 60 * 1000)); // Add 30 days\nHMIRuntime.Trace(\"Next maintenance: \" + maintenanceDate.toLocaleDateString());\n\n// Calculate age of equipment\nvar installDate = new Date(2020, 0, 15); // January 15, 2020\nvar currentDate = new Date();\nvar ageInDays = Math.floor((currentDate - installDate) / (1000 * 60 * 60 * 24));\nvar ageInYears = Math.floor(ageInDays / 365);\nHMIRuntime.Trace(\"Equipment age: \" + ageInYears + \" years (\" + ageInDays + \" days)\");"
  },
  {
    "id": "date-timezone",
    "title": "Time Zone Handling",
    "category": "JavaScript Basics",
    "description": "Convert between local and UTC time for global operations.",
    "isCustom": false,
    "code": "// Time Zone Handling - Siemens WinCC Unified\n// Get current date in different formats\nvar now = new Date();\n\n// Local time\nHMIRuntime.Trace(\"Local time: \" + now.toString());\n\n// UTC time\nvar utcTime = now.toUTCString();\nHMIRuntime.Trace(\"UTC time: \" + utcTime);\n\n// ISO format (good for data exchange)\nvar isoTime = now.toISOString();\nHMIRuntime.Trace(\"ISO time: \" + isoTime);\n\n// Get timezone offset\nvar timezoneOffset = now.getTimezoneOffset(); // Minutes\nvar offsetHours = timezoneOffset / 60;\nHMIRuntime.Trace(\"Timezone offset: \" + offsetHours + \" hours\");\n\n// Convert local to UTC manually\nvar utcYear = now.getUTCFullYear();\nvar utcMonth = now.getUTCMonth() + 1;\nvar utcDay = now.getUTCDate();\nvar utcHours = now.getUTCHours();\nvar utcMinutes = now.getUTCMinutes();\nvar manualUTC = utcYear + \"-\" + utcMonth + \"-\" + utcDay + \" \" + utcHours + \":\" + utcMinutes;\nHMIRuntime.Trace(\"Manual UTC: \" + manualUTC);\n\n// Create UTC timestamp for global logging\nvar utcTimestamp = Date.UTC(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours(), now.getMinutes());\nHMIRuntime.Trace(\"UTC timestamp: \" + utcTimestamp);"
  },
  {
    "id": "conversion-string-number",
    "title": "String to Number Conversion",
    "category": "JavaScript Basics",
    "description": "Convert user input to numeric values safely.",
    "isCustom": false,
    "code": "// String to Number Conversion - Siemens WinCC Unified\n// Convert setpoint from user input\nvar userInput = \"75.5\";\nvar setpoint = parseFloat(userInput);\nif (!isNaN(setpoint)) {\n    HMIRuntime.Trace(\"Valid setpoint: \" + setpoint + \"°C\");\n} else {\n    HMIRuntime.Trace(\"Invalid input: \" + userInput);\n}\n\n// Convert integer values\nvar speedInput = \"1500\";\nvar motorSpeed = parseInt(speedInput);\nif (!isNaN(motorSpeed)) {\n    HMIRuntime.Trace(\"Motor speed: \" + motorSpeed + \" RPM\");\n}\n\n// Handle invalid input safely\nvar invalidInput = \"abc123\";\nvar result = parseFloat(invalidInput);\nif (isNaN(result)) {\n    HMIRuntime.Trace(\"Error: Cannot convert '\" + invalidInput + \"' to number\");\n    result = 0; // Use default value\n    HMIRuntime.Trace(\"Using default value: \" + result);\n}\n\n// Convert multiple values from comma-separated string\nvar valuesString = \"10.5,25.0,37.5,42.0\";\nvar valueArray = valuesString.split(\",\");\nvar numbers = [];\nfor (var i = 0; i < valueArray.length; i++) {\n    var num = parseFloat(valueArray[i]);\n    if (!isNaN(num)) {\n        numbers.push(num);\n    }\n}\nHMIRuntime.Trace(\"Numbers: \" + numbers.join(\", \"));"
  },
  {
    "id": "conversion-number-string",
    "title": "Number to String Conversion",
    "category": "JavaScript Basics",
    "description": "Format numbers for display messages.",
    "isCustom": false,
    "code": "// Number to String Conversion - Siemens WinCC Unified\n// Convert temperature for display\nvar temperature = 78.456;\nvar tempString = temperature.toString();\nHMIRuntime.Trace(\"Temperature as string: \" + tempString);\n\n// Format with specific decimal places\nvar pressure = 123.456789;\nvar pressureString = pressure.toFixed(2);\nHMIRuntime.Trace(\"Pressure: \" + pressureString + \" bar\");\n\n// Build display message with numbers\nvar motorName = \"Motor 1\";\nvar speed = 1450;\nvar current = 8.5;\nvar statusMessage = motorName + \" running at \" + speed.toString() + \" RPM, \" + current.toString() + \" A\";\nHMIRuntime.Trace(\"Status: \" + statusMessage);\n\n// Convert to scientific notation\nvar largeNumber = 1234567.89;\nvar scientificString = largeNumber.toExponential(2);\nHMIRuntime.Trace(\"Scientific: \" + scientificString);\n\n// Convert to fixed width string (padding)\nvar count = 42;\nvar countString = count.toString();\nwhile (countString.length < 4) {\n    countString = \"0\" + countString; // Add leading zeros\n}\nHMIRuntime.Trace(\"Padded count: \" + countString);"
  },
  {
    "id": "conversion-boolean",
    "title": "Boolean Conversions",
    "category": "JavaScript Basics",
    "description": "Convert different true/false formats from PLC.",
    "isCustom": false,
    "code": "// Boolean Conversion - Siemens WinCC Unified\n// Convert PLC values to boolean\nvar plcValue1 = 1;  // PLC sends 1 for true\nvar isRunning = Boolean(plcValue1);\nHMIRuntime.Trace(\"Motor running: \" + isRunning);\n\n// Convert string values\nvar stringValue = \"true\";\nvar boolValue = (stringValue.toLowerCase() === \"true\");\nHMIRuntime.Trace(\"String to bool: \" + boolValue);\n\n// Handle different PLC formats\nvar plcStatus = \"ON\";  // PLC might send ON/OFF\nvar isOn = (plcStatus.toUpperCase() === \"ON\");\nHMIRuntime.Trace(\"Equipment on: \" + isOn);\n\n// Convert numbers to boolean (0 = false, anything else = true)\nvar values = [0, 1, 5, -1, 0.5];\nfor (var i = 0; i < values.length; i++) {\n    var boolResult = Boolean(values[i]);\n    HMIRuntime.Trace(\"Value \" + values[i] + \" as boolean: \" + boolResult);\n}\n\n// Convert boolean back to PLC format\nvar motorEnabled = true;\nvar plcFormat = motorEnabled ? 1 : 0;  // Convert to 1/0 for PLC\nHMIRuntime.Trace(\"PLC format: \" + plcFormat);\n\n// Handle null and undefined\nvar undefinedValue;\nvar nullValue = null;\nHMIRuntime.Trace(\"Undefined as boolean: \" + Boolean(undefinedValue));\nHMIRuntime.Trace(\"Null as boolean: \" + Boolean(nullValue));"
  },
  {
    "id": "loop-for-arrays",
    "title": "For Loops with Arrays",
    "category": "JavaScript Basics",
    "description": "Process multiple tags or equipment with for loops.",
    "isCustom": false,
    "code": "// For Loops with Arrays - Siemens WinCC Unified\n// Process multiple motor tags\nvar motorTags = [\"MOTOR_001_Speed\", \"MOTOR_002_Speed\", \"MOTOR_003_Speed\"];\nfor (var i = 0; i < motorTags.length; i++) {\n    var tagName = motorTags[i];\n    var speed = Tags(tagName).Read();\n    HMIRuntime.Trace(\"Motor \" + (i + 1) + \" speed: \" + speed + \" RPM\");\n}\n\n// Check multiple alarm states\nvar alarmTags = [\"ALM_TEMP_HIGH\", \"ALM_PRESSURE_LOW\", \"ALM_MOTOR_FAULT\"];\nvar activeAlarms = 0;\nfor (var i = 0; i < alarmTags.length; i++) {\n    var alarmState = Tags(alarmTags[i]).Read();\n    if (alarmState === true) {\n        activeAlarms = activeAlarms + 1;\n        HMIRuntime.Trace(\"Active alarm: \" + alarmTags[i]);\n    }\n}\nHMIRuntime.Trace(\"Total active alarms: \" + activeAlarms);\n\n// Update multiple setpoints\nvar setpointTags = [\"SP_TEMP_1\", \"SP_TEMP_2\", \"SP_TEMP_3\"];\nvar newSetpoint = 75.0;\nfor (var i = 0; i < setpointTags.length; i++) {\n    Tags(setpointTags[i]).Write(newSetpoint);\n    HMIRuntime.Trace(\"Updated \" + setpointTags[i] + \" to \" + newSetpoint);\n}\n\n// Process equipment status list\nvar equipment = [\"PUMP_001\", \"VALVE_002\", \"MOTOR_003\"];\nfor (var i = 0; i < equipment.length; i++) {\n    var statusTag = equipment[i] + \"_Status\";\n    var status = Tags(statusTag).Read();\n    HMIRuntime.Trace(equipment[i] + \" status: \" + status);\n}"
  },
  {
    "id": "loop-while",
    "title": "While Loops for Conditions",
    "category": "JavaScript Basics",
    "description": "Wait for equipment status changes with while loops.",
    "isCustom": false,
    "code": "// While Loops - Siemens WinCC Unified\n// Wait for motor to start (with timeout for safety)\nvar motorRunning = false;\nvar timeout = 0;\nvar maxTimeout = 10; // 10 seconds maximum wait\n\nwhile (motorRunning === false && timeout < maxTimeout) {\n    motorRunning = Tags(\"MOTOR_001_Running\").Read();\n    if (motorRunning === false) {\n        HMIRuntime.Trace(\"Waiting for motor to start... (\" + timeout + \"s)\");\n        // In real application, use a timer instead of blocking\n        timeout = timeout + 1;\n    }\n}\n\nif (motorRunning) {\n    HMIRuntime.Trace(\"Motor started successfully!\");\n} else {\n    HMIRuntime.Trace(\"Timeout: Motor failed to start\");\n}\n\n// Process queue until empty\nvar queueLength = Tags(\"QUEUE_LENGTH\").Read();\nwhile (queueLength > 0) {\n    HMIRuntime.Trace(\"Processing queue item, remaining: \" + queueLength);\n    // Process one item (this would trigger PLC logic)\n    Tags(\"PROCESS_NEXT_ITEM\").Write(true);\n    \n    // Check queue length again\n    queueLength = Tags(\"QUEUE_LENGTH\").Read();\n}\nHMIRuntime.Trace(\"Queue processing complete\");\n\n// Wait for stable temperature reading\nvar temperature = Tags(\"TEMP_SENSOR_1\").Read();\nvar previousTemp = temperature;\nvar stableCount = 0;\nvar requiredStableReadings = 3;\n\nwhile (stableCount < requiredStableReadings) {\n    temperature = Tags(\"TEMP_SENSOR_1\").Read();\n    if (Math.abs(temperature - previousTemp) < 0.5) {\n        stableCount = stableCount + 1;\n    } else {\n        stableCount = 0; // Reset if temperature changed\n    }\n    previousTemp = temperature;\n    HMIRuntime.Trace(\"Temperature: \" + temperature + \", Stable readings: \" + stableCount);\n}\nHMIRuntime.Trace(\"Temperature stabilized at: \" + temperature + \"°C\");"
  },
  {
    "id": "loop-break-continue",
    "title": "Break and Continue Logic",
    "category": "JavaScript Basics",
    "description": "Control loop execution with break and continue.",
    "isCustom": false,
    "code": "// Break and Continue Logic - Siemens WinCC Unified\n// Check equipment list, stop on first error\nvar equipment = [\"MOTOR_001\", \"PUMP_002\", \"VALVE_003\", \"MOTOR_004\"];\nvar errorFound = false;\n\nfor (var i = 0; i < equipment.length; i++) {\n    var statusTag = equipment[i] + \"_Status\";\n    var status = Tags(statusTag).Read();\n    \n    if (status === \"ERROR\") {\n        HMIRuntime.Trace(\"ERROR found in \" + equipment[i] + \" - stopping check\");\n        errorFound = true;\n        break; // Exit loop immediately\n    }\n    \n    HMIRuntime.Trace(equipment[i] + \" status: \" + status + \" - OK\");\n}\n\nif (errorFound) {\n    HMIRuntime.Trace(\"Equipment check failed - manual intervention required\");\n} else {\n    HMIRuntime.Trace(\"All equipment status OK\");\n}\n\n// Skip offline equipment in processing\nvar sensors = [\"TEMP_001\", \"TEMP_002\", \"TEMP_003\", \"TEMP_004\"];\nvar totalTemp = 0;\nvar validReadings = 0;\n\nfor (var i = 0; i < sensors.length; i++) {\n    var onlineStatus = Tags(sensors[i] + \"_Online\").Read();\n    \n    if (onlineStatus === false) {\n        HMIRuntime.Trace(\"Skipping offline sensor: \" + sensors[i]);\n        continue; // Skip to next iteration\n    }\n    \n    var temperature = Tags(sensors[i] + \"_Value\").Read();\n    totalTemp = totalTemp + temperature;\n    validReadings = validReadings + 1;\n    HMIRuntime.Trace(sensors[i] + \" temperature: \" + temperature + \"°C\");\n}\n\nif (validReadings > 0) {\n    var averageTemp = totalTemp / validReadings;\n    HMIRuntime.Trace(\"Average temperature: \" + averageTemp.toFixed(2) + \"°C (\" + validReadings + \" sensors)\");\n} else {\n    HMIRuntime.Trace(\"No valid temperature readings available\");\n}"
  },
  {
    "id": "conditional-if-else",
    "title": "If-Else Chain Logic",
    "category": "JavaScript Basics",
    "description": "Handle multiple equipment states with if-else chains.",
    "isCustom": false,
    "code": "// If-Else Chain Logic - Siemens WinCC Unified\n// Equipment state handling\nvar equipmentState = Tags(\"MOTOR_001_State\").Read();\n\nif (equipmentState === \"RUNNING\") {\n    HMIRuntime.Trace(\"Motor is running normally\");\n    // Set status indicator to green\n    Tags(\"STATUS_LIGHT\").Write(\"GREEN\");\n} else if (equipmentState === \"STARTING\") {\n    HMIRuntime.Trace(\"Motor is starting up\");\n    Tags(\"STATUS_LIGHT\").Write(\"YELLOW\");\n} else if (equipmentState === \"STOPPING\") {\n    HMIRuntime.Trace(\"Motor is stopping\");\n    Tags(\"STATUS_LIGHT\").Write(\"YELLOW\");\n} else if (equipmentState === \"FAULT\") {\n    HMIRuntime.Trace(\"Motor fault detected - check alarms\");\n    Tags(\"STATUS_LIGHT\").Write(\"RED\");\n} else if (equipmentState === \"MAINTENANCE\") {\n    HMIRuntime.Trace(\"Motor in maintenance mode\");\n    Tags(\"STATUS_LIGHT\").Write(\"BLUE\");\n} else {\n    HMIRuntime.Trace(\"Unknown motor state: \" + equipmentState);\n    Tags(\"STATUS_LIGHT\").Write(\"RED\");\n}\n\n// Temperature range checking\nvar temperature = Tags(\"TEMP_SENSOR_1\").Read();\nvar tempStatus = \"\";\n\nif (temperature < 0) {\n    tempStatus = \"FREEZING\";\n    HMIRuntime.Trace(\"WARNING: Temperature below freezing point\");\n} else if (temperature >= 0 && temperature < 20) {\n    tempStatus = \"COLD\";\n    HMIRuntime.Trace(\"Temperature is cold\");\n} else if (temperature >= 20 && temperature < 30) {\n    tempStatus = \"NORMAL\";\n    HMIRuntime.Trace(\"Temperature is normal\");\n} else if (temperature >= 30 && temperature < 40) {\n    tempStatus = \"WARM\";\n    HMIRuntime.Trace(\"Temperature is warm\");\n} else {\n    tempStatus = \"HOT\";\n    HMIRuntime.Trace(\"ALARM: Temperature is too hot!\");\n}\n\nTags(\"TEMP_STATUS\").Write(tempStatus);"
  },
  {
    "id": "conditional-switch",
    "title": "Switch Statement Logic",
    "category": "JavaScript Basics",
    "description": "Handle different equipment modes with switch statements.",
    "isCustom": false,
    "code": "// Switch Statement Logic - Siemens WinCC Unified\n// Handle different alarm types\nvar alarmType = Tags(\"CURRENT_ALARM_TYPE\").Read();\n\nswitch (alarmType) {\n    case \"TEMPERATURE_HIGH\":\n        HMIRuntime.Trace(\"High temperature alarm - reducing heating\");\n        Tags(\"HEATER_SETPOINT\").Write(70);\n        Tags(\"COOLING_FAN\").Write(true);\n        break;\n        \n    case \"TEMPERATURE_LOW\":\n        HMIRuntime.Trace(\"Low temperature alarm - increasing heating\");\n        Tags(\"HEATER_SETPOINT\").Write(90);\n        Tags(\"COOLING_FAN\").Write(false);\n        break;\n        \n    case \"PRESSURE_HIGH\":\n        HMIRuntime.Trace(\"High pressure alarm - opening relief valve\");\n        Tags(\"RELIEF_VALVE\").Write(true);\n        break;\n        \n    case \"PRESSURE_LOW\":\n        HMIRuntime.Trace(\"Low pressure alarm - starting backup pump\");\n        Tags(\"BACKUP_PUMP\").Write(true);\n        break;\n        \n    case \"MOTOR_FAULT\":\n        HMIRuntime.Trace(\"Motor fault - stopping system\");\n        Tags(\"SYSTEM_SHUTDOWN\").Write(true);\n        break;\n        \n    default:\n        HMIRuntime.Trace(\"Unknown alarm type: \" + alarmType);\n        break;\n}\n\n// Handle production modes\nvar productionMode = Tags(\"PRODUCTION_MODE\").Read();\n\nswitch (productionMode) {\n    case 1:\n        HMIRuntime.Trace(\"Production Mode: Standard\");\n        Tags(\"CONVEYOR_SPEED\").Write(100);\n        Tags(\"QUALITY_CHECK\").Write(true);\n        break;\n        \n    case 2:\n        HMIRuntime.Trace(\"Production Mode: High Speed\");\n        Tags(\"CONVEYOR_SPEED\").Write(150);\n        Tags(\"QUALITY_CHECK\").Write(false);\n        break;\n        \n    case 3:\n        HMIRuntime.Trace(\"Production Mode: Quality Focus\");\n        Tags(\"CONVEYOR_SPEED\").Write(75);\n        Tags(\"QUALITY_CHECK\").Write(true);\n        break;\n        \n    case 0:\n    default:\n        HMIRuntime.Trace(\"Production Mode: Stopped\");\n        Tags(\"CONVEYOR_SPEED\").Write(0);\n        Tags(\"QUALITY_CHECK\").Write(false);\n        break;\n}"
  },
  {
    "id": "conditional-comparison",
    "title": "Comparison Operations",
    "category": "JavaScript Basics",
    "description": "Compare values for limit checking and safety.",
    "isCustom": false,
    "code": "// Comparison Operations - Siemens WinCC Unified\n// Temperature limit checking\nvar currentTemp = Tags(\"TEMP_SENSOR_1\").Read();\nvar tempHighLimit = 100.0;\nvar tempLowLimit = 10.0;\n\n// Greater than comparison\nif (currentTemp > tempHighLimit) {\n    HMIRuntime.Trace(\"ALARM: Temperature too high (\" + currentTemp + \"°C > \" + tempHighLimit + \"°C)\");\n    Tags(\"TEMP_HIGH_ALARM\").Write(true);\n}\n\n// Less than comparison\nif (currentTemp < tempLowLimit) {\n    HMIRuntime.Trace(\"ALARM: Temperature too low (\" + currentTemp + \"°C < \" + tempLowLimit + \"°C)\");\n    Tags(\"TEMP_LOW_ALARM\").Write(true);\n}\n\n// Greater than or equal comparison\nvar pressure = Tags(\"PRESSURE_SENSOR_1\").Read();\nvar safetyLimit = 150.0;\nif (pressure >= safetyLimit) {\n    HMIRuntime.Trace(\"WARNING: Pressure at or above safety limit (\" + pressure + \" >= \" + safetyLimit + \")\");\n    Tags(\"PRESSURE_WARNING\").Write(true);\n}\n\n// Less than or equal comparison\nvar motorSpeed = Tags(\"MOTOR_001_Speed\").Read();\nvar minSpeed = 100;\nif (motorSpeed <= minSpeed) {\n    HMIRuntime.Trace(\"Motor speed low (\" + motorSpeed + \" <= \" + minSpeed + \")\");\n    Tags(\"LOW_SPEED_WARNING\").Write(true);\n}\n\n// Equality comparison\nvar equipmentStatus = Tags(\"PUMP_001_Status\").Read();\nif (equipmentStatus === \"RUNNING\") {\n    HMIRuntime.Trace(\"Pump is running normally\");\n} else if (equipmentStatus === \"STOPPED\") {\n    HMIRuntime.Trace(\"Pump is stopped\");\n}\n\n// Not equal comparison\nvar alarmState = Tags(\"SYSTEM_ALARM\").Read();\nif (alarmState !== \"OK\") {\n    HMIRuntime.Trace(\"System alarm active: \" + alarmState);\n    Tags(\"ALARM_INDICATOR\").Write(true);\n}\n\n// Range checking (between values)\nvar optimalTemp = 75.0;\nvar tolerance = 5.0;\nif (currentTemp >= (optimalTemp - tolerance) && currentTemp <= (optimalTemp + tolerance)) {\n    HMIRuntime.Trace(\"Temperature within optimal range\");\n    Tags(\"TEMP_OPTIMAL\").Write(true);\n} else {\n    HMIRuntime.Trace(\"Temperature outside optimal range\");\n    Tags(\"TEMP_OPTIMAL\").Write(false);\n}"
  },
  {
    "id": "error-try-catch",
    "title": "Try-Catch Error Handling",
    "category": "Best Practices",
    "description": "Handle PLC communication errors safely.",
    "isCustom": false,
    "code": "// Try-Catch Error Handling - Siemens WinCC Unified\n// Safe tag reading with error handling\nfunction safeReadTag(tagName) {\n    try {\n        var value = Tags(tagName).Read();\n        HMIRuntime.Trace(\"Successfully read \" + tagName + \": \" + value);\n        return value;\n    } catch (error) {\n        HMIRuntime.Trace(\"Error reading \" + tagName + \": \" + error.message);\n        return null; // Return safe default value\n    }\n}\n\n// Safe tag writing with error handling\nfunction safeWriteTag(tagName, value) {\n    try {\n        Tags(tagName).Write(value);\n        HMIRuntime.Trace(\"Successfully wrote \" + tagName + \": \" + value);\n        return true;\n    } catch (error) {\n        HMIRuntime.Trace(\"Error writing \" + tagName + \": \" + error.message);\n        return false;\n    }\n}\n\n// Example usage with error handling\nvar motorSpeed = safeReadTag(\"MOTOR_001_Speed\");\nif (motorSpeed !== null) {\n    // Only proceed if read was successful\n    var newSetpoint = motorSpeed + 100;\n    var writeSuccess = safeWriteTag(\"MOTOR_001_Setpoint\", newSetpoint);\n    \n    if (writeSuccess) {\n        HMIRuntime.Trace(\"Motor setpoint updated successfully\");\n    } else {\n        HMIRuntime.Trace(\"Failed to update motor setpoint\");\n    }\n} else {\n    HMIRuntime.Trace(\"Cannot update setpoint - failed to read current speed\");\n}\n\n// Handle screen navigation errors\ntry {\n    HMIRuntime.Screens.Show(\"DetailedView\");\n    HMIRuntime.Trace(\"Screen navigation successful\");\n} catch (error) {\n    HMIRuntime.Trace(\"Screen navigation failed: \" + error.message);\n    // Try alternative screen\n    try {\n        HMIRuntime.Screens.Show(\"MainView\");\n        HMIRuntime.Trace(\"Fallback screen loaded\");\n    } catch (fallbackError) {\n        HMIRuntime.Trace(\"All screen navigation failed: \" + fallbackError.message);\n    }\n}"
  },
  {
    "id": "error-logging",
    "title": "Error Logging Strategies",
    "category": "Best Practices",
    "description": "Log errors for debugging and system monitoring.",
    "isCustom": false,
    "code": "// Error Logging Strategies - Siemens WinCC Unified\n// Enhanced error logging function\nfunction logError(errorType, location, message, additionalData) {\n    var timestamp = new Date().toISOString();\n    var logEntry = \"[\" + timestamp + \"] ERROR - \" + errorType + \" in \" + location + \": \" + message;\n    \n    if (additionalData) {\n        logEntry = logEntry + \" | Data: \" + JSON.stringify(additionalData);\n    }\n    \n    // Log to HMI Runtime\n    HMIRuntime.Trace(logEntry);\n    \n    // Also write to error counter tag\n    try {\n        var errorCount = Tags(\"ERROR_COUNT\").Read();\n        Tags(\"ERROR_COUNT\").Write(errorCount + 1);\n        Tags(\"LAST_ERROR_TIME\").Write(timestamp);\n        Tags(\"LAST_ERROR_MESSAGE\").Write(message);\n    } catch (tagError) {\n        HMIRuntime.Trace(\"Failed to update error tags: \" + tagError.message);\n    }\n}\n\n// Log different types of errors\nfunction processMotorData() {\n    try {\n        var motorSpeed = Tags(\"MOTOR_001_Speed\").Read();\n        \n        if (motorSpeed < 0) {\n            logError(\"DATA_VALIDATION\", \"processMotorData\", \"Invalid motor speed\", {speed: motorSpeed});\n            return false;\n        }\n        \n        // Process successful\n        HMIRuntime.Trace(\"Motor data processed successfully: \" + motorSpeed + \" RPM\");\n        return true;\n        \n    } catch (error) {\n        logError(\"COMMUNICATION\", \"processMotorData\", \"Failed to read motor speed\", {error: error.message});\n        return false;\n    }\n}\n\n// Usage examples\nprocessMotorData();\n\n// Log system events\nlogError(\"SYSTEM\", \"Startup\", \"Application started\", {version: \"1.0.0\"});\nlogError(\"USER\", \"Login\", \"Invalid user credentials\", {username: \"operator1\"});\nlogError(\"HARDWARE\", \"SensorCheck\", \"Sensor not responding\", {sensor: \"TEMP_001\"});\n\n// Performance logging\nvar startTime = new Date().getTime();\n// ... some operation ...\nvar endTime = new Date().getTime();\nvar duration = endTime - startTime;\n\nif (duration > 1000) { // Log slow operations\n    logError(\"PERFORMANCE\", \"DataProcessing\", \"Operation took too long\", {duration: duration + \"ms\"});\n}"
  },
  {
    "id": "error-retry",
    "title": "Retry Logic for Failed Operations",
    "category": "Best Practices",
    "description": "Re-attempt failed operations with retry logic.",
    "isCustom": false,
    "code": "// Retry Logic - Siemens WinCC Unified\n// Retry function with configurable attempts\nfunction retryOperation(operationFunction, maxRetries, delayMs) {\n    var attempt = 0;\n    \n    while (attempt < maxRetries) {\n        try {\n            var result = operationFunction();\n            HMIRuntime.Trace(\"Operation successful on attempt \" + (attempt + 1));\n            return result;\n        } catch (error) {\n            attempt = attempt + 1;\n            HMIRuntime.Trace(\"Attempt \" + attempt + \" failed: \" + error.message);\n            \n            if (attempt >= maxRetries) {\n                HMIRuntime.Trace(\"All \" + maxRetries + \" attempts failed - giving up\");\n                throw error; // Re-throw the last error\n            }\n            \n            HMIRuntime.Trace(\"Waiting \" + delayMs + \"ms before retry...\");\n            // In real application, use a proper delay mechanism\n            // This is simplified for demonstration\n        }\n    }\n}\n\n// Example: Retry tag writing\nfunction writeTagWithRetry(tagName, value) {\n    function writeOperation() {\n        Tags(tagName).Write(value);\n        return true;\n    }\n    \n    try {\n        return retryOperation(writeOperation, 3, 1000); // 3 attempts, 1 second delay\n    } catch (error) {\n        HMIRuntime.Trace(\"Failed to write \" + tagName + \" after all retries\");\n        return false;\n    }\n}\n\n// Example: Retry screen navigation\nfunction navigateWithRetry(screenName) {\n    function navigationOperation() {\n        HMIRuntime.Screens.Show(screenName);\n        return true;\n    }\n    \n    try {\n        return retryOperation(navigationOperation, 2, 500); // 2 attempts, 0.5 second delay\n    } catch (error) {\n        HMIRuntime.Trace(\"Failed to navigate to \" + screenName + \" after all retries\");\n        return false;\n    }\n}\n\n// Usage examples\nvar writeSuccess = writeTagWithRetry(\"MOTOR_001_Setpoint\", 1500);\nif (writeSuccess) {\n    HMIRuntime.Trace(\"Motor setpoint updated successfully\");\n} else {\n    HMIRuntime.Trace(\"Failed to update motor setpoint after retries\");\n}\n\nvar navSuccess = navigateWithRetry(\"AlarmView\");\nif (!navSuccess) {\n    HMIRuntime.Trace(\"Navigation failed - user will need to navigate manually\");\n}"
  },
  {
    "id": "object-creation",
    "title": "Object Creation and Access",
    "category": "JavaScript Basics",
    "description": "Create equipment configuration objects for data management.",
    "isCustom": false,
    "code": "// Object Creation and Access - Siemens WinCC Unified\n// Create motor configuration object\nvar motor1 = {\n    name: \"Motor 1\",\n    tagPrefix: \"MOTOR_001\",\n    maxSpeed: 1800,\n    minSpeed: 100,\n    normalSpeed: 1450,\n    location: \"Building A - Line 1\",\n    isRunning: false\n};\n\n// Access object properties\nHMIRuntime.Trace(\"Motor name: \" + motor1.name);\nHMIRuntime.Trace(\"Location: \" + motor1.location);\nHMIRuntime.Trace(\"Max speed: \" + motor1.maxSpeed + \" RPM\");\n\n// Update object properties\nmotor1.isRunning = true;\nmotor1.currentSpeed = 1450;\nHMIRuntime.Trace(\"Motor status updated - Running: \" + motor1.isRunning);\n\n// Create alarm configuration object\nvar tempAlarm = {\n    id: \"TEMP_HIGH_001\",\n    description: \"High temperature in Tank 1\",\n    setpoint: 85.0,\n    hysteresis: 2.0,\n    priority: \"HIGH\",\n    isActive: false,\n    acknowledgeRequired: true\n};\n\n// Create recipe object\nvar recipe1 = {\n    name: \"Standard Mix\",\n    version: \"1.2\",\n    parameters: {\n        temperature: 75.0,\n        pressure: 2.5,\n        mixTime: 300,\n        speed: 120\n    },\n    createdBy: \"Operator\",\n    createdDate: \"2024-12-27\"\n};\n\n// Access nested properties\nHMIRuntime.Trace(\"Recipe: \" + recipe1.name);\nHMIRuntime.Trace(\"Temperature: \" + recipe1.parameters.temperature + \"°C\");\nHMIRuntime.Trace(\"Mix time: \" + recipe1.parameters.mixTime + \" seconds\");\n\n// Modify nested properties\nrecipe1.parameters.temperature = 80.0;\nHMIRuntime.Trace(\"Updated temperature: \" + recipe1.parameters.temperature + \"°C\");"
  },
  {
    "id": "object-properties",
    "title": "Property Checking and Validation",
    "category": "JavaScript Basics",
    "description": "Safely check if object properties exist before using them.",
    "isCustom": false,
    "code": "// Property Checking - Siemens WinCC Unified\n// Equipment configuration with property validation\nvar equipment = {\n    name: \"Pump 1\",\n    type: \"Centrifugal\",\n    maxFlow: 500,\n    location: \"Building B\"\n};\n\n// Check if property exists before using\nif (equipment.hasOwnProperty(\"maxFlow\")) {\n    HMIRuntime.Trace(\"Max flow rate: \" + equipment.maxFlow + \" L/min\");\n} else {\n    HMIRuntime.Trace(\"Max flow rate not configured\");\n}\n\n// Safe property access function\nfunction getPropertySafely(obj, propertyName, defaultValue) {\n    if (obj.hasOwnProperty(propertyName)) {\n        return obj[propertyName];\n    } else {\n        HMIRuntime.Trace(\"Property '\" + propertyName + \"' not found, using default: \" + defaultValue);\n        return defaultValue;\n    }\n}\n\n// Usage examples\nvar motorSpeed = getPropertySafely(equipment, \"speed\", 0);\nvar equipmentType = getPropertySafely(equipment, \"type\", \"Unknown\");\nvar maintenanceDate = getPropertySafely(equipment, \"lastMaintenance\", \"Never\");\n\nHMIRuntime.Trace(\"Motor speed: \" + motorSpeed);\nHMIRuntime.Trace(\"Equipment type: \" + equipmentType);\nHMIRuntime.Trace(\"Last maintenance: \" + maintenanceDate);\n\n// Validate configuration completeness\nvar requiredProperties = [\"name\", \"type\", \"location\"];\nvar isValid = true;\n\nfor (var i = 0; i < requiredProperties.length; i++) {\n    var property = requiredProperties[i];\n    if (!equipment.hasOwnProperty(property)) {\n        HMIRuntime.Trace(\"ERROR: Missing required property: \" + property);\n        isValid = false;\n    }\n}\n\nif (isValid) {\n    HMIRuntime.Trace(\"Equipment configuration is valid\");\n} else {\n    HMIRuntime.Trace(\"Equipment configuration is incomplete\");\n}\n\n// Check for undefined or null values\nif (equipment.name && equipment.name !== \"\") {\n    HMIRuntime.Trace(\"Valid equipment name: \" + equipment.name);\n} else {\n    HMIRuntime.Trace(\"Equipment name is empty or invalid\");\n}"
  },
  {
    "id": "object-iteration",
    "title": "Object Property Iteration",
    "category": "JavaScript Basics",
    "description": "Loop through object properties for configuration processing.",
    "isCustom": false,
    "code": "// Object Iteration - Siemens WinCC Unified\n// Equipment configuration object\nvar equipmentConfig = {\n    name: \"Conveyor System 1\",\n    speed: 120,\n    length: 50,\n    width: 2.5,\n    location: \"Production Line A\",\n    status: \"Running\",\n    lastMaintenance: \"2024-11-15\"\n};\n\n// Iterate through all properties\nHMIRuntime.Trace(\"Equipment Configuration:\");\nfor (var property in equipmentConfig) {\n    var value = equipmentConfig[property];\n    HMIRuntime.Trace(\"  \" + property + \": \" + value);\n}\n\n// Process specific types of properties\nvar numericProperties = [];\nvar stringProperties = [];\n\nfor (var property in equipmentConfig) {\n    var value = equipmentConfig[property];\n    if (typeof value === \"number\") {\n        numericProperties.push(property + \": \" + value);\n    } else if (typeof value === \"string\") {\n        stringProperties.push(property + \": \" + value);\n    }\n}\n\nHMIRuntime.Trace(\"Numeric properties: \" + numericProperties.join(\", \"));\nHMIRuntime.Trace(\"String properties: \" + stringProperties.join(\", \"));\n\n// Create summary report\nvar alarmSettings = {\n    tempHigh: 85.0,\n    tempLow: 15.0,\n    pressureHigh: 10.0,\n    pressureLow: 0.5,\n    flowLow: 50.0\n};\n\nvar alarmReport = \"Alarm Settings Report:\\n\";\nfor (var alarmType in alarmSettings) {\n    var limit = alarmSettings[alarmType];\n    alarmReport = alarmReport + \"- \" + alarmType + \": \" + limit + \"\\n\";\n}\nHMIRuntime.Trace(alarmReport);\n\n// Count properties\nvar propertyCount = 0;\nfor (var property in equipmentConfig) {\n    propertyCount = propertyCount + 1;\n}\nHMIRuntime.Trace(\"Total configuration properties: \" + propertyCount);\n\n// Find properties containing specific text\nvar locationProperties = [];\nfor (var property in equipmentConfig) {\n    if (property.toLowerCase().indexOf(\"location\") !== -1 || property.toLowerCase().indexOf(\"name\") !== -1) {\n        locationProperties.push(property + \": \" + equipmentConfig[property]);\n    }\n}\nHMIRuntime.Trace(\"Location-related properties: \" + locationProperties.join(\", \"));"
  },
  {
    "id": "screen-find-object",
    "title": "Find Screen Objects",
    "category": "Screen Object Manipulation",
    "description": "Use Screen.FindItem() to find and access screen objects.",
    "isCustom": false,
    "code": "// Find Screen Objects - Siemens WinCC Unified\n// Basic object finding\nvar rectangle = Screen.FindItem('Rectangle1');\nif (rectangle) {\n    HMIRuntime.Trace(\"Found rectangle object: \" + rectangle.Name);\n} else {\n    HMIRuntime.Trace(\"Rectangle1 not found on screen\");\n}\n\n// Find multiple objects by pattern\nvar objectNames = ['Motor1_Status', 'Motor2_Status', 'Motor3_Status'];\nfor (var i = 0; i < objectNames.length; i++) {\n    var obj = Screen.FindItem(objectNames[i]);\n    if (obj) {\n        HMIRuntime.Trace(\"Found object: \" + obj.Name);\n    } else {\n        HMIRuntime.Trace(\"Object not found: \" + objectNames[i]);\n    }\n}\n\n// Safe object finding function\nfunction findObjectSafely(objectName) {\n    try {\n        var obj = Screen.FindItem(objectName);\n        if (obj) {\n            return obj;\n        } else {\n            HMIRuntime.Trace(\"Object '\" + objectName + \"' not found\");\n            return null;\n        }\n    } catch (error) {\n        HMIRuntime.Trace(\"Error finding object '\" + objectName + \"': \" + error.message);\n        return null;\n    }\n}"
  },
  {
    "id": "screen-change-colors",
    "title": "Change Object Colors",
    "category": "Screen Object Manipulation",
    "description": "Change BackColor and ForeColor of screen objects dynamically.",
    "isCustom": false,
    "code": "// Change Object Colors - Siemens WinCC Unified\n// Change background color (your example from documentation)\nScreen.FindItem('Rectangle1').BackColor = 0xFFFFFF00; // Yellow\nHMIRuntime.Trace(\"Rectangle1 background changed to yellow\");\n\n// Change multiple colors based on equipment status\nvar motorStatus = Tags(\"MOTOR_001_Status\").Read();\nvar statusLight = Screen.FindItem('StatusLight1');\n\nif (statusLight) {\n    if (motorStatus === \"RUNNING\") {\n        statusLight.BackColor = 0xFF00FF00; // Green\n        HMIRuntime.Trace(\"Status light set to green - motor running\");\n    } else if (motorStatus === \"FAULT\") {\n        statusLight.BackColor = 0xFFFF0000; // Red\n        HMIRuntime.Trace(\"Status light set to red - motor fault\");\n    } else {\n        statusLight.BackColor = 0xFFFFFF00; // Yellow\n        HMIRuntime.Trace(\"Status light set to yellow - motor stopped\");\n    }\n}\n\n// Change text color\nvar textField = Screen.FindItem('TemperatureText');\nif (textField) {\n    var temperature = Tags(\"TEMP_SENSOR_1\").Read();\n    if (temperature > 85) {\n        textField.ForeColor = 0xFFFF0000; // Red text for high temp\n    } else if (temperature < 15) {\n        textField.ForeColor = 0xFF0000FF; // Blue text for low temp\n    } else {\n        textField.ForeColor = 0xFF000000; // Black text for normal\n    }\n    HMIRuntime.Trace(\"Temperature text color updated based on value: \" + temperature);\n}\n\n// Color multiple objects at once\nvar alarmObjects = ['AlarmIcon1', 'AlarmIcon2', 'AlarmIcon3'];\nvar alarmActive = Tags(\"SYSTEM_ALARM_ACTIVE\").Read();\nvar alarmColor = alarmActive ? 0xFFFF0000 : 0xFF808080; // Red if active, gray if not\n\nfor (var i = 0; i < alarmObjects.length; i++) {\n    var alarmIcon = Screen.FindItem(alarmObjects[i]);\n    if (alarmIcon) {\n        alarmIcon.BackColor = alarmColor;\n    }\n}\nHMIRuntime.Trace(\"Alarm icons updated - Active: \" + alarmActive);"
  },
  {
    "id": "screen-show-hide",
    "title": "Show and Hide Objects",
    "category": "Screen Object Manipulation",
    "description": "Control object visibility based on conditions.",
    "isCustom": false,
    "code": "// Show and Hide Objects - Siemens WinCC Unified\n// Hide object when not needed\nvar maintenancePanel = Screen.FindItem('MaintenancePanel');\nvar isMaintenanceMode = Tags(\"MAINTENANCE_MODE\").Read();\n\nif (maintenancePanel) {\n    maintenancePanel.Visible = isMaintenanceMode;\n    HMIRuntime.Trace(\"Maintenance panel visible: \" + isMaintenanceMode);\n}\n\n// Show alarm details only when alarm is active\nvar alarmDetails = Screen.FindItem('AlarmDetails');\nvar alarmActive = Tags(\"SYSTEM_ALARM_ACTIVE\").Read();\n\nif (alarmDetails) {\n    alarmDetails.Visible = alarmActive;\n    if (alarmActive) {\n        HMIRuntime.Trace(\"Alarm details shown - system alarm active\");\n    } else {\n        HMIRuntime.Trace(\"Alarm details hidden - no active alarms\");\n    }\n}\n\n// Show/hide equipment based on selection\nvar selectedEquipment = Tags(\"SELECTED_EQUIPMENT\").Read();\nvar equipmentPanels = ['MotorPanel', 'PumpPanel', 'ValvePanel'];\n\nfor (var i = 0; i < equipmentPanels.length; i++) {\n    var panel = Screen.FindItem(equipmentPanels[i]);\n    if (panel) {\n        // Show only the selected equipment panel\n        panel.Visible = (equipmentPanels[i] === selectedEquipment + \"Panel\");\n        HMIRuntime.Trace(equipmentPanels[i] + \" visible: \" + panel.Visible);\n    }\n}\n\n// Toggle object visibility\nfunction toggleObjectVisibility(objectName) {\n    var obj = Screen.FindItem(objectName);\n    if (obj) {\n        obj.Visible = !obj.Visible;\n        HMIRuntime.Trace(objectName + \" visibility toggled to: \" + obj.Visible);\n        return obj.Visible;\n    }\n    return false;\n}\n\n// Example usage\ntoggleObjectVisibility('AdvancedControls');"
  },
  {
    "id": "screen-text-content",
    "title": "Change Text Content",
    "category": "Screen Object Manipulation",
    "description": "Update text content of labels and text fields dynamically.",
    "isCustom": false,
    "code": "// Change Text Content - Siemens WinCC Unified\n// Update status text based on equipment state\nvar statusLabel = Screen.FindItem('StatusLabel');\nvar motorStatus = Tags(\"MOTOR_001_Status\").Read();\n\nif (statusLabel) {\n    statusLabel.Text = \"Motor Status: \" + motorStatus;\n    HMIRuntime.Trace(\"Status label updated: \" + statusLabel.Text);\n}\n\n// Update temperature display\nvar tempDisplay = Screen.FindItem('TemperatureDisplay');\nvar temperature = Tags(\"TEMP_SENSOR_1\").Read();\n\nif (tempDisplay) {\n    tempDisplay.Text = temperature.toFixed(1) + \"°C\";\n    HMIRuntime.Trace(\"Temperature display updated: \" + tempDisplay.Text);\n}\n\n// Build comprehensive status message\nvar statusMessage = Screen.FindItem('SystemStatusMessage');\nif (statusMessage) {\n    var motorRunning = Tags(\"MOTOR_001_Running\").Read();\n    var pumpRunning = Tags(\"PUMP_001_Running\").Read();\n    var temperature = Tags(\"TEMP_SENSOR_1\").Read();\n    var pressure = Tags(\"PRESSURE_SENSOR_1\").Read();\n    \n    var message = \"System Status:\\n\";\n    message += \"Motor: \" + (motorRunning ? \"RUNNING\" : \"STOPPED\") + \"\\n\";\n    message += \"Pump: \" + (pumpRunning ? \"RUNNING\" : \"STOPPED\") + \"\\n\";\n    message += \"Temperature: \" + temperature.toFixed(1) + \"°C\\n\";\n    message += \"Pressure: \" + pressure.toFixed(1) + \" bar\";\n    \n    statusMessage.Text = message;\n    HMIRuntime.Trace(\"System status message updated\");\n}\n\n// Update multiple text fields with current values\nvar textFields = [\n    {name: 'Speed1Display', tag: 'MOTOR_001_Speed', unit: ' RPM'},\n    {name: 'Speed2Display', tag: 'MOTOR_002_Speed', unit: ' RPM'},\n    {name: 'FlowDisplay', tag: 'FLOW_SENSOR_1', unit: ' L/min'}\n];\n\nfor (var i = 0; i < textFields.length; i++) {\n    var field = textFields[i];\n    var textObj = Screen.FindItem(field.name);\n    if (textObj) {\n        var value = Tags(field.tag).Read();\n        textObj.Text = value.toFixed(1) + field.unit;\n        HMIRuntime.Trace(field.name + \" updated: \" + textObj.Text);\n    }\n}"
  },
  {
    "id": "screen-object-properties",
    "title": "Access Object Properties",
    "category": "Screen Object Manipulation",
    "description": "Read and modify various object properties dynamically.",
    "isCustom": false,
    "code": "// Access Object Properties - Siemens WinCC Unified\n// Get object information\nvar button = Screen.FindItem('StartButton');\nif (button) {\n    HMIRuntime.Trace(\"Button name: \" + button.Name);\n    HMIRuntime.Trace(\"Button enabled: \" + button.Enabled);\n    HMIRuntime.Trace(\"Button visible: \" + button.Visible);\n    HMIRuntime.Trace(\"Button text: \" + button.Text);\n}\n\n// Enable/disable objects based on conditions\nvar systemEnabled = Tags(\"SYSTEM_ENABLED\").Read();\nvar controlButtons = ['StartButton', 'StopButton', 'ResetButton'];\n\nfor (var i = 0; i < controlButtons.length; i++) {\n    var btn = Screen.FindItem(controlButtons[i]);\n    if (btn) {\n        btn.Enabled = systemEnabled;\n        HMIRuntime.Trace(controlButtons[i] + \" enabled: \" + systemEnabled);\n    }\n}\n\n// Change object position (if supported)\nvar movableObject = Screen.FindItem('FloatingPanel');\nif (movableObject) {\n    // Example: Move object based on some condition\n    var newPosition = Tags(\"PANEL_POSITION\").Read();\n    if (newPosition === \"TOP\") {\n        movableObject.Top = 50;\n        movableObject.Left = 100;\n    } else {\n        movableObject.Top = 300;\n        movableObject.Left = 100;\n    }\n    HMIRuntime.Trace(\"Panel moved to position: \" + newPosition);\n}\n\n// Read current object values (for input fields)\nvar setpointInput = Screen.FindItem('SetpointInput');\nif (setpointInput) {\n    var currentValue = setpointInput.Text;\n    HMIRuntime.Trace(\"Current setpoint input: \" + currentValue);\n    \n    // Validate and update if needed\n    var numericValue = parseFloat(currentValue);\n    if (!isNaN(numericValue)) {\n        if (numericValue < 0) {\n            setpointInput.Text = \"0\";\n            HMIRuntime.Trace(\"Setpoint corrected to minimum value\");\n        } else if (numericValue > 100) {\n            setpointInput.Text = \"100\";\n            HMIRuntime.Trace(\"Setpoint corrected to maximum value\");\n        }\n    }\n}\n\n// Copy property name tip (as mentioned in documentation)\nHMIRuntime.Trace(\"TIP: Right-click any property and select 'Copy property name' to get the exact property name for your code\");"
  },
  {
    "id": "screen-advanced-manipulation",
    "title": "Advanced Object Manipulation",
    "category": "Screen Object Manipulation",
    "description": "Advanced techniques for working with screen objects.",
    "isCustom": false,
    "code": "// Advanced Object Manipulation - Siemens WinCC Unified\n// Batch update objects with same prefix\nfunction updateMotorObjects(motorNumber, status, speed) {\n    var prefix = \"Motor\" + motorNumber + \"_\";\n    var objects = [prefix + \"Status\", prefix + \"Speed\", prefix + \"Icon\"];\n    \n    for (var i = 0; i < objects.length; i++) {\n        var obj = Screen.FindItem(objects[i]);\n        if (obj) {\n            if (objects[i].indexOf(\"Status\") !== -1) {\n                obj.Text = status;\n            } else if (objects[i].indexOf(\"Speed\") !== -1) {\n                obj.Text = speed + \" RPM\";\n            } else if (objects[i].indexOf(\"Icon\") !== -1) {\n                obj.BackColor = (status === \"RUNNING\") ? 0xFF00FF00 : 0xFFFF0000;\n            }\n            HMIRuntime.Trace(\"Updated \" + objects[i]);\n        }\n    }\n}\n\n// Usage example\nupdateMotorObjects(1, \"RUNNING\", 1450);\nupdateMotorObjects(2, \"STOPPED\", 0);\n\n// Create object state management\nvar objectStates = {\n    alarmState: {\n        objects: ['AlarmIcon', 'AlarmText', 'AlarmPanel'],\n        active: {\n            visible: true,\n            color: 0xFFFF0000,\n            text: \"ALARM ACTIVE\"\n        },\n        inactive: {\n            visible: false,\n            color: 0xFF808080,\n            text: \"SYSTEM OK\"\n        }\n    }\n};\n\nfunction updateObjectGroup(groupName, isActive) {\n    var group = objectStates[groupName];\n    if (!group) return;\n    \n    var state = isActive ? group.active : group.inactive;\n    \n    for (var i = 0; i < group.objects.length; i++) {\n        var obj = Screen.FindItem(group.objects[i]);\n        if (obj) {\n            obj.Visible = state.visible;\n            obj.BackColor = state.color;\n            if (obj.Text !== undefined) {\n                obj.Text = state.text;\n            }\n            HMIRuntime.Trace(\"Updated \" + group.objects[i] + \" for state: \" + (isActive ? \"active\" : \"inactive\"));\n        }\n    }\n}\n\n// Usage example\nvar alarmActive = Tags(\"SYSTEM_ALARM_ACTIVE\").Read();\nupdateObjectGroup(\"alarmState\", alarmActive);\n\n// Object animation/blinking effect\nvar blinkingObjects = ['CriticalAlarm', 'UrgentWarning'];\nvar blinkState = Tags(\"BLINK_STATE\").Read(); // Toggle this tag every second\n\nfor (var i = 0; i < blinkingObjects.length; i++) {\n    var obj = Screen.FindItem(blinkingObjects[i]);\n    if (obj) {\n        obj.Visible = blinkState;\n        HMIRuntime.Trace(blinkingObjects[i] + \" blink state: \" + blinkState);\n    }\n}"
  },
  {
    "id": "filesystem-create-directory",
    "title": "Create Directory",
    "category": "File System Operations",
    "description": "Create directories and subdirectories with HMIRuntime.FileSystem.",
    "isCustom": false,
    "code": "// Create Directory - Siemens WinCC Unified\n// Create directory on Windows PC\nHMIRuntime.FileSystem.CreateDirectory(\"C:\\\\Users\\\\Public\\\\mydatadir\\\\mysubdir\").then(\n    function() {\n        HMIRuntime.Trace(\"Directory successfully created\");\n    }\n).catch(function(error) {\n    HMIRuntime.Trace(\"Error creating directory: \" + error.message);\n});\n\n// Create directory on Unified Comfort Panel (Linux)\nHMIRuntime.FileSystem.CreateDirectory(\"/home/industrial/mydatadir/mysubdir\").then(\n    function() {\n        HMIRuntime.Trace(\"Directory successfully created on Panel\");\n    }\n);\n\n// Create directory for production logs\nvar logDate = new Date();\nvar logPath = \"C:\\\\ProductionLogs\\\\\" + logDate.getFullYear() + \"\\\\\" + (logDate.getMonth() + 1);\nHMIRuntime.FileSystem.CreateDirectory(logPath).then(\n    function() {\n        HMIRuntime.Trace(\"Production log directory created: \" + logPath);\n    }\n);"
  },
  {
    "id": "filesystem-write-file",
    "title": "Write File",
    "category": "File System Operations",
    "description": "Write data to files for logging and data storage.",
    "isCustom": false,
    "code": "// Write File - Siemens WinCC Unified\n// Write production data to file\nvar productionData = \"Motor Speed: \" + Tags(\"MOTOR_001_Speed\").Read() + \" RPM\\n\";\nproductionData += \"Temperature: \" + Tags(\"TEMP_SENSOR_1\").Read() + \"°C\\n\";\nproductionData += \"Timestamp: \" + new Date().toISOString() + \"\\n\";\n\nHMIRuntime.FileSystem.WriteFile(\"C:\\\\Users\\\\Public\\\\production_log.txt\", productionData, \"utf8\").then(\n    function() {\n        HMIRuntime.Trace(\"Production data written successfully\");\n    }\n).catch(function(errorCode) {\n    HMIRuntime.Trace(\"Write failed errorcode=\" + errorCode);\n});\n\n// Write alarm log\nvar alarmData = \"ALARM: High temperature detected at \" + new Date().toLocaleString();\nHMIRuntime.FileSystem.WriteFile(\"C:\\\\Users\\\\Public\\\\alarm_log.txt\", alarmData, \"utf8\").then(\n    function() {\n        HMIRuntime.Trace(\"Alarm logged to file\");\n    }\n);\n\n// Write recipe data in JSON format\nvar recipeData = {\n    name: \"Recipe A\",\n    temperature: 75.0,\n    pressure: 2.5,\n    mixTime: 300\n};\nHMIRuntime.FileSystem.WriteFile(\"C:\\\\Recipes\\\\recipe_a.json\", JSON.stringify(recipeData, null, 2), \"utf8\").then(\n    function() {\n        HMIRuntime.Trace(\"Recipe saved to file\");\n    }\n);"
  },
  {
    "id": "filesystem-read-file",
    "title": "Read File",
    "category": "File System Operations",
    "description": "Read data from files for configuration and data retrieval.",
    "isCustom": false,
    "code": "// Read File - Siemens WinCC Unified\n// Read production log file\nHMIRuntime.FileSystem.ReadFile(\"C:\\\\Users\\\\Public\\\\production_log.txt\", \"utf8\").then(\n    function(text) {\n        HMIRuntime.Trace(\"Production log content: \" + text);\n        // Display in text field\n        Screen.Items('LogDisplay').Text = text;\n    }\n).catch(function(error) {\n    HMIRuntime.Trace(\"Error reading file: \" + error.message);\n});\n\n// Read configuration file\nHMIRuntime.FileSystem.ReadFile(\"C:\\\\Config\\\\motor_settings.txt\", \"utf8\").then(\n    function(configData) {\n        var lines = configData.split(\"\\n\");\n        for (var i = 0; i < lines.length; i++) {\n            if (lines[i].indexOf(\"MaxSpeed=\") !== -1) {\n                var maxSpeed = lines[i].split(\"=\")[1];\n                HMIRuntime.Trace(\"Max speed from config: \" + maxSpeed);\n                Tags(\"MOTOR_MAX_SPEED\").Write(parseFloat(maxSpeed));\n            }\n        }\n    }\n);\n\n// Read recipe file and parse JSON\nHMIRuntime.FileSystem.ReadFile(\"C:\\\\Recipes\\\\current_recipe.json\", \"utf8\").then(\n    function(jsonText) {\n        var recipe = JSON.parse(jsonText);\n        HMIRuntime.Trace(\"Recipe loaded: \" + recipe.name);\n        Tags(\"RECIPE_TEMP\").Write(recipe.temperature);\n        Tags(\"RECIPE_PRESSURE\").Write(recipe.pressure);\n        Tags(\"RECIPE_TIME\").Write(recipe.mixTime);\n    }\n);"
  },
  {
    "id": "filesystem-append-file",
    "title": "Append to File",
    "category": "File System Operations",
    "description": "Append data to existing files for continuous logging.",
    "isCustom": false,
    "code": "// Append to File - Siemens WinCC Unified\n// Append production data to log\nvar timestamp = new Date().toISOString();\nvar motorSpeed = Tags(\"MOTOR_001_Speed\").Read();\nvar temperature = Tags(\"TEMP_SENSOR_1\").Read();\nvar logEntry = timestamp + \",\" + motorSpeed + \",\" + temperature + \"\\n\";\n\nHMIRuntime.FileSystem.AppendFile(\"C:\\\\Users\\\\Public\\\\production_log.csv\", logEntry, \"utf8\").then(\n    function() {\n        HMIRuntime.Trace(\"Production data appended to log\");\n    }\n).catch(function(error) {\n    HMIRuntime.Trace(\"Error appending to file: \" + error.message);\n});\n\n// Append alarm to alarm log\nfunction logAlarm(alarmType, location, severity) {\n    var alarmEntry = new Date().toLocaleString() + \" - \" + severity + \" ALARM: \" + alarmType + \" in \" + location + \"\\n\";\n    \n    HMIRuntime.FileSystem.AppendFile(\"C:\\\\Logs\\\\alarm_history.txt\", alarmEntry, \"utf8\").then(\n        function() {\n            HMIRuntime.Trace(\"Alarm logged: \" + alarmType);\n        }\n    );\n}\n\n// Usage examples\nlogAlarm(\"High Temperature\", \"Tank 1\", \"CRITICAL\");\nlogAlarm(\"Low Pressure\", \"Pump 2\", \"WARNING\");\n\n// Append event log with tag value\nvar eventMessage = \"System started at \" + new Date().toLocaleString() + \" - Initial temp: \" + Tags(\"STARTUP_TEMP\").Read() + \"°C\\n\";\nHMIRuntime.FileSystem.AppendFile(\"C:\\\\Logs\\\\system_events.txt\", eventMessage, \"utf8\").then(\n    function() {\n        HMIRuntime.Trace(\"System event logged\");\n    }\n);"
  },
  {
    "id": "timers-setinterval",
    "title": "Set Timer Interval",
    "category": "Timer Functions",
    "description": "Create repeating timers for periodic operations.",
    "isCustom": false,
    "code": "// Timer SetInterval - Siemens WinCC Unified\n// Global timer variable (add to global definition area)\nvar timerId;\n\n// Example 1: Move object while button pressed\n// Add to button 'Press' event:\ntimerId = HMIRuntime.Timers.SetInterval(function() {\n    Screen.Items('Rectangle_1').Left += 5;\n    HMIRuntime.Trace(\"Object moved to position: \" + Screen.Items('Rectangle_1').Left);\n}, 100); // Every 100ms\n\n// Add to button 'Release' event:\nHMIRuntime.Timers.ClearInterval(timerId);\n\n// Example 2: Periodic data logging\nvar dataLogTimer = HMIRuntime.Timers.SetInterval(function() {\n    var temperature = Tags(\"TEMP_SENSOR_1\").Read();\n    var pressure = Tags(\"PRESSURE_SENSOR_1\").Read();\n    var logEntry = new Date().toISOString() + \",\" + temperature + \",\" + pressure + \"\\n\";\n    \n    HMIRuntime.FileSystem.AppendFile(\"C:\\\\Logs\\\\sensor_data.csv\", logEntry, \"utf8\");\n    HMIRuntime.Trace(\"Data logged - Temp: \" + temperature + \"°C, Pressure: \" + pressure + \" bar\");\n}, 60000); // Every minute\n\n// Example 3: Blink alarm indicator\nvar blinkTimer;\nvar isVisible = true;\n\nfunction startAlarmBlink() {\n    blinkTimer = HMIRuntime.Timers.SetInterval(function() {\n        isVisible = !isVisible;\n        Screen.Items('AlarmIcon').Visible = isVisible;\n    }, 500); // Blink every 500ms\n}\n\nfunction stopAlarmBlink() {\n    HMIRuntime.Timers.ClearInterval(blinkTimer);\n    Screen.Items('AlarmIcon').Visible = true; // Ensure visible when stopped\n}\n\n// Start/stop based on alarm state\nvar alarmActive = Tags(\"SYSTEM_ALARM\").Read();\nif (alarmActive) {\n    startAlarmBlink();\n} else {\n    stopAlarmBlink();\n}"
  },
  {
    "id": "timers-settimeout",
    "title": "Set Timer Timeout",
    "category": "Timer Functions",
    "description": "Create one-time delays for timed operations.",
    "isCustom": false,
    "code": "// Timer SetTimeout - Siemens WinCC Unified\n// Example 1: Delayed motor start sequence\nHMIRuntime.Trace(\"Starting motor sequence...\");\n\n// Step 1: Turn on cooling fan\nTags(\"COOLING_FAN\").Write(true);\nHMIRuntime.Trace(\"Cooling fan started\");\n\n// Step 2: Wait 3 seconds, then start motor\nHMIRuntime.Timers.SetTimeout(function() {\n    Tags(\"MOTOR_START\").Write(true);\n    HMIRuntime.Trace(\"Motor started after cooling delay\");\n}, 3000);\n\n// Step 3: Wait 10 seconds, then check motor status\nHMIRuntime.Timers.SetTimeout(function() {\n    var motorRunning = Tags(\"MOTOR_RUNNING\").Read();\n    if (motorRunning) {\n        HMIRuntime.Trace(\"Motor startup sequence completed successfully\");\n    } else {\n        HMIRuntime.Trace(\"ERROR: Motor failed to start within timeout period\");\n        Tags(\"MOTOR_FAULT_ALARM\").Write(true);\n    }\n}, 10000);\n\n// Example 2: Automatic screen timeout\nvar screenTimeoutId;\n\nfunction resetScreenTimeout() {\n    // Clear existing timeout\n    if (screenTimeoutId) {\n        HMIRuntime.Timers.ClearTimeout(screenTimeoutId);\n    }\n    \n    // Set new timeout for 5 minutes\n    screenTimeoutId = HMIRuntime.Timers.SetTimeout(function() {\n        HMIRuntime.Trace(\"Screen timeout - returning to main view\");\n        HMIRuntime.Screens.Show(\"MainOverview\");\n    }, 300000); // 5 minutes\n}\n\n// Call resetScreenTimeout() on user interaction\nresetScreenTimeout();\n\n// Example 3: Delayed alarm acknowledgment\nfunction acknowledgeAlarmWithDelay(alarmId, delaySeconds) {\n    HMIRuntime.Trace(\"Alarm acknowledgment scheduled in \" + delaySeconds + \" seconds\");\n    \n    HMIRuntime.Timers.SetTimeout(function() {\n        Tags(alarmId + \"_ACK\").Write(true);\n        HMIRuntime.Trace(\"Alarm \" + alarmId + \" automatically acknowledged\");\n    }, delaySeconds * 1000);\n}\n\n// Usage\nacknowledgeAlarmWithDelay(\"TEMP_HIGH_001\", 30); // Auto-ack after 30 seconds"
  },
  {
    "id": "alarm-subscription",
    "title": "Alarm Subscription and Filtering",
    "category": "Alarm Management",
    "description": "Subscribe to and filter alarms with HMIRuntime.Alarming.",
    "isCustom": false,
    "code": "// Alarm Subscription - Siemens WinCC Unified\n// Create alarm subscription with filtering\nvar alarmSubscription = HMIRuntime.Alarming.CreateSubscription();\n\n// Filter for Warning class alarms only\nalarmSubscription.Filter = 'AlarmClassName=\"Warning\"';\nalarmSubscription.Language = 1033; // English\n\n// Handle incoming alarms\nalarmSubscription.OnAlarm = function(ErrorCode, SystemNames, ResultSet) {\n    if (ErrorCode === 0) {\n        HMIRuntime.Trace(\"Received \" + ResultSet.length + \" warning alarms\");\n        \n        for (var index = 0; index < ResultSet.length; index++) {\n            var alarm = ResultSet[index];\n            HMIRuntime.Trace(\"Alarm \" + (index + 1) + \": \" + alarm.Name);\n            HMIRuntime.Trace(\"State: \" + alarm.State);\n            HMIRuntime.Trace(\"Message: \" + alarm.MessageText);\n            \n            // Update alarm display\n            Screen.Items('AlarmList').Text += alarm.Name + \" - \" + alarm.State + \"\\n\";\n        }\n    } else {\n        HMIRuntime.Trace(\"Alarm subscription error: \" + ErrorCode);\n    }\n};\n\n// Start the subscription\nalarmSubscription.Start();\nHMIRuntime.Trace(\"Alarm subscription started for Warning class\");\n\n// Example 2: Critical alarms subscription\nvar criticalAlarms = HMIRuntime.Alarming.CreateSubscription();\ncriticalAlarms.Filter = 'AlarmClassName=\"Critical\"';\ncriticalAlarms.Language = 1033;\n\ncriticalAlarms.OnAlarm = function(ErrorCode, SystemNames, ResultSet) {\n    if (ErrorCode === 0 && ResultSet.length > 0) {\n        // Flash critical alarm indicator\n        Screen.Items('CriticalAlarmIcon').BackColor = 0xFFFF0000; // Red\n        Screen.Items('CriticalAlarmIcon').Visible = true;\n        \n        // Count critical alarms\n        var criticalCount = 0;\n        for (var i = 0; i < ResultSet.length; i++) {\n            if (ResultSet[i].State === \"Active\") {\n                criticalCount++;\n            }\n        }\n        \n        Screen.Items('CriticalAlarmCount').Text = criticalCount.toString();\n        Tags(\"CRITICAL_ALARM_COUNT\").Write(criticalCount);\n        \n        HMIRuntime.Trace(\"Critical alarms active: \" + criticalCount);\n    }\n};\n\ncriticalAlarms.Start();\n\n// Function to stop subscriptions\nfunction stopAlarmSubscriptions() {\n    alarmSubscription.Stop();\n    criticalAlarms.Stop();\n    HMIRuntime.Trace(\"All alarm subscriptions stopped\");\n}"
  },
  {
    "id": "language-management",
    "title": "Runtime Language Management",
    "category": "Language Operations",
    "description": "Switch runtime language using HMIRuntime.Language functions.",
    "isCustom": false,
    "code": "// Language Management - Siemens WinCC Unified\n// Set specific language by ID\nfunction setLanguage(languageId, languageName) {\n    try {\n        HMIRuntime.Language.SetLanguage(languageId);\n        HMIRuntime.Trace(\"Language changed to: \" + languageName + \" (ID: \" + languageId + \")\");\n        return true;\n    } catch (error) {\n        HMIRuntime.Trace(\"Error changing language: \" + error.message);\n        return false;\n    }\n}\n\n// Common language switches\nfunction setGerman() {\n    setLanguage(1031, \"German\");  // de_DE\n}\n\nfunction setEnglish() {\n    setLanguage(1033, \"English\"); // en_US\n}\n\nfunction setFrench() {\n    setLanguage(1036, \"French\");  // fr_FR\n}\n\nfunction setSpanish() {\n    setLanguage(1034, \"Spanish\"); // es_ES\n}\n\nfunction setChinese() {\n    setLanguage(2052, \"Chinese\"); // zh_CN\n}\n\n// Toggle between configured languages\nfunction toggleLanguage() {\n    try {\n        HMIRuntime.Language.ToggleLanguage();\n        HMIRuntime.Trace(\"Language toggled to next configured language\");\n    } catch (error) {\n        HMIRuntime.Trace(\"Error toggling language: \" + error.message);\n    }\n}\n\n// Language selection based on operator preference\nvar operatorLanguage = Tags(\"OPERATOR_LANGUAGE\").Read();\nswitch (operatorLanguage) {\n    case \"DE\":\n        setGerman();\n        break;\n    case \"EN\":\n        setEnglish();\n        break;\n    case \"FR\":\n        setFrench();\n        break;\n    case \"ES\":\n        setSpanish();\n        break;\n    case \"CN\":\n        setChinese();\n        break;\n    default:\n        setEnglish(); // Default to English\n        HMIRuntime.Trace(\"Unknown language code, defaulting to English\");\n}\n\n// Store current language selection\nfunction saveLanguagePreference(languageCode) {\n    Tags(\"SAVED_LANGUAGE\").Write(languageCode);\n    HMIRuntime.Trace(\"Language preference saved: \" + languageCode);\n}\n\n// Language change with user confirmation\nfunction changeLanguageWithConfirm(newLanguageId, languageName) {\n    var currentLang = Tags(\"CURRENT_LANGUAGE\").Read();\n    if (currentLang !== newLanguageId) {\n        setLanguage(newLanguageId, languageName);\n        saveLanguagePreference(newLanguageId);\n        Tags(\"CURRENT_LANGUAGE\").Write(newLanguageId);\n        \n        // Update language indicator on screen\n        Screen.Items('LanguageIndicator').Text = languageName;\n    }\n}"
  },
  {
    "id": "popup-management",
    "title": "Popup Screen Management",
    "category": "Screen Management",
    "description": "Open and close popup screens with advanced options.",
    "isCustom": false,
    "code": "// Popup Management - Siemens WinCC Unified\n// Open popup screen with parameters\nfunction openMachineStatePopup() {\n    // Parameters: (PopupName, ScreenName, ToggleOpen, Template, Width, Height, IsModal, Position)\n    HMIRuntime.UI.SysFct.OpenScreenInPopup(\n        \"MachineState\",           // Popup window name\n        \"Popup_Machine_State\",   // Screen to display\n        false,                   // Don't toggle (just open)\n        \"\",                      // No template\n        400,                     // Width\n        300,                     // Height\n        false,                   // Not modal\n        undefined                // Default position\n    );\n    HMIRuntime.Trace(\"Machine state popup opened\");\n}\n\n// Open popup without frame/header\nfunction openFramelessPopup(popupName, screenName) {\n    // First open the popup\n    HMIRuntime.UI.SysFct.OpenScreenInPopup(popupName, screenName, false, \"\", 350, 250, false, undefined);\n    \n    // Remove frame and header\n    HMIRuntime.UI.SysFct.SetPropertyValue(\"/\" + popupName, \"WindowFlags\", 0);\n    HMIRuntime.Trace(\"Frameless popup opened: \" + popupName);\n}\n\n// Close specific popup\nfunction closeMachineStatePopup() {\n    HMIRuntime.UI.SysFct.ClosePopup(\"/MachineState\");\n    HMIRuntime.Trace(\"Machine state popup closed\");\n}\n\n// Toggle popup (open if closed, close if open)\nfunction toggleAlarmDetailsPopup() {\n    HMIRuntime.UI.SysFct.OpenScreenInPopup(\n        \"AlarmDetails\",\n        \"Popup_Alarm_Details\",\n        true,                    // Toggle mode\n        \"\",\n        500,\n        400,\n        false,\n        undefined\n    );\n    HMIRuntime.Trace(\"Alarm details popup toggled\");\n}\n\n// Open modal popup (blocks interaction with main screen)\nfunction openModalSettingsPopup() {\n    HMIRuntime.UI.SysFct.OpenScreenInPopup(\n        \"SystemSettings\",\n        \"Popup_System_Settings\",\n        false,\n        \"\",\n        600,\n        450,\n        true,                    // Modal popup\n        undefined\n    );\n    HMIRuntime.Trace(\"Modal settings popup opened\");\n}\n\n// Smart popup management with error handling\nfunction openPopupSafely(popupName, screenName, width, height, isModal) {\n    try {\n        HMIRuntime.UI.SysFct.OpenScreenInPopup(\n            popupName,\n            screenName,\n            false,\n            \"\",\n            width || 400,\n            height || 300,\n            isModal || false,\n            undefined\n        );\n        HMIRuntime.Trace(\"Popup opened successfully: \" + popupName);\n        return true;\n    } catch (error) {\n        HMIRuntime.Trace(\"Error opening popup: \" + error.message);\n        return false;\n    }\n}\n\n// Usage examples\nopenMachineStatePopup();\nopenFramelessPopup(\"QuickView\", \"Popup_Quick_Status\");\nopenPopupSafely(\"MotorDetails\", \"Popup_Motor_Info\", 450, 350, false);\n\n// Close all popups function\nfunction closeAllPopups() {\n    var popupNames = [\"MachineState\", \"AlarmDetails\", \"SystemSettings\", \"QuickView\", \"MotorDetails\"];\n    for (var i = 0; i < popupNames.length; i++) {\n        try {\n            HMIRuntime.UI.SysFct.ClosePopup(\"/\" + popupNames[i]);\n        } catch (error) {\n            // Ignore errors for popups that aren't open\n        }\n    }\n    HMIRuntime.Trace(\"All popups closed\");\n}"
  },
  {
    "id": "dataset-management",
    "title": "DataSet Management",
    "category": "Data Storage",
    "description": "Manage session and screen local data storage.",
    "isCustom": false,
    "code": "// DataSet Management - Siemens WinCC Unified\n// Session-local DataSet (persists across screen changes but cleared on logout)\nvar ui = HMIRuntime.UI;\n\n// Add data to session DataSet\nui.DataSet.Add('OPERATOR_NAME', 'John Smith');\nui.DataSet.Add('SHIFT_START_TIME', new Date().toISOString());\nui.DataSet.Add('PRODUCTION_COUNT', 0);\nui.DataSet.Add('LAST_ALARM_TIME', '');\n\nHMIRuntime.Trace(\"Session data initialized\");\n\n// Read and update session data\nfunction updateProductionCount() {\n    var currentCount = ui.DataSet.Exists('PRODUCTION_COUNT') ? ui.DataSet.Get('PRODUCTION_COUNT').Value : 0;\n    var newCount = currentCount + 1;\n    \n    if (ui.DataSet.Exists('PRODUCTION_COUNT')) {\n        ui.DataSet.Remove('PRODUCTION_COUNT');\n    }\n    ui.DataSet.Add('PRODUCTION_COUNT', newCount);\n    \n    HMIRuntime.Trace(\"Production count updated: \" + newCount);\n    return newCount;\n}\n\n// Display all session data\nfunction displaySessionData() {\n    HMIRuntime.Trace(\"=== Session DataSet Contents ===\");\n    for (var index in ui.DataSet) {\n        var item = ui.DataSet[index];\n        HMIRuntime.Trace(\"Key: \" + item.Name + \", Value: \" + item.Value);\n    }\n}\n\n// Screen-local DataSet (cleared when changing screens)\nvar screen = Screen;\n\n// Add screen-specific data\nscreen.DataSet.Add('SCREEN_ENTER_TIME', new Date().toISOString());\nscreen.DataSet.Add('USER_SELECTIONS', []);\nscreen.DataSet.Add('TEMP_VALUES', {});\n\n// Manage screen data\nfunction addUserSelection(selection) {\n    var selections = screen.DataSet.Exists('USER_SELECTIONS') ? screen.DataSet.Get('USER_SELECTIONS').Value : [];\n    selections.push(selection);\n    \n    screen.DataSet.Remove('USER_SELECTIONS');\n    screen.DataSet.Add('USER_SELECTIONS', selections);\n    \n    HMIRuntime.Trace(\"User selection added: \" + selection);\n}\n\n// Store temporary values\nfunction storeTempValue(key, value) {\n    var tempValues = screen.DataSet.Exists('TEMP_VALUES') ? screen.DataSet.Get('TEMP_VALUES').Value : {};\n    tempValues[key] = value;\n    \n    screen.DataSet.Remove('TEMP_VALUES');\n    screen.DataSet.Add('TEMP_VALUES', tempValues);\n    \n    HMIRuntime.Trace(\"Temporary value stored - \" + key + \": \" + value);\n}\n\n// Get stored value safely\nfunction getStoredValue(dataSet, key, defaultValue) {\n    if (dataSet.Exists(key)) {\n        return dataSet.Get(key).Value;\n    } else {\n        HMIRuntime.Trace(\"Key '\" + key + \"' not found, using default: \" + defaultValue);\n        return defaultValue;\n    }\n}\n\n// Clear old data\nfunction clearOldSessionData() {\n    var keysToRemove = ['OLD_DATA_1', 'OLD_DATA_2', 'TEMP_CACHE'];\n    for (var i = 0; i < keysToRemove.length; i++) {\n        if (ui.DataSet.Exists(keysToRemove[i])) {\n            ui.DataSet.Remove(keysToRemove[i]);\n            HMIRuntime.Trace(\"Removed old data: \" + keysToRemove[i]);\n        }\n    }\n}\n\n// Usage examples\nupdateProductionCount();\naddUserSelection(\"Motor 1\");\nstoreTempValue(\"LAST_TEMP\", 78.5);\ndisplaySessionData();\n\n// Get operator name safely\nvar operatorName = getStoredValue(ui.DataSet, 'OPERATOR_NAME', 'Unknown Operator');\nHMIRuntime.Trace(\"Current operator: \" + operatorName);"
  },
  {
    "id": "screen-information",
    "title": "Screen Information and Objects",
    "category": "Screen Management",
    "description": "Get screen details, count objects, and extract screen information.",
    "isCustom": false,
    "code": "// Screen Information - Siemens WinCC Unified\n// Get current screen name\nvar currentScreenName = Screen.Name;\nHMIRuntime.Trace(\"Current screen: \" + currentScreenName);\n\n// Extract information from screen name\nif (currentScreenName.indexOf('_') !== -1) {\n    var screenParts = currentScreenName.split('_');\n    var screenType = screenParts[0];    // e.g., \"Motor\"\n    var screenNumber = screenParts[1];  // e.g., \"01\"\n    HMIRuntime.Trace(\"Screen type: \" + screenType + \", Number: \" + screenNumber);\n}\n\n// Count all objects on screen\nvar screenItems = Screen.Items;\nvar totalObjects = screenItems.Count;\nHMIRuntime.Trace(\"Total objects on screen: \" + totalObjects);\n\n// List all object names\nHMIRuntime.Trace(\"=== Screen Objects ===\");\nfor (var i in Screen.Items) {\n    var objectName = Screen.Items(Number(i)).Name;\n    HMIRuntime.Trace(\"Object \" + (Number(i) + 1) + \": \" + objectName);\n}\n\n// Find objects by type/pattern\nfunction findObjectsByPattern(pattern) {\n    var matchingObjects = [];\n    for (var i in Screen.Items) {\n        var objectName = Screen.Items(Number(i)).Name;\n        if (objectName.indexOf(pattern) !== -1) {\n            matchingObjects.push(objectName);\n        }\n    }\n    return matchingObjects;\n}\n\n// Find all motor-related objects\nvar motorObjects = findObjectsByPattern(\"Motor\");\nHMIRuntime.Trace(\"Found \" + motorObjects.length + \" motor objects:\");\nfor (var j = 0; j < motorObjects.length; j++) {\n    HMIRuntime.Trace(\"  - \" + motorObjects[j]);\n}\n\n// Count objects by type\nfunction countObjectTypes() {\n    var typeCounts = {\n        buttons: 0,\n        labels: 0,\n        inputs: 0,\n        indicators: 0,\n        others: 0\n    };\n    \n    for (var i in Screen.Items) {\n        var objectName = Screen.Items(Number(i)).Name.toLowerCase();\n        \n        if (objectName.indexOf('button') !== -1 || objectName.indexOf('btn') !== -1) {\n            typeCounts.buttons++;\n        } else if (objectName.indexOf('label') !== -1 || objectName.indexOf('text') !== -1) {\n            typeCounts.labels++;\n        } else if (objectName.indexOf('input') !== -1 || objectName.indexOf('field') !== -1) {\n            typeCounts.inputs++;\n        } else if (objectName.indexOf('indicator') !== -1 || objectName.indexOf('light') !== -1) {\n            typeCounts.indicators++;\n        } else {\n            typeCounts.others++;\n        }\n    }\n    \n    HMIRuntime.Trace(\"Object count by type:\");\n    HMIRuntime.Trace(\"  Buttons: \" + typeCounts.buttons);\n    HMIRuntime.Trace(\"  Labels: \" + typeCounts.labels);\n    HMIRuntime.Trace(\"  Inputs: \" + typeCounts.inputs);\n    HMIRuntime.Trace(\"  Indicators: \" + typeCounts.indicators);\n    HMIRuntime.Trace(\"  Others: \" + typeCounts.others);\n    \n    return typeCounts;\n}\n\n// Get screen statistics\nfunction getScreenStatistics() {\n    var stats = {\n        screenName: Screen.Name,\n        totalObjects: Screen.Items.Count,\n        objectTypes: countObjectTypes(),\n        loadTime: new Date().toISOString()\n    };\n    \n    HMIRuntime.Trace(\"Screen statistics generated for: \" + stats.screenName);\n    return stats;\n}\n\n// Usage examples\ncountObjectTypes();\nvar screenStats = getScreenStatistics();\n\n// Store screen info in DataSet\nScreen.DataSet.Add('SCREEN_STATS', screenStats);\nHMIRuntime.Trace(\"Screen statistics stored in DataSet\");"
  },
  {
    "id": "math-random",
    "title": "Random Number Generation",
    "category": "JavaScript Basics",
    "description": "Generate random numbers for testing and simulation.",
    "isCustom": false,
    "code": "// Random Number Generation - Siemens WinCC Unified\n// Generate random number between 0 and 1\nvar randomValue = Math.random();\nHMIRuntime.Trace(\"Random value (0-1): \" + randomValue);\n\n// Generate random integer between min and max\nfunction getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nvar randomSpeed = getRandomInt(100, 1800);\nHMIRuntime.Trace(\"Random motor speed: \" + randomSpeed + \" RPM\");\n\n// Generate random temperature for simulation\nvar baseTemp = 75.0;\nvar variation = 10.0;\nvar randomTemp = baseTemp + (Math.random() * variation * 2) - variation;\nHMIRuntime.Trace(\"Simulated temperature: \" + randomTemp.toFixed(1) + \"°C\");\n\n// Generate random equipment ID for testing\nvar equipmentTypes = [\"MOTOR\", \"PUMP\", \"VALVE\", \"SENSOR\"];\nvar randomType = equipmentTypes[Math.floor(Math.random() * equipmentTypes.length)];\nvar randomId = getRandomInt(1, 999).toString().padStart(3, '0');\nvar randomEquipment = randomType + \"_\" + randomId;\nHMIRuntime.Trace(\"Random equipment: \" + randomEquipment);\n\n// Generate random production data for testing\nvar dailyProduction = getRandomInt(800, 1200);\nvar efficiency = (85 + Math.random() * 10).toFixed(1);\nHMIRuntime.Trace(\"Test data - Production: \" + dailyProduction + \" units, Efficiency: \" + efficiency + \"%\");"
  },
  {
    "id": "tagset-operations",
    "title": "TagSet Bulk Operations",
    "category": "Tag Operations",
    "description": "Read multiple tags efficiently using TagSet for better performance.",
    "isCustom": false,
    "code": "// TagSet Operations - Siemens WinCC Unified\n// Efficient way to read multiple tags at once\nfunction readMultipleTagsEfficient() {\n    try {\n        // Create TagSet with multiple tag names\n        var tagSet = Tags.CreateTagSet([\"MOTOR_001_Speed\", \"MOTOR_001_Current\", \"MOTOR_001_Temperature\"]);\n        \n        // Read all tags in one operation (much faster than individual reads)\n        tagSet.Read();\n        \n        // Access the values\n        var speed = tagSet.Item(\"MOTOR_001_Speed\").Value;\n        var current = tagSet.Item(\"MOTOR_001_Current\").Value;\n        var temperature = tagSet.Item(\"MOTOR_001_Temperature\").Value;\n        \n        HMIRuntime.Trace(\"Motor Status - Speed: \" + speed + \" RPM, Current: \" + current + \" A, Temp: \" + temperature + \"°C\");\n        \n        return {speed: speed, current: current, temperature: temperature};\n    } catch (error) {\n        HMIRuntime.Trace(\"Error reading TagSet: \" + error.message);\n        return null;\n    }\n}\n\n// Compare: Inefficient individual tag reading (NOT recommended)\nfunction readMultipleTagsInefficient() {\n    // This is slower - multiple individual read operations\n    var speed = Tags(\"MOTOR_001_Speed\").Read();\n    var current = Tags(\"MOTOR_001_Current\").Read();\n    var temperature = Tags(\"MOTOR_001_Temperature\").Read();\n    \n    HMIRuntime.Trace(\"Individual reads completed (slower method)\");\n}\n\n// Example usage\nvar motorData = readMultipleTagsEfficient();\nif (motorData) {\n    // Process the data\n    if (motorData.temperature > 85) {\n        HMIRuntime.Trace(\"WARNING: Motor temperature high!\");\n    }\n}"
  },
  {
    "id": "alert-dialogs",
    "title": "Alert Dialogs and Notifications",
    "category": "User Interface",
    "description": "Handle user notifications (alert() not available in WinCC for security).",
    "isCustom": false,
    "code": "// Alert Dialogs - Siemens WinCC Unified\n// NOTE: alert() function is NOT available in WinCC Unified for security reasons\n// Use these alternatives instead:\n\n// 1. Use HMIRuntime.Trace for debugging messages\nfunction showDebugMessage(message) {\n    HMIRuntime.Trace(\"DEBUG: \" + message);\n    // This appears in TraceViewer for diagnostics\n}\n\n// 2. Update screen objects to show status\nfunction showStatusOnScreen(message, isError) {\n    var statusLabel = Screen.FindItem('StatusMessage');\n    if (statusLabel) {\n        statusLabel.Text = message;\n        statusLabel.ForeColor = isError ? 0xFFFF0000 : 0xFF000000; // Red for errors, black for normal\n    }\n    \n    // Also log the message\n    HMIRuntime.Trace(isError ? \"ERROR: \" + message : \"INFO: \" + message);\n}\n\n// 3. Use alarm system for critical notifications\nfunction triggerSystemAlarm(alarmText, priority) {\n    // This would integrate with WinCC alarm system\n    Tags(\"SYSTEM_ALARM_TEXT\").Write(alarmText);\n    Tags(\"SYSTEM_ALARM_PRIORITY\").Write(priority);\n    Tags(\"SYSTEM_ALARM_TRIGGER\").Write(true);\n    \n    HMIRuntime.Trace(\"ALARM TRIGGERED: \" + alarmText);\n}\n\n// 4. Show popup screen for important messages\nfunction showImportantMessage(title, message) {\n    // Store message data for popup screen\n    Tags(\"POPUP_TITLE\").Write(title);\n    Tags(\"POPUP_MESSAGE\").Write(message);\n    \n    // Open popup screen\n    try {\n        HMIRuntime.Screens.Show(\"MessagePopup\");\n        HMIRuntime.Trace(\"Message popup shown: \" + title);\n    } catch (error) {\n        HMIRuntime.Trace(\"Failed to show popup: \" + error.message);\n        // Fallback to trace message\n        HMIRuntime.Trace(\"MESSAGE: \" + title + \" - \" + message);\n    }\n}\n\n// Usage examples\nshowDebugMessage(\"Motor startup sequence initiated\");\nshowStatusOnScreen(\"System ready for operation\", false);\ntriggerSystemAlarm(\"High temperature detected in Tank 1\", \"HIGH\");\nshowImportantMessage(\"Production Complete\", \"Daily production target reached: 1000 units\");"
  },
  {
    "id": "external-programs",
    "title": "External Program Execution",
    "category": "System Integration",
    "description": "Start external programs from WinCC runtime (limited on PC, full on Panel).",
    "isCustom": false,
    "code": "// External Program Execution - Siemens WinCC Unified\n// NOTE: StartProgram function has different capabilities on PC vs Unified Comfort Panel\n\n// For Unified Comfort Panel - Can start programs with user interfaces\nfunction openDocumentViewer(filePath) {\n    try {\n        // Open LibreOffice on Unified Comfort Panel\n        HMIRuntime.StartProgram(\"/opt/siemens/App_Restriction/runLibreoffice.sh\", filePath);\n        HMIRuntime.Trace(\"Document viewer opened: \" + filePath);\n    } catch (error) {\n        HMIRuntime.Trace(\"Failed to open document viewer: \" + error.message);\n    }\n}\n\nfunction openPDFViewer(pdfPath) {\n    try {\n        // Open PDF viewer on Unified Comfort Panel\n        HMIRuntime.StartProgram(\"/opt/siemens/App_Restriction/runOkular.sh\", pdfPath);\n        HMIRuntime.Trace(\"PDF viewer opened: \" + pdfPath);\n    } catch (error) {\n        HMIRuntime.Trace(\"Failed to open PDF viewer: \" + error.message);\n    }\n}\n\nfunction openFileBrowser() {\n    try {\n        // Open file browser on Unified Comfort Panel\n        HMIRuntime.StartProgram(\"/opt/siemens/App_Restriction/runThunar.sh\");\n        HMIRuntime.Trace(\"File browser opened\");\n    } catch (error) {\n        HMIRuntime.Trace(\"Failed to open file browser: \" + error.message);\n    }\n}\n\nfunction openWebBrowser(url) {\n    try {\n        // Open web browser on Unified Comfort Panel\n        HMIRuntime.StartProgram(\"/opt/siemens/App_Restriction/runChromium.sh\", url);\n        HMIRuntime.Trace(\"Web browser opened: \" + url);\n    } catch (error) {\n        HMIRuntime.Trace(\"Failed to open web browser: \" + error.message);\n    }\n}\n\n// For PC Runtime - Limited to programs without user interface\n// Use alternative methods for PC runtime\nfunction executeBackgroundTask() {\n    try {\n        // On PC runtime, can only start background processes\n        // For programs with UI, need to use ODK or Open Pipe\n        HMIRuntime.Trace(\"Background task execution initiated\");\n        \n        // Alternative: Write command to file for external monitoring\n        var command = \"START_BACKUP_\" + new Date().toISOString();\n        HMIRuntime.FileSystem.WriteFile(\"C:\\\\Commands\\\\backup_cmd.txt\", command, \"utf8\");\n        HMIRuntime.Trace(\"Command file written for external execution\");\n    } catch (error) {\n        HMIRuntime.Trace(\"Failed to execute background task: \" + error.message);\n    }\n}\n\n// Cross-platform function\nfunction openMaintenanceManual() {\n    var manualPath = \"/production/manuals/maintenance_guide.pdf\";\n    \n    // Check if running on Unified Comfort Panel or PC\n    if (typeof HMIRuntime.StartProgram === \"function\") {\n        openPDFViewer(manualPath);\n    } else {\n        HMIRuntime.Trace(\"Manual location: \" + manualPath);\n        showStatusOnScreen(\"Manual available at: \" + manualPath, false);\n    }\n}\n\n// Usage examples\n// openDocumentViewer(\"/production/reports/daily_report.xlsx\");\n// openPDFViewer(\"/manuals/equipment_manual.pdf\");\n// openWebBrowser(\"http://production-dashboard.local\");\n// executeBackgroundTask();\nopenMaintenanceManual();"
  },
  {
    "id": "udt-access",
    "title": "UDT (User Defined Type) Access",
    "category": "Tag Operations",
    "description": "Access individual elements of User Defined Types in WinCC.",
    "isCustom": false,
    "code": "// UDT Access - Siemens WinCC Unified\n// Access individual elements of User Defined Types (UDTs)\n\n// Example UDT structure: Motor_UDT with elements:\n// - Name (String)\n// - Speed (Real)\n// - Current (Real)\n// - Temperature (Real)\n// - Running (Bool)\n// - FaultCode (Int)\n\n// Read UDT elements individually\nfunction readMotorUDT(motorInstance) {\n    try {\n        // Access UDT elements using dot notation: UDT_Instance.Element_Name\n        var motorName = Tags(motorInstance + '.Name').Read();\n        var motorSpeed = Tags(motorInstance + '.Speed').Read();\n        var motorCurrent = Tags(motorInstance + '.Current').Read();\n        var motorTemp = Tags(motorInstance + '.Temperature').Read();\n        var isRunning = Tags(motorInstance + '.Running').Read();\n        var faultCode = Tags(motorInstance + '.FaultCode').Read();\n        \n        HMIRuntime.Trace(\"Motor UDT Data for \" + motorInstance + \":\");\n        HMIRuntime.Trace(\"  Name: \" + motorName);\n        HMIRuntime.Trace(\"  Speed: \" + motorSpeed + \" RPM\");\n        HMIRuntime.Trace(\"  Current: \" + motorCurrent + \" A\");\n        HMIRuntime.Trace(\"  Temperature: \" + motorTemp + \"°C\");\n        HMIRuntime.Trace(\"  Running: \" + isRunning);\n        HMIRuntime.Trace(\"  Fault Code: \" + faultCode);\n        \n        return {\n            name: motorName,\n            speed: motorSpeed,\n            current: motorCurrent,\n            temperature: motorTemp,\n            running: isRunning,\n            faultCode: faultCode\n        };\n    } catch (error) {\n        HMIRuntime.Trace(\"Error reading motor UDT: \" + error.message);\n        return null;\n    }\n}\n\n// Write to UDT elements\nfunction updateMotorSetpoints(motorInstance, newSpeed, startMotor) {\n    try {\n        Tags(motorInstance + '.SpeedSetpoint').Write(newSpeed);\n        Tags(motorInstance + '.StartCommand').Write(startMotor);\n        \n        HMIRuntime.Trace(\"Motor \" + motorInstance + \" updated - Speed: \" + newSpeed + \", Start: \" + startMotor);\n        return true;\n    } catch (error) {\n        HMIRuntime.Trace(\"Error updating motor UDT: \" + error.message);\n        return false;\n    }\n}\n\n// Process multiple motor UDTs\nfunction checkAllMotors() {\n    var motorInstances = [\"Motor_001\", \"Motor_002\", \"Motor_003\"];\n    var runningMotors = 0;\n    var faultyMotors = [];\n    \n    for (var i = 0; i < motorInstances.length; i++) {\n        var motorData = readMotorUDT(motorInstances[i]);\n        if (motorData) {\n            if (motorData.running) {\n                runningMotors++;\n            }\n            if (motorData.faultCode !== 0) {\n                faultyMotors.push(motorInstances[i] + \" (Code: \" + motorData.faultCode + \")\");\n            }\n        }\n    }\n    \n    HMIRuntime.Trace(\"Motor Summary - Running: \" + runningMotors + \"/\" + motorInstances.length);\n    if (faultyMotors.length > 0) {\n        HMIRuntime.Trace(\"Motors with faults: \" + faultyMotors.join(\", \"));\n    }\n}\n\n// Tank UDT example\nfunction readTankUDT(tankInstance) {\n    try {\n        var level = Tags(tankInstance + '.Level').Read();\n        var temperature = Tags(tankInstance + '.Temperature').Read();\n        var pressure = Tags(tankInstance + '.Pressure').Read();\n        var valveOpen = Tags(tankInstance + '.OutletValve').Read();\n        \n        HMIRuntime.Trace(\"Tank \" + tankInstance + \" - Level: \" + level + \"%, Temp: \" + temperature + \"°C, Pressure: \" + pressure + \" bar\");\n        \n        return {level: level, temperature: temperature, pressure: pressure, valveOpen: valveOpen};\n    } catch (error) {\n        HMIRuntime.Trace(\"Error reading tank UDT: \" + error.message);\n        return null;\n    }\n}\n\n// Usage examples\nvar motor1Data = readMotorUDT(\"Motor_001\");\nif (motor1Data && motor1Data.temperature > 85) {\n    HMIRuntime.Trace(\"WARNING: Motor 1 temperature high!\");\n}\n\nupdateMotorSetpoints(\"Motor_002\", 1450, true);\ncheckAllMotors();\nreadTankUDT(\"Tank_001\");"
  },
  {
    "id": "touch-direction",
    "title": "Touch Area Direction Detection",
    "category": "User Interface",
    "description": "Detect touch gesture directions in WinCC Unified touch areas.",
    "isCustom": false,
    "code": "// Touch Direction Detection - Siemens WinCC Unified\n// Detect swipe directions in touch areas for gesture navigation\n\n// Touch area event handler for swipe detection\nfunction handleTouchAreaSwipe(touchArea) {\n    try {\n        // Get touch direction from touch area object\n        // Direction values: 0=None, 1=Up, 2=Down, 3=Left, 4=Right\n        var direction = touchArea.Direction;\n        var directionName = getTouchDirectionName(direction);\n        \n        HMIRuntime.Trace(\"Touch swipe detected: \" + directionName);\n        \n        // Handle different swipe directions\n        switch (direction) {\n            case 1: // Up swipe\n                handleSwipeUp();\n                break;\n            case 2: // Down swipe\n                handleSwipeDown();\n                break;\n            case 3: // Left swipe\n                handleSwipeLeft();\n                break;\n            case 4: // Right swipe\n                handleSwipeRight();\n                break;\n            default:\n                HMIRuntime.Trace(\"No direction detected or tap gesture\");\n                break;\n        }\n    } catch (error) {\n        HMIRuntime.Trace(\"Error reading touch direction: \" + error.message);\n    }\n}\n\n// Convert direction number to readable name\nfunction getTouchDirectionName(direction) {\n    var directions = {\n        0: \"None/Tap\",\n        1: \"Up\",\n        2: \"Down\",\n        3: \"Left\",\n        4: \"Right\"\n    };\n    return directions[direction] || \"Unknown\";\n}\n\n// Handle specific swipe directions\nfunction handleSwipeUp() {\n    HMIRuntime.Trace(\"Swipe Up: Opening main menu\");\n    // Navigate to main menu or show system controls\n    try {\n        HMIRuntime.Screens.Show(\"MainMenu\");\n    } catch (error) {\n        HMIRuntime.Trace(\"Navigation failed: \" + error.message);\n    }\n}\n\nfunction handleSwipeDown() {\n    HMIRuntime.Trace(\"Swipe Down: Opening alarm list\");\n    // Show alarm overview or status panel\n    try {\n        HMIRuntime.Screens.Show(\"AlarmOverview\");\n    } catch (error) {\n        HMIRuntime.Trace(\"Navigation failed: \" + error.message);\n    }\n}\n\nfunction handleSwipeLeft() {\n    HMIRuntime.Trace(\"Swipe Left: Next screen\");\n    // Navigate to next screen in sequence\n    var currentScreen = Screen.Name;\n    var nextScreen = getNextScreen(currentScreen);\n    if (nextScreen) {\n        try {\n            HMIRuntime.Screens.Show(nextScreen);\n        } catch (error) {\n            HMIRuntime.Trace(\"Navigation failed: \" + error.message);\n        }\n    }\n}\n\nfunction handleSwipeRight() {\n    HMIRuntime.Trace(\"Swipe Right: Previous screen\");\n    // Navigate to previous screen in sequence\n    var currentScreen = Screen.Name;\n    var prevScreen = getPreviousScreen(currentScreen);\n    if (prevScreen) {\n        try {\n            HMIRuntime.Screens.Show(prevScreen);\n        } catch (error) {\n            HMIRuntime.Trace(\"Navigation failed: \" + error.message);\n        }\n    }\n}\n\n// Screen navigation helpers\nfunction getNextScreen(currentScreen) {\n    var screenSequence = [\"Overview\", \"Motors\", \"Pumps\", \"Valves\", \"Alarms\"];\n    var currentIndex = screenSequence.indexOf(currentScreen);\n    if (currentIndex >= 0 && currentIndex < screenSequence.length - 1) {\n        return screenSequence[currentIndex + 1];\n    }\n    return null; // Already at last screen\n}\n\nfunction getPreviousScreen(currentScreen) {\n    var screenSequence = [\"Overview\", \"Motors\", \"Pumps\", \"Valves\", \"Alarms\"];\n    var currentIndex = screenSequence.indexOf(currentScreen);\n    if (currentIndex > 0) {\n        return screenSequence[currentIndex - 1];\n    }\n    return null; // Already at first screen\n}\n\n// Advanced touch handling with speed detection\nfunction handleAdvancedTouch(touchArea) {\n    var direction = touchArea.Direction;\n    var speed = touchArea.Speed || 0; // Touch speed if available\n    \n    HMIRuntime.Trace(\"Advanced touch - Direction: \" + getTouchDirectionName(direction) + \", Speed: \" + speed);\n    \n    // Fast swipes could trigger different actions\n    if (speed > 100) {\n        HMIRuntime.Trace(\"Fast swipe detected - Quick action triggered\");\n        // Implement quick navigation or emergency actions\n    }\n}\n\n// Touch area configuration example\nfunction configureTouchArea() {\n    // This would typically be done in the screen design, but can be referenced in scripts\n    var touchArea = Screen.FindItem('MainTouchArea');\n    if (touchArea) {\n        HMIRuntime.Trace(\"Touch area configured: \" + touchArea.Name);\n        // Touch area is ready for gesture detection\n    } else {\n        HMIRuntime.Trace(\"Touch area not found - check screen configuration\");\n    }\n}\n\n// Usage: This function would be called from touch area events\n// var touchArea = Screen.FindItem('GestureArea');\n// handleTouchAreaSwipe(touchArea);\n\nHMIRuntime.Trace(\"Touch direction detection system ready\");\nconfiguTouchArea();"
  },
  {
    "id": "nanosecond-timestamps",
    "title": "High-Precision Timestamps",
    "category": "JavaScript Basics",
    "description": "Work with nanosecond precision timestamps using WinCC Math object.",
    "isCustom": false,
    "code": "// High-Precision Timestamps - Siemens WinCC Unified\n// Use Math.DatePrecise for nanosecond precision (WinCC-specific)\n\n// Create high-precision timestamp\nfunction createPreciseTimestamp() {\n    try {\n        // Math.DatePrecise provides 100ns resolution as 64-bit integer\n        var preciseTime = new Math.DatePrecise();\n        var timestampValue = preciseTime.Value; // 64-bit integer value\n        \n        HMIRuntime.Trace(\"Precise timestamp (100ns ticks): \" + timestampValue);\n        return preciseTime;\n    } catch (error) {\n        HMIRuntime.Trace(\"High-precision timestamps not available: \" + error.message);\n        // Fallback to standard Date\n        return new Date();\n    }\n}\n\n// Log events with precise timing\nfunction logPreciseEvent(eventName, eventData) {\n    var timestamp = createPreciseTimestamp();\n    var standardTime = new Date().toISOString();\n    \n    var logEntry = {\n        event: eventName,\n        data: eventData,\n        preciseTime: timestamp.Value || timestamp.getTime(),\n        standardTime: standardTime\n    };\n    \n    HMIRuntime.Trace(\"PRECISE LOG: \" + JSON.stringify(logEntry));\n    return logEntry;\n}\n\n// Measure precise duration between events\nvar preciseTimer = {\n    startTime: null,\n    \n    start: function() {\n        this.startTime = createPreciseTimestamp();\n        HMIRuntime.Trace(\"Precise timer started\");\n    },\n    \n    stop: function(operationName) {\n        if (!this.startTime) {\n            HMIRuntime.Trace(\"Timer not started\");\n            return null;\n        }\n        \n        var endTime = createPreciseTimestamp();\n        var duration;\n        \n        if (this.startTime.Value && endTime.Value) {\n            // Calculate duration in 100ns ticks\n            duration = endTime.Value - this.startTime.Value;\n            var milliseconds = duration / 10000; // Convert to milliseconds\n            HMIRuntime.Trace(\"Operation '\" + operationName + \"' took \" + milliseconds.toFixed(3) + \" ms (precise)\");\n        } else {\n            // Fallback to standard timing\n            duration = endTime.getTime() - this.startTime.getTime();\n            HMIRuntime.Trace(\"Operation '\" + operationName + \"' took \" + duration + \" ms (standard)\");\n        }\n        \n        this.startTime = null;\n        return duration;\n    }\n};\n\n// High-frequency data logging with precise timestamps\nfunction logHighFrequencyData() {\n    var timestamp = createPreciseTimestamp();\n    \n    // Simulate reading multiple sensors rapidly\n    var sensorData = {\n        timestamp: timestamp.Value || timestamp.getTime(),\n        motor1Speed: Tags(\"MOTOR_001_Speed\").Read(),\n        motor1Current: Tags(\"MOTOR_001_Current\").Read(),\n        pressure: Tags(\"PRESSURE_SENSOR_1\").Read(),\n        temperature: Tags(\"TEMP_SENSOR_1\").Read()\n    };\n    \n    // In real application, this would be written to high-speed logging system\n    HMIRuntime.Trace(\"High-freq data: \" + JSON.stringify(sensorData));\n    return sensorData;\n}\n\n// Synchronize with PLC timestamps (if PLC also uses nanosecond precision)\nfunction synchronizeWithPLC() {\n    var hmiTime = createPreciseTimestamp();\n    var plcTime = Tags(\"PLC_PRECISE_TIMESTAMP\").Read(); // Assuming PLC provides precise timestamp\n    \n    var timeDiff;\n    if (hmiTime.Value) {\n        timeDiff = Math.abs(hmiTime.Value - plcTime) / 10000; // Convert to milliseconds\n    } else {\n        timeDiff = Math.abs(hmiTime.getTime() - plcTime);\n    }\n    \n    HMIRuntime.Trace(\"Time synchronization - HMI/PLC difference: \" + timeDiff.toFixed(3) + \" ms\");\n    \n    if (timeDiff > 10) { // More than 10ms difference\n        HMIRuntime.Trace(\"WARNING: Significant time difference detected\");\n    }\n    \n    return timeDiff;\n}\n\n// Performance measurement for critical operations\nfunction measureCriticalOperation() {\n    preciseTimer.start();\n    \n    // Simulate critical operation\n    var tagSet = Tags.CreateTagSet([\"MOTOR_001_Speed\", \"MOTOR_002_Speed\", \"MOTOR_003_Speed\"]);\n    tagSet.Read();\n    \n    // Process the data\n    for (var i = 0; i < 3; i++) {\n        var tagName = \"MOTOR_00\" + (i + 1) + \"_Speed\";\n        var speed = tagSet.Item(tagName).Value;\n        // Perform calculations\n        var efficiency = speed / 1800 * 100;\n    }\n    \n    var duration = preciseTimer.stop(\"TagSet read and processing\");\n    \n    // Log if operation takes too long\n    if (duration && duration > 50000) { // More than 5ms in 100ns ticks\n        HMIRuntime.Trace(\"PERFORMANCE WARNING: Critical operation slow\");\n    }\n}\n\n// Usage examples\nlogPreciseEvent(\"System Startup\", {version: \"1.0\", operator: \"John\"});\nsynchronizeWithPLC();\nmeasureCriticalOperation();\n\n// Start high-frequency logging\nvar dataLogger = setInterval(function() {\n    logHighFrequencyData();\n}, 100); // Every 100ms\n\nHMIRuntime.Trace(\"High-precision timestamp system initialized\");"
  },
  {
    "id": "database-access",
    "title": "Database Operations",
    "category": "Data Storage",
    "description": "Connect to and query databases for production data management.",
    "isCustom": false,
    "code": "// Database Access - Siemens WinCC Unified\n// Establish database connections and perform queries\n\n// Create database connection (store in session for reuse)\nfunction createDatabaseConnection() {\n    try {\n        // Check if connection already exists in session\n        if (HMIRuntime.UI.DataSet.Exists('DB_CONNECTION')) {\n            HMIRuntime.Trace(\"Using existing database connection\");\n            return HMIRuntime.UI.DataSet.Get('DB_CONNECTION').Value;\n        }\n        \n        // Create new database connection\n        var connectionString = \"Server=production-db;Database=WinCC_Data;Trusted_Connection=true;\";\n        var dbConnection = HMIRuntime.CreateDatabaseConnection(connectionString);\n        \n        // Store connection in session for reuse (better performance)\n        HMIRuntime.UI.DataSet.Add('DB_CONNECTION', dbConnection);\n        \n        HMIRuntime.Trace(\"Database connection established and stored in session\");\n        return dbConnection;\n    } catch (error) {\n        HMIRuntime.Trace(\"Database connection failed: \" + error.message);\n        return null;\n    }\n}\n\n// Insert production data into database\nfunction logProductionData(motorId, speed, current, temperature, timestamp) {\n    var connection = createDatabaseConnection();\n    if (!connection) return false;\n    \n    try {\n        var query = \"INSERT INTO ProductionLog (MotorID, Speed, Current, Temperature, Timestamp) \" +\n                   \"VALUES ('\" + motorId + \"', \" + speed + \", \" + current + \", \" + temperature + \", '\" + timestamp + \"')\";\n        \n        var result = connection.ExecuteNonQuery(query);\n        HMIRuntime.Trace(\"Production data logged for \" + motorId + \": \" + result + \" rows affected\");\n        return true;\n    } catch (error) {\n        HMIRuntime.Trace(\"Failed to log production data: \" + error.message);\n        return false;\n    }\n}\n\n// Query production statistics\nfunction getProductionStatistics(startDate, endDate) {\n    var connection = createDatabaseConnection();\n    if (!connection) return null;\n    \n    try {\n        var query = \"SELECT MotorID, COUNT(*) as RecordCount, AVG(Speed) as AvgSpeed, \" +\n                   \"AVG(Current) as AvgCurrent, MAX(Temperature) as MaxTemp \" +\n                   \"FROM ProductionLog \" +\n                   \"WHERE Timestamp BETWEEN '\" + startDate + \"' AND '\" + endDate + \"' \" +\n                   \"GROUP BY MotorID\";\n        \n        var resultSet = connection.ExecuteQuery(query);\n        \n        HMIRuntime.Trace(\"Production statistics query executed\");\n        \n        // Process results\n        var statistics = [];\n        while (resultSet.Read()) {\n            var stat = {\n                motorId: resultSet.GetString(\"MotorID\"),\n                recordCount: resultSet.GetInt32(\"RecordCount\"),\n                avgSpeed: resultSet.GetDouble(\"AvgSpeed\").toFixed(1),\n                avgCurrent: resultSet.GetDouble(\"AvgCurrent\").toFixed(2),\n                maxTemp: resultSet.GetDouble(\"MaxTemp\").toFixed(1)\n            };\n            statistics.push(stat);\n            \n            HMIRuntime.Trace(\"Motor \" + stat.motorId + \": \" + stat.recordCount + \" records, Avg Speed: \" + stat.avgSpeed + \" RPM\");\n        }\n        \n        return statistics;\n    } catch (error) {\n        HMIRuntime.Trace(\"Failed to query production statistics: \" + error.message);\n        return null;\n    }\n}\n\n// Get alarm history from database\nfunction getAlarmHistory(hours) {\n    var connection = createDatabaseConnection();\n    if (!connection) return null;\n    \n    try {\n        var query = \"SELECT AlarmID, AlarmText, Severity, Timestamp, AcknowledgedBy \" +\n                   \"FROM AlarmHistory \" +\n                   \"WHERE Timestamp >= DATEADD(hour, -\" + hours + \", GETDATE()) \" +\n                   \"ORDER BY Timestamp DESC\";\n        \n        var resultSet = connection.ExecuteQuery(query);\n        \n        var alarms = [];\n        while (resultSet.Read()) {\n            var alarm = {\n                id: resultSet.GetString(\"AlarmID\"),\n                text: resultSet.GetString(\"AlarmText\"),\n                severity: resultSet.GetString(\"Severity\"),\n                timestamp: resultSet.GetDateTime(\"Timestamp\"),\n                acknowledgedBy: resultSet.GetString(\"AcknowledgedBy\")\n            };\n            alarms.push(alarm);\n        }\n        \n        HMIRuntime.Trace(\"Retrieved \" + alarms.length + \" alarms from last \" + hours + \" hours\");\n        return alarms;\n    } catch (error) {\n        HMIRuntime.Trace(\"Failed to get alarm history: \" + error.message);\n        return null;\n    }\n}\n\n// Update equipment maintenance records\nfunction updateMaintenanceRecord(equipmentId, maintenanceType, description, technician) {\n    var connection = createDatabaseConnection();\n    if (!connection) return false;\n    \n    try {\n        var timestamp = new Date().toISOString();\n        var query = \"INSERT INTO MaintenanceLog (EquipmentID, MaintenanceType, Description, Technician, Timestamp) \" +\n                   \"VALUES ('\" + equipmentId + \"', '\" + maintenanceType + \"', '\" + description + \"', '\" + technician + \"', '\" + timestamp + \"')\";\n        \n        var result = connection.ExecuteNonQuery(query);\n        HMIRuntime.Trace(\"Maintenance record updated for \" + equipmentId + \": \" + maintenanceType);\n        return true;\n    } catch (error) {\n        HMIRuntime.Trace(\"Failed to update maintenance record: \" + error.message);\n        return false;\n    }\n}\n\n// Export production report to database\nfunction generateProductionReport() {\n    var connection = createDatabaseConnection();\n    if (!connection) return false;\n    \n    try {\n        // Get current production data\n        var totalProduction = Tags(\"TOTAL_PRODUCTION_COUNT\").Read();\n        var efficiency = Tags(\"OVERALL_EFFICIENCY\").Read();\n        var runningHours = Tags(\"SYSTEM_RUNNING_HOURS\").Read();\n        var timestamp = new Date().toISOString();\n        \n        var query = \"INSERT INTO DailyReports (Date, TotalProduction, Efficiency, RunningHours, GeneratedAt) \" +\n                   \"VALUES ('\" + timestamp.split('T')[0] + \"', \" + totalProduction + \", \" + efficiency + \", \" + runningHours + \", '\" + timestamp + \"')\";\n        \n        var result = connection.ExecuteNonQuery(query);\n        HMIRuntime.Trace(\"Daily production report generated: \" + totalProduction + \" units, \" + efficiency + \"% efficiency\");\n        return true;\n    } catch (error) {\n        HMIRuntime.Trace(\"Failed to generate production report: \" + error.message);\n        return false;\n    }\n}\n\n// Close database connection when session ends\nfunction closeDatabaseConnection() {\n    try {\n        if (HMIRuntime.UI.DataSet.Exists('DB_CONNECTION')) {\n            var connection = HMIRuntime.UI.DataSet.Get('DB_CONNECTION').Value;\n            connection.Close();\n            HMIRuntime.UI.DataSet.Remove('DB_CONNECTION');\n            HMIRuntime.Trace(\"Database connection closed\");\n        }\n    } catch (error) {\n        HMIRuntime.Trace(\"Error closing database connection: \" + error.message);\n    }\n}\n\n// Usage examples\nvar currentTime = new Date().toISOString();\nlogProductionData(\"MOTOR_001\", 1450, 8.5, 78.2, currentTime);\n\nvar stats = getProductionStatistics('2024-12-01', '2024-12-27');\nif (stats) {\n    for (var i = 0; i < stats.length; i++) {\n        HMIRuntime.Trace(\"Statistics for \" + stats[i].motorId + \": \" + stats[i].recordCount + \" records\");\n    }\n}\n\nvar recentAlarms = getAlarmHistory(24); // Last 24 hours\nupdateMaintenanceRecord(\"MOTOR_001\", \"Preventive\", \"Oil change and filter replacement\", \"Tech_John\");\ngenerateProductionReport();\n\nHMIRuntime.Trace(\"Database operations system ready\");"
  },
  {
    "id": "math-random-generation",
    "title": "Random Number Generation",
    "category": "JavaScript Basics",
    "description": "Generate random numbers for testing and simulation.",
    "isCustom": false,
    "code": "// Random Number Generation - Siemens WinCC Unified\n// Generate random number between 0 and 1\nvar randomValue = Math.random();\nHMIRuntime.Trace(\"Random value (0-1): \" + randomValue);\n\n// Generate random integer between min and max\nfunction getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nvar randomSpeed = getRandomInt(100, 1800);\nHMIRuntime.Trace(\"Random motor speed: \" + randomSpeed + \" RPM\");\n\n// Generate random temperature for simulation\nvar baseTemp = 75.0;\nvar variation = 10.0;\nvar randomTemp = baseTemp + (Math.random() * variation * 2) - variation;\nHMIRuntime.Trace(\"Simulated temperature: \" + randomTemp.toFixed(1) + \"°C\");\n\n// Generate random equipment ID for testing\nvar equipmentTypes = [\"MOTOR\", \"PUMP\", \"VALVE\", \"SENSOR\"];\nvar randomType = equipmentTypes[Math.floor(Math.random() * equipmentTypes.length)];\nvar randomId = getRandomInt(1, 999).toString().padStart(3, '0');\nvar randomEquipment = randomType + \"_\" + randomId;\nHMIRuntime.Trace(\"Random equipment: \" + randomEquipment);\n\n// Generate random production data for testing\nvar dailyProduction = getRandomInt(800, 1200);\nvar efficiency = (85 + Math.random() * 10).toFixed(1);\nHMIRuntime.Trace(\"Test data - Production: \" + dailyProduction + \" units, Efficiency: \" + efficiency + \"%\");"
  },
  {
    "id": "tagset-bulk-operations",
    "title": "TagSet Bulk Operations",
    "category": "Tag Operations",
    "description": "Read multiple tags efficiently using TagSet for better performance.",
    "isCustom": false,
    "code": "// TagSet Operations - Siemens WinCC Unified\n// Efficient way to read multiple tags at once\nfunction readMultipleTagsEfficient() {\n    try {\n        // Create TagSet with multiple tag names\n        var tagSet = Tags.CreateTagSet([\"MOTOR_001_Speed\", \"MOTOR_001_Current\", \"MOTOR_001_Temperature\"]);\n        \n        // Read all tags in one operation (much faster than individual reads)\n        tagSet.Read();\n        \n        // Access the values\n        var speed = tagSet.Item(\"MOTOR_001_Speed\").Value;\n        var current = tagSet.Item(\"MOTOR_001_Current\").Value;\n        var temperature = tagSet.Item(\"MOTOR_001_Temperature\").Value;\n        \n        HMIRuntime.Trace(\"Motor Status - Speed: \" + speed + \" RPM, Current: \" + current + \" A, Temp: \" + temperature + \"°C\");\n        \n        return {speed: speed, current: current, temperature: temperature};\n    } catch (error) {\n        HMIRuntime.Trace(\"Error reading TagSet: \" + error.message);\n        return null;\n    }\n}\n\n// Compare: Inefficient individual tag reading (NOT recommended)\nfunction readMultipleTagsInefficient() {\n    // This is slower - multiple individual read operations\n    var speed = Tags(\"MOTOR_001_Speed\").Read();\n    var current = Tags(\"MOTOR_001_Current\").Read();\n    var temperature = Tags(\"MOTOR_001_Temperature\").Read();\n    \n    HMIRuntime.Trace(\"Individual reads completed (slower method)\");\n}\n\n// Example usage\nvar motorData = readMultipleTagsEfficient();\nif (motorData) {\n    // Process the data\n    if (motorData.temperature > 85) {\n        HMIRuntime.Trace(\"WARNING: Motor temperature high!\");\n    }\n}"
  },
  {
    "id": "alternative-alerts",
    "title": "Alert Alternatives (No alert() in WinCC)",
    "category": "User Interface",
    "description": "Handle user notifications since alert() is not available in WinCC for security.",
    "isCustom": false,
    "code": "// Alert Dialogs - Siemens WinCC Unified\n// NOTE: alert() function is NOT available in WinCC Unified for security reasons\n// Use these alternatives instead:\n\n// 1. Use HMIRuntime.Trace for debugging messages\nfunction showDebugMessage(message) {\n    HMIRuntime.Trace(\"DEBUG: \" + message);\n    // This appears in TraceViewer for diagnostics\n}\n\n// 2. Update screen objects to show status\nfunction showStatusOnScreen(message, isError) {\n    var statusLabel = Screen.FindItem('StatusMessage');\n    if (statusLabel) {\n        statusLabel.Text = message;\n        statusLabel.ForeColor = isError ? 0xFFFF0000 : 0xFF000000; // Red for errors, black for normal\n    }\n    \n    // Also log the message\n    HMIRuntime.Trace(isError ? \"ERROR: \" + message : \"INFO: \" + message);\n}\n\n// 3. Use alarm system for critical notifications\nfunction triggerSystemAlarm(alarmText, priority) {\n    // This would integrate with WinCC alarm system\n    Tags(\"SYSTEM_ALARM_TEXT\").Write(alarmText);\n    Tags(\"SYSTEM_ALARM_PRIORITY\").Write(priority);\n    Tags(\"SYSTEM_ALARM_TRIGGER\").Write(true);\n    \n    HMIRuntime.Trace(\"ALARM TRIGGERED: \" + alarmText);\n}\n\n// 4. Show popup screen for important messages\nfunction showImportantMessage(title, message) {\n    // Store message data for popup screen\n    Tags(\"POPUP_TITLE\").Write(title);\n    Tags(\"POPUP_MESSAGE\").Write(message);\n    \n    // Open popup screen\n    try {\n        HMIRuntime.Screens.Show(\"MessagePopup\");\n        HMIRuntime.Trace(\"Message popup shown: \" + title);\n    } catch (error) {\n        HMIRuntime.Trace(\"Failed to show popup: \" + error.message);\n        // Fallback to trace message\n        HMIRuntime.Trace(\"MESSAGE: \" + title + \" - \" + message);\n    }\n}\n\n// Usage examples\nshowDebugMessage(\"Motor startup sequence initiated\");\nshowStatusOnScreen(\"System ready for operation\", false);\ntriggerSystemAlarm(\"High temperature detected in Tank 1\", \"HIGH\");\nshowImportantMessage(\"Production Complete\", \"Daily production target reached: 1000 units\");"
  },
  {
    "id": "external-program-execution",
    "title": "External Program Execution",
    "category": "System Integration",
    "description": "Start external programs from WinCC runtime (limited on PC, full on Panel).",
    "isCustom": false,
    "code": "// External Program Execution - Siemens WinCC Unified\n// NOTE: StartProgram function has different capabilities on PC vs Unified Comfort Panel\n\n// For Unified Comfort Panel - Can start programs with user interfaces\nfunction openDocumentViewer(filePath) {\n    try {\n        // Open LibreOffice on Unified Comfort Panel\n        HMIRuntime.StartProgram(\"/opt/siemens/App_Restriction/runLibreoffice.sh\", filePath);\n        HMIRuntime.Trace(\"Document viewer opened: \" + filePath);\n    } catch (error) {\n        HMIRuntime.Trace(\"Failed to open document viewer: \" + error.message);\n    }\n}\n\nfunction openPDFViewer(pdfPath) {\n    try {\n        // Open PDF viewer on Unified Comfort Panel\n        HMIRuntime.StartProgram(\"/opt/siemens/App_Restriction/runOkular.sh\", pdfPath);\n        HMIRuntime.Trace(\"PDF viewer opened: \" + pdfPath);\n    } catch (error) {\n        HMIRuntime.Trace(\"Failed to open PDF viewer: \" + error.message);\n    }\n}\n\nfunction openWebBrowser(url) {\n    try {\n        // Open web browser on Unified Comfort Panel\n        HMIRuntime.StartProgram(\"/opt/siemens/App_Restriction/runChromium.sh\", url);\n        HMIRuntime.Trace(\"Web browser opened: \" + url);\n    } catch (error) {\n        HMIRuntime.Trace(\"Failed to open web browser: \" + error.message);\n    }\n}\n\n// For PC Runtime - Limited to programs without user interface\nfunction executeBackgroundTask() {\n    try {\n        // On PC runtime, can only start background processes\n        // For programs with UI, need to use ODK or Open Pipe\n        HMIRuntime.Trace(\"Background task execution initiated\");\n        \n        // Alternative: Write command to file for external monitoring\n        var command = \"START_BACKUP_\" + new Date().toISOString();\n        HMIRuntime.FileSystem.WriteFile(\"C:\\\\Commands\\\\backup_cmd.txt\", command, \"utf8\");\n        HMIRuntime.Trace(\"Command file written for external execution\");\n    } catch (error) {\n        HMIRuntime.Trace(\"Failed to execute background task: \" + error.message);\n    }\n}\n\n// Usage examples\n// openDocumentViewer(\"/production/reports/daily_report.xlsx\");\n// openPDFViewer(\"/manuals/equipment_manual.pdf\");\n// openWebBrowser(\"http://production-dashboard.local\");\nexecuteBackgroundTask();\n\nHMIRuntime.Trace(\"External program execution system ready\");"
  },
  {
    "id": "udt-user-defined-types",
    "title": "UDT (User Defined Type) Access",
    "category": "Tag Operations",
    "description": "Access individual elements of User Defined Types in WinCC.",
    "isCustom": false,
    "code": "// UDT Access - Siemens WinCC Unified\n// Access individual elements of User Defined Types (UDTs)\n\n// Example UDT structure: Motor_UDT with elements:\n// - Name (String), Speed (Real), Current (Real), Temperature (Real)\n// - Running (Bool), FaultCode (Int)\n\n// Read UDT elements individually\nfunction readMotorUDT(motorInstance) {\n    try {\n        // Access UDT elements using dot notation: UDT_Instance.Element_Name\n        var motorName = Tags(motorInstance + '.Name').Read();\n        var motorSpeed = Tags(motorInstance + '.Speed').Read();\n        var motorCurrent = Tags(motorInstance + '.Current').Read();\n        var motorTemp = Tags(motorInstance + '.Temperature').Read();\n        var isRunning = Tags(motorInstance + '.Running').Read();\n        var faultCode = Tags(motorInstance + '.FaultCode').Read();\n        \n        HMIRuntime.Trace(\"Motor UDT Data for \" + motorInstance + \":\");\n        HMIRuntime.Trace(\"  Name: \" + motorName);\n        HMIRuntime.Trace(\"  Speed: \" + motorSpeed + \" RPM\");\n        HMIRuntime.Trace(\"  Current: \" + motorCurrent + \" A\");\n        HMIRuntime.Trace(\"  Temperature: \" + motorTemp + \"°C\");\n        HMIRuntime.Trace(\"  Running: \" + isRunning);\n        HMIRuntime.Trace(\"  Fault Code: \" + faultCode);\n        \n        return {\n            name: motorName, speed: motorSpeed, current: motorCurrent,\n            temperature: motorTemp, running: isRunning, faultCode: faultCode\n        };\n    } catch (error) {\n        HMIRuntime.Trace(\"Error reading motor UDT: \" + error.message);\n        return null;\n    }\n}\n\n// Write to UDT elements\nfunction updateMotorSetpoints(motorInstance, newSpeed, startMotor) {\n    try {\n        Tags(motorInstance + '.SpeedSetpoint').Write(newSpeed);\n        Tags(motorInstance + '.StartCommand').Write(startMotor);\n        \n        HMIRuntime.Trace(\"Motor \" + motorInstance + \" updated - Speed: \" + newSpeed + \", Start: \" + startMotor);\n        return true;\n    } catch (error) {\n        HMIRuntime.Trace(\"Error updating motor UDT: \" + error.message);\n        return false;\n    }\n}\n\n// Usage examples\nvar motor1Data = readMotorUDT(\"Motor_001\");\nif (motor1Data && motor1Data.temperature > 85) {\n    HMIRuntime.Trace(\"WARNING: Motor 1 temperature high!\");\n}\n\nupdateMotorSetpoints(\"Motor_002\", 1450, true);"
  },
  {
    "id": "high-precision-timestamps",
    "title": "High-Precision Timestamps",
    "category": "JavaScript Basics",
    "description": "Work with nanosecond precision timestamps using WinCC Math object.",
    "isCustom": false,
    "code": "// High-Precision Timestamps - Siemens WinCC Unified\n// Use Math.DatePrecise for nanosecond precision (WinCC-specific)\n\n// Create high-precision timestamp\nfunction createPreciseTimestamp() {\n    try {\n        // Math.DatePrecise provides 100ns resolution as 64-bit integer\n        var preciseTime = new Math.DatePrecise();\n        var timestampValue = preciseTime.Value; // 64-bit integer value\n        \n        HMIRuntime.Trace(\"Precise timestamp (100ns ticks): \" + timestampValue);\n        return preciseTime;\n    } catch (error) {\n        HMIRuntime.Trace(\"High-precision timestamps not available: \" + error.message);\n        // Fallback to standard Date\n        return new Date();\n    }\n}\n\n// Log events with precise timing\nfunction logPreciseEvent(eventName, eventData) {\n    var timestamp = createPreciseTimestamp();\n    var standardTime = new Date().toISOString();\n    \n    var logEntry = {\n        event: eventName,\n        data: eventData,\n        preciseTime: timestamp.Value || timestamp.getTime(),\n        standardTime: standardTime\n    };\n    \n    HMIRuntime.Trace(\"PRECISE LOG: \" + JSON.stringify(logEntry));\n    return logEntry;\n}\n\n// Measure precise duration between events\nvar preciseTimer = {\n    startTime: null,\n    \n    start: function() {\n        this.startTime = createPreciseTimestamp();\n        HMIRuntime.Trace(\"Precise timer started\");\n    },\n    \n    stop: function(operationName) {\n        if (!this.startTime) {\n            HMIRuntime.Trace(\"Timer not started\");\n            return null;\n        }\n        \n        var endTime = createPreciseTimestamp();\n        var duration;\n        \n        if (this.startTime.Value && endTime.Value) {\n            // Calculate duration in 100ns ticks\n            duration = endTime.Value - this.startTime.Value;\n            var milliseconds = duration / 10000; // Convert to milliseconds\n            HMIRuntime.Trace(\"Operation '\" + operationName + \"' took \" + milliseconds.toFixed(3) + \" ms (precise)\");\n        } else {\n            // Fallback to standard timing\n            duration = endTime.getTime() - this.startTime.getTime();\n            HMIRuntime.Trace(\"Operation '\" + operationName + \"' took \" + duration + \" ms (standard)\");\n        }\n        \n        this.startTime = null;\n        return duration;\n    }\n};\n\n// Usage examples\nlogPreciseEvent(\"System Startup\", {version: \"1.0\", operator: \"John\"});\npreciseTimer.start();\n// ... perform operation ...\npreciseTimer.stop(\"Critical operation\");\n\nHMIRuntime.Trace(\"High-precision timestamp system initialized\");"
  }
]