{
  "metadata": {
    "version": "1.0",
    "model": "simple-tfidf-wincc",
    "dimensions": 300,
    "total_templates": 69,
    "created": "2025-07-01T14:35:36.857Z",
    "description": "Lightweight TF-IDF embeddings optimized for WinCC JavaScript templates"
  },
  "templates": [
    {
      "id": "tag-read",
      "title": "Read Tag Value",
      "category": "Tag Operations",
      "description": "Safely reads values from WinCC tags with error handling.",
      "code": "// Read Tag Value - Siemens WinCC Unified\nfunction readTagValue(tagName) {\n    try {\n        var tagValue = Tags(tagName).Read();\n        HMIRuntime.Trace(\"Read tag: \" + tagName + \" = \" + tagValue);\n        return tagValue;\n    } catch (error) {\n        HMIRuntime.Trace(\"Error reading tag: \" + error.message);\n        return null;\n    }\n}\n\n// Example usage:\nvar motorSpeed = readTagValue(\"Motor1_Speed\");\nif (motorSpeed !== null) {\n    HMIRuntime.Trace(\"Motor speed: \" + motorSpeed + \" RPM\");\n}"
    },
    {
      "id": "tag-write",
      "title": "Write Tag Value",
      "category": "Tag Operations",
      "description": "Writes values to WinCC tags with validation and error handling.",
      "code": "// Write Tag Value - Siemens WinCC Unified\nfunction writeTagValue(tagName, value) {\n    try {\n        if (tagName === null || tagName === \"\") {\n            throw new Error(\"Tag name cannot be empty\");\n        }\n        Tags(tagName).Write(value);\n        HMIRuntime.Trace(\"Wrote tag: \" + tagName + \" = \" + value);\n        return true;\n    } catch (error) {\n        HMIRuntime.Trace(\"Error writing tag: \" + error.message);\n        return false;\n    }\n}\n\n// Example usage:\nvar success = writeTagValue(\"Motor1_SetPoint\", 1500);"
    },
    {
      "id": "array-sorting",
      "title": "Array Sorting",
      "category": "JavaScript Basics",
      "description": "Sort arrays including the missing Siemens documentation example.",
      "code": "// Array Sorting - Siemens WinCC Unified\n// The missing example from Siemens documentation:\nvar array = ['SIMATIC', 'WinCC', 'Unified'];\narray.sort();\nHMIRuntime.Trace(\"Sorted array: \" + array.join(\", \"));\n\n// Industrial examples:\nvar equipment = ['MOTOR_003', 'PUMP_001', 'VALVE_002'];\nequipment.sort();\nHMIRuntime.Trace(\"Equipment sorted: \" + equipment.join(\", \"));\n\n// Sort numbers:\nvar temperatures = [85.2, 92.1, 78.5, 88.9];\ntemperatures.sort(function(a, b) { return a - b; });\nHMIRuntime.Trace(\"Temperatures: \" + temperatures.join(\"°C, \"));"
    },
    {
      "id": "screen-navigate",
      "title": "Navigate to Screen",
      "category": "Screen Navigation",
      "description": "Navigate between different screens with error handling.",
      "code": "// Navigate to Screen - Siemens WinCC Unified\nfunction navigateToScreen(screenName) {\n    try {\n        HMIRuntime.Screens.Show(screenName);\n        HMIRuntime.Trace(\"Navigated to screen: \" + screenName);\n        return true;\n    } catch (error) {\n        HMIRuntime.Trace(\"Error navigating: \" + error.message);\n        return false;\n    }\n}\n\n// Example usage:\nnavigateToScreen(\"MainOverview\");\nnavigateToScreen(\"AlarmView\");"
    },
    {
      "id": "alarm-acknowledge",
      "title": "Acknowledge Alarm",
      "category": "Alarm Management",
      "description": "Acknowledge alarms with proper error handling.",
      "code": "// Acknowledge Alarm - Siemens WinCC Unified\nfunction acknowledgeAlarm(alarmId) {\n    try {\n        HMIRuntime.Alarms.Acknowledge(alarmId);\n        HMIRuntime.Trace(\"Acknowledged alarm: \" + alarmId);\n        return true;\n    } catch (error) {\n        HMIRuntime.Trace(\"Error acknowledging alarm: \" + error.message);\n        return false;\n    }\n}\n\n// Example usage:\nacknowledgeAlarm(\"ALM_001\");\nacknowledgeAlarm(\"TEMP_HIGH_ALARM\");"
    },
    {
      "id": "array-search",
      "title": "Array Search and Find",
      "category": "JavaScript Basics",
      "description": "Search for values in arrays with different methods.",
      "code": "// Array Search - Siemens WinCC Unified\n// Find equipment in array\nvar equipment = ['MOTOR_001', 'PUMP_002', 'VALVE_003'];\nvar motorIndex = equipment.indexOf('MOTOR_001');\nHMIRuntime.Trace(\"Motor found at index: \" + motorIndex);\n\n// Check if equipment exists\nvar hasPump = equipment.indexOf('PUMP_002') !== -1;\nHMIRuntime.Trace(\"Has pump: \" + hasPump);\n\n// Find alarm by type\nvar alarms = ['TEMP_HIGH', 'PRESSURE_LOW', 'MOTOR_FAULT'];\nvar tempAlarm = alarms.find(function(alarm) {\n    return alarm.indexOf('TEMP') !== -1;\n});\nHMIRuntime.Trace(\"Found temperature alarm: \" + tempAlarm);"
    },
    {
      "id": "array-filter",
      "title": "Array Filtering",
      "category": "JavaScript Basics",
      "description": "Filter arrays to find specific equipment or values.",
      "code": "// Array Filtering - Siemens WinCC Unified\n// Filter motors from equipment list\nvar equipment = ['MOTOR_001', 'PUMP_002', 'MOTOR_003', 'VALVE_004'];\nvar motors = equipment.filter(function(item) {\n    return item.indexOf('MOTOR') !== -1;\n});\nHMIRuntime.Trace(\"Motors found: \" + motors.join(\", \"));\n\n// Filter high temperatures\nvar temperatures = [78.5, 92.1, 85.2, 105.3, 88.9];\nvar highTemps = temperatures.filter(function(temp) {\n    return temp > 90;\n});\nHMIRuntime.Trace(\"High temperatures: \" + highTemps.join(\"°C, \"));\n\n// Filter active alarms\nvar alarmStates = [true, false, true, false];\nvar activeCount = alarmStates.filter(function(active) {\n    return active === true;\n}).length;\nHMIRuntime.Trace(\"Active alarms: \" + activeCount);"
    },
    {
      "id": "array-map",
      "title": "Array Transformation",
      "category": "JavaScript Basics",
      "description": "Transform array values for calculations and formatting.",
      "code": "// Array Transformation - Siemens WinCC Unified\n// Convert temperatures to Fahrenheit\nvar celsiusTemps = [25.0, 30.5, 22.8, 35.2];\nvar fahrenheitTemps = celsiusTemps.map(function(celsius) {\n    return (celsius * 9 / 5) + 32;\n});\nHMIRuntime.Trace(\"Fahrenheit: \" + fahrenheitTemps.join(\"°F, \"));\n\n// Add units to equipment names\nvar equipment = ['MOTOR_001', 'PUMP_002', 'VALVE_003'];\nvar equipmentWithUnits = equipment.map(function(item) {\n    return item + \"_UNIT\";\n});\nHMIRuntime.Trace(\"With units: \" + equipmentWithUnits.join(\", \"));\n\n// Format numbers with decimals\nvar values = [123.456, 789.123, 456.789];\nvar formatted = values.map(function(val) {\n    return val.toFixed(2);\n});\nHMIRuntime.Trace(\"Formatted: \" + formatted.join(\", \"));"
    },
    {
      "id": "array-join",
      "title": "Array Joining and Combining",
      "category": "JavaScript Basics",
      "description": "Join arrays and combine multiple arrays together.",
      "code": "// Array Joining - Siemens WinCC Unified\n// Join equipment names for display\nvar motors = ['MOTOR_001', 'MOTOR_002', 'MOTOR_003'];\nvar motorList = motors.join(', ');\nHMIRuntime.Trace(\"Motor list: \" + motorList);\n\n// Combine different equipment types\nvar pumps = ['PUMP_001', 'PUMP_002'];\nvar valves = ['VALVE_001', 'VALVE_002', 'VALVE_003'];\nvar allEquipment = motors.concat(pumps, valves);\nHMIRuntime.Trace(\"All equipment: \" + allEquipment.join(\", \"));\n\n// Create status report\nvar statuses = ['Running', 'Stopped', 'Maintenance'];\nvar statusReport = \"Equipment Status: \" + statuses.join(\" | \");\nHMIRuntime.Trace(statusReport);"
    },
    {
      "id": "array-reduce",
      "title": "Array Calculations and Totals",
      "category": "JavaScript Basics",
      "description": "Calculate totals, averages, and summaries from arrays.",
      "code": "// Array Calculations - Siemens WinCC Unified\n// Calculate total production\nvar production = [125, 150, 200, 175, 300];\nvar totalProduction = 0;\nfor (var i = 0; i < production.length; i++) {\n    totalProduction = totalProduction + production[i];\n}\nHMIRuntime.Trace(\"Total production: \" + totalProduction + \" units\");\n\n// Calculate average temperature\nvar temperatures = [78.5, 82.1, 85.2, 79.8, 81.4];\nvar totalTemp = 0;\nfor (var i = 0; i < temperatures.length; i++) {\n    totalTemp = totalTemp + temperatures[i];\n}\nvar averageTemp = totalTemp / temperatures.length;\nHMIRuntime.Trace(\"Average temperature: \" + averageTemp.toFixed(2) + \"°C\");\n\n// Count running equipment\nvar equipmentStatus = ['Running', 'Stopped', 'Running', 'Maintenance', 'Running'];\nvar runningCount = 0;\nfor (var i = 0; i < equipmentStatus.length; i++) {\n    if (equipmentStatus[i] === 'Running') {\n        runningCount = runningCount + 1;\n    }\n}\nHMIRuntime.Trace(\"Running equipment: \" + runningCount + \" out of \" + equipmentStatus.length);"
    },
    {
      "id": "string-concatenation",
      "title": "String Concatenation and Building",
      "category": "JavaScript Basics",
      "description": "Join multiple strings for display messages and file paths.",
      "code": "// String Concatenation - Siemens WinCC Unified\n// Build equipment names\nvar equipmentType = \"MOTOR\";\nvar equipmentNumber = \"001\";\nvar fullName = equipmentType + \"_\" + equipmentNumber;\nHMIRuntime.Trace(\"Equipment name: \" + fullName);\n\n// Build file paths\nvar basePath = \"C:\\\\Data\\\\\";\nvar fileName = \"ProductionLog.txt\";\nvar fullPath = basePath + fileName;\nHMIRuntime.Trace(\"File path: \" + fullPath);\n\n// Build alarm messages\nvar alarmType = \"Temperature\";\nvar location = \"Tank 1\";\nvar value = \"95.5°C\";\nvar alarmMessage = alarmType + \" alarm in \" + location + \": \" + value;\nHMIRuntime.Trace(\"Alarm: \" + alarmMessage);\n\n// Build status display\nvar motorName = \"Motor 1\";\nvar speed = 1500;\nvar status = \"Running\";\nvar displayText = motorName + \" (\" + speed + \" RPM) - \" + status;\nHMIRuntime.Trace(\"Display: \" + displayText);"
    },
    {
      "id": "string-search",
      "title": "String Searching and Finding",
      "category": "JavaScript Basics",
      "description": "Find text within strings and search for keywords.",
      "code": "// String Searching - Siemens WinCC Unified\n// Find equipment type in tag name\nvar tagName = \"MOTOR_001_Speed\";\nvar motorPosition = tagName.indexOf(\"MOTOR\");\nHMIRuntime.Trace(\"Motor found at position: \" + motorPosition);\n\n// Check if tag is motor-related\nvar isMotorTag = tagName.indexOf(\"MOTOR\") !== -1;\nHMIRuntime.Trace(\"Is motor tag: \" + isMotorTag);\n\n// Search for alarm keywords\nvar alarmMessage = \"High temperature detected in Tank 1\";\nvar hasTemperature = alarmMessage.indexOf(\"temperature\") !== -1;\nvar hasTank = alarmMessage.indexOf(\"Tank\") !== -1;\nHMIRuntime.Trace(\"Temperature alarm: \" + hasTemperature);\nHMIRuntime.Trace(\"Tank location: \" + hasTank);\n\n// Find file extension\nvar fileName = \"ProductionData.csv\";\nvar dotPosition = fileName.indexOf(\".\");\nif (dotPosition !== -1) {\n    var extension = fileName.substring(dotPosition + 1);\n    HMIRuntime.Trace(\"File extension: \" + extension);\n}"
    },
    {
      "id": "string-split",
      "title": "String Splitting and Parsing",
      "category": "JavaScript Basics",
      "description": "Split comma-separated values and parse data strings.",
      "code": "// String Splitting - Siemens WinCC Unified\n// Parse equipment list\nvar equipmentList = \"MOTOR_001,PUMP_002,VALVE_003\";\nvar equipment = equipmentList.split(\",\");\nHMIRuntime.Trace(\"Equipment count: \" + equipment.length);\nfor (var i = 0; i < equipment.length; i++) {\n    HMIRuntime.Trace(\"Equipment \" + (i + 1) + \": \" + equipment[i]);\n}\n\n// Parse tag name parts\nvar tagName = \"MOTOR_001_Speed_RPM\";\nvar parts = tagName.split(\"_\");\nvar equipmentType = parts[0];  // MOTOR\nvar equipmentId = parts[1];    // 001\nvar parameter = parts[2];      // Speed\nHMIRuntime.Trace(\"Type: \" + equipmentType + \", ID: \" + equipmentId + \", Parameter: \" + parameter);\n\n// Parse CSV data line\nvar csvLine = \"2024-12-27,Motor1,1500,Running\";\nvar data = csvLine.split(\",\");\nvar date = data[0];\nvar name = data[1];\nvar speed = data[2];\nvar status = data[3];\nHMIRuntime.Trace(\"Date: \" + date + \", Name: \" + name + \", Speed: \" + speed + \", Status: \" + status);"
    },
    {
      "id": "string-case",
      "title": "String Case Conversion",
      "category": "JavaScript Basics",
      "description": "Convert strings to upper/lower case for display consistency.",
      "code": "// String Case Conversion - Siemens WinCC Unified\n// Format equipment names for display\nvar equipmentName = \"motor_001\";\nvar displayName = equipmentName.toUpperCase();\nHMIRuntime.Trace(\"Display name: \" + displayName);\n\n// Format user input\nvar userInput = \"PUMP_STATUS\";\nvar searchTerm = userInput.toLowerCase();\nHMIRuntime.Trace(\"Search term: \" + searchTerm);\n\n// Standardize alarm messages\nvar alarmType = \"temperature high\";\nvar standardAlarm = alarmType.toUpperCase();\nHMIRuntime.Trace(\"Standard alarm: \" + standardAlarm);\n\n// Format file names\nvar fileName = \"PRODUCTION_LOG.TXT\";\nvar lowerFileName = fileName.toLowerCase();\nHMIRuntime.Trace(\"File name: \" + lowerFileName);\n\n// Mixed case formatting\nvar rawText = \"motor status\";\nvar firstChar = rawText.charAt(0).toUpperCase();\nvar restOfText = rawText.slice(1).toLowerCase();\nvar formattedText = firstChar + restOfText;\nHMIRuntime.Trace(\"Formatted: \" + formattedText);"
    },
    {
      "id": "string-trim",
      "title": "String Trimming and Cleaning",
      "category": "JavaScript Basics",
      "description": "Remove spaces and clean user input for validation.",
      "code": "// String Trimming - Siemens WinCC Unified\n// Clean user input\nvar userInput = \"  MOTOR_001  \";\nvar cleanInput = userInput.trim();\nHMIRuntime.Trace(\"Original: '\" + userInput + \"'\");\nHMIRuntime.Trace(\"Cleaned: '\" + cleanInput + \"'\");\n\n// Clean recipe name\nvar recipeName = \"   Recipe A   \";\nvar cleanRecipe = recipeName.trim();\nif (cleanRecipe !== \"\") {\n    HMIRuntime.Trace(\"Valid recipe: \" + cleanRecipe);\n} else {\n    HMIRuntime.Trace(\"Empty recipe name\");\n}\n\n// Remove extra spaces from alarm message\nvar alarmMessage = \"  High   temperature   in  Tank 1  \";\nvar cleanMessage = alarmMessage.trim();\n// Replace multiple spaces with single space\nvar words = cleanMessage.split(\" \");\nvar cleanWords = [];\nfor (var i = 0; i < words.length; i++) {\n    if (words[i] !== \"\") {\n        cleanWords.push(words[i]);\n    }\n}\nvar finalMessage = cleanWords.join(\" \");\nHMIRuntime.Trace(\"Clean message: '\" + finalMessage + \"'\");\n\n// Validate tag name\nvar tagName = \"  MOTOR_001_Speed  \";\nvar validTag = tagName.trim();\nif (validTag.length > 0) {\n    HMIRuntime.Trace(\"Valid tag: \" + validTag);\n}"
    },
    {
      "id": "math-basic",
      "title": "Basic Math Functions",
      "category": "JavaScript Basics",
      "description": "Min/Max functions for alarm limits and safety checks.",
      "code": "// Basic Math Functions - Siemens WinCC Unified\n// Safety limit checking\nvar currentTemp = 95.5;\nvar maxTemp = 100.0;\nvar minTemp = 0.0;\n\n// Ensure temperature stays within limits\nvar safeTemp = Math.min(currentTemp, maxTemp);\nHMIRuntime.Trace(\"Safe temperature: \" + safeTemp + \"°C\");\n\n// Check minimum value\nvar validTemp = Math.max(safeTemp, minTemp);\nHMIRuntime.Trace(\"Valid temperature: \" + validTemp + \"°C\");\n\n// Find highest and lowest values in array\nvar temperatures = [78.5, 92.1, 85.2, 105.3, 88.9];\nvar highestTemp = Math.max.apply(null, temperatures);\nvar lowestTemp = Math.min.apply(null, temperatures);\nHMIRuntime.Trace(\"Highest: \" + highestTemp + \"°C\");\nHMIRuntime.Trace(\"Lowest: \" + lowestTemp + \"°C\");\n\n// Absolute values for difference calculations\nvar setPoint = 80.0;\nvar actualValue = 78.5;\nvar difference = Math.abs(actualValue - setPoint);\nHMIRuntime.Trace(\"Temperature difference: \" + difference + \"°C\");"
    },
    {
      "id": "math-advanced",
      "title": "Advanced Calculations",
      "category": "JavaScript Basics",
      "description": "Percentage calculations for production efficiency.",
      "code": "// Advanced Calculations - Siemens WinCC Unified\n// Production efficiency calculation\nvar goodParts = 850;\nvar totalParts = 1000;\nvar efficiency = (goodParts / totalParts) * 100;\nHMIRuntime.Trace(\"Production efficiency: \" + efficiency.toFixed(2) + \"%\");\n\n// Power calculation\nvar voltage = 230;  // Volts\nvar current = 10;   // Amps\nvar power = voltage * current;\nHMIRuntime.Trace(\"Motor power: \" + power + \" Watts\");\n\n// Average calculation\nvar readings = [78.5, 82.1, 85.2, 79.8, 81.4];\nvar total = 0;\nfor (var i = 0; i < readings.length; i++) {\n    total = total + readings[i];\n}\nvar average = total / readings.length;\nHMIRuntime.Trace(\"Average reading: \" + average.toFixed(2));\n\n// Round values for display\nvar preciseValue = 123.456789;\nvar rounded = Math.round(preciseValue * 100) / 100; // Round to 2 decimals\nHMIRuntime.Trace(\"Rounded value: \" + rounded);\n\n// Square root for standard deviation\nvar variance = 25.0;\nvar standardDeviation = Math.sqrt(variance);\nHMIRuntime.Trace(\"Standard deviation: \" + standardDeviation);"
    },
    {
      "id": "math-formatting",
      "title": "Number Formatting",
      "category": "JavaScript Basics",
      "description": "Format numbers for display with proper decimals.",
      "code": "// Number Formatting - Siemens WinCC Unified\n// Format temperature with 2 decimals\nvar temperature = 78.456789;\nvar formattedTemp = temperature.toFixed(2);\nHMIRuntime.Trace(\"Temperature: \" + formattedTemp + \"°C\");\n\n// Format pressure with 1 decimal\nvar pressure = 123.456;\nvar formattedPressure = pressure.toFixed(1);\nHMIRuntime.Trace(\"Pressure: \" + formattedPressure + \" bar\");\n\n// Format large numbers with separators\nvar productionCount = 1234567;\nvar formattedCount = productionCount.toLocaleString();\nHMIRuntime.Trace(\"Production: \" + formattedCount + \" units\");\n\n// Format percentage\nvar efficiency = 0.8567;\nvar efficiencyPercent = (efficiency * 100).toFixed(1) + \"%\";\nHMIRuntime.Trace(\"Efficiency: \" + efficiencyPercent);\n\n// Format currency (for cost calculations)\nvar materialCost = 1234.56;\nvar formattedCost = \"$\" + materialCost.toFixed(2);\nHMIRuntime.Trace(\"Material cost: \" + formattedCost);\n\n// Remove decimals for integer display\nvar speed = 1500.789;\nvar integerSpeed = Math.floor(speed);\nHMIRuntime.Trace(\"Motor speed: \" + integerSpeed + \" RPM\");"
    },
    {
      "id": "date-current",
      "title": "Current Date and Time",
      "category": "JavaScript Basics",
      "description": "Get current timestamp for logging and displays.",
      "code": "// Current Date/Time - Siemens WinCC Unified\n// Get current date and time\nvar now = new Date();\nHMIRuntime.Trace(\"Current date/time: \" + now.toString());\n\n// Get individual components\nvar year = now.getFullYear();\nvar month = now.getMonth() + 1; // Month is 0-based\nvar day = now.getDate();\nvar hours = now.getHours();\nvar minutes = now.getMinutes();\nvar seconds = now.getSeconds();\n\nHMIRuntime.Trace(\"Year: \" + year);\nHMIRuntime.Trace(\"Month: \" + month);\nHMIRuntime.Trace(\"Day: \" + day);\nHMIRuntime.Trace(\"Time: \" + hours + \":\" + minutes + \":\" + seconds);\n\n// Create timestamp for logging\nvar timestamp = year + \"-\" + month + \"-\" + day + \" \" + hours + \":\" + minutes + \":\" + seconds;\nHMIRuntime.Trace(\"Log timestamp: \" + timestamp);\n\n// Get day of week\nvar dayNames = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\nvar dayOfWeek = dayNames[now.getDay()];\nHMIRuntime.Trace(\"Day of week: \" + dayOfWeek);"
    },
    {
      "id": "date-formatting",
      "title": "Date Formatting",
      "category": "JavaScript Basics",
      "description": "Format dates for reports and displays.",
      "code": "// Date Formatting - Siemens WinCC Unified\n// Create a date for formatting\nvar date = new Date();\n\n// Format for local display\nvar localDate = date.toLocaleDateString();\nHMIRuntime.Trace(\"Local date: \" + localDate);\n\n// Format for local time\nvar localTime = date.toLocaleTimeString();\nHMIRuntime.Trace(\"Local time: \" + localTime);\n\n// Custom format: YYYY-MM-DD\nvar year = date.getFullYear();\nvar month = (date.getMonth() + 1).toString();\nvar day = date.getDate().toString();\n// Add leading zeros\nif (month.length === 1) month = \"0\" + month;\nif (day.length === 1) day = \"0\" + day;\nvar customDate = year + \"-\" + month + \"-\" + day;\nHMIRuntime.Trace(\"Custom date: \" + customDate);\n\n// Custom format: DD/MM/YYYY HH:MM\nvar hours = date.getHours().toString();\nvar minutes = date.getMinutes().toString();\nif (hours.length === 1) hours = \"0\" + hours;\nif (minutes.length === 1) minutes = \"0\" + minutes;\nvar displayFormat = day + \"/\" + month + \"/\" + year + \" \" + hours + \":\" + minutes;\nHMIRuntime.Trace(\"Display format: \" + displayFormat);\n\n// File name format: YYYYMMDD_HHMMSS\nvar fileFormat = year + month + day + \"_\" + hours + minutes + date.getSeconds();\nHMIRuntime.Trace(\"File format: \" + fileFormat);"
    },
    {
      "id": "date-calculations",
      "title": "Date Calculations",
      "category": "JavaScript Basics",
      "description": "Calculate time differences and schedules.",
      "code": "// Date Calculations - Siemens WinCC Unified\n// Calculate time difference\nvar startTime = new Date();\n// Simulate some process time\nvar endTime = new Date(startTime.getTime() + 5000); // Add 5 seconds\n\nvar timeDifference = endTime - startTime; // Difference in milliseconds\nvar secondsDifference = timeDifference / 1000;\nHMIRuntime.Trace(\"Process time: \" + secondsDifference + \" seconds\");\n\n// Calculate hours difference\nvar shiftStart = new Date();\nshiftStart.setHours(8, 0, 0); // 8:00 AM\nvar shiftEnd = new Date();\nshiftEnd.setHours(16, 0, 0); // 4:00 PM\n\nvar shiftDuration = (shiftEnd - shiftStart) / (1000 * 60 * 60); // Convert to hours\nHMIRuntime.Trace(\"Shift duration: \" + shiftDuration + \" hours\");\n\n// Add days to current date (maintenance schedule)\nvar today = new Date();\nvar maintenanceDate = new Date(today.getTime() + (30 * 24 * 60 * 60 * 1000)); // Add 30 days\nHMIRuntime.Trace(\"Next maintenance: \" + maintenanceDate.toLocaleDateString());\n\n// Calculate age of equipment\nvar installDate = new Date(2020, 0, 15); // January 15, 2020\nvar currentDate = new Date();\nvar ageInDays = Math.floor((currentDate - installDate) / (1000 * 60 * 60 * 24));\nvar ageInYears = Math.floor(ageInDays / 365);\nHMIRuntime.Trace(\"Equipment age: \" + ageInYears + \" years (\" + ageInDays + \" days)\");"
    },
    {
      "id": "date-timezone",
      "title": "Time Zone Handling",
      "category": "JavaScript Basics",
      "description": "Convert between local and UTC time for global operations.",
      "code": "// Time Zone Handling - Siemens WinCC Unified\n// Get current date in different formats\nvar now = new Date();\n\n// Local time\nHMIRuntime.Trace(\"Local time: \" + now.toString());\n\n// UTC time\nvar utcTime = now.toUTCString();\nHMIRuntime.Trace(\"UTC time: \" + utcTime);\n\n// ISO format (good for data exchange)\nvar isoTime = now.toISOString();\nHMIRuntime.Trace(\"ISO time: \" + isoTime);\n\n// Get timezone offset\nvar timezoneOffset = now.getTimezoneOffset(); // Minutes\nvar offsetHours = timezoneOffset / 60;\nHMIRuntime.Trace(\"Timezone offset: \" + offsetHours + \" hours\");\n\n// Convert local to UTC manually\nvar utcYear = now.getUTCFullYear();\nvar utcMonth = now.getUTCMonth() + 1;\nvar utcDay = now.getUTCDate();\nvar utcHours = now.getUTCHours();\nvar utcMinutes = now.getUTCMinutes();\nvar manualUTC = utcYear + \"-\" + utcMonth + \"-\" + utcDay + \" \" + utcHours + \":\" + utcMinutes;\nHMIRuntime.Trace(\"Manual UTC: \" + manualUTC);\n\n// Create UTC timestamp for global logging\nvar utcTimestamp = Date.UTC(now.getFullYear(), now.getMonth(), now.getDate(), now.getHours(), now.getMinutes());\nHMIRuntime.Trace(\"UTC timestamp: \" + utcTimestamp);"
    },
    {
      "id": "conversion-string-number",
      "title": "String to Number Conversion",
      "category": "JavaScript Basics",
      "description": "Convert user input to numeric values safely.",
      "code": "// String to Number Conversion - Siemens WinCC Unified\n// Convert setpoint from user input\nvar userInput = \"75.5\";\nvar setpoint = parseFloat(userInput);\nif (!isNaN(setpoint)) {\n    HMIRuntime.Trace(\"Valid setpoint: \" + setpoint + \"°C\");\n} else {\n    HMIRuntime.Trace(\"Invalid input: \" + userInput);\n}\n\n// Convert integer values\nvar speedInput = \"1500\";\nvar motorSpeed = parseInt(speedInput);\nif (!isNaN(motorSpeed)) {\n    HMIRuntime.Trace(\"Motor speed: \" + motorSpeed + \" RPM\");\n}\n\n// Handle invalid input safely\nvar invalidInput = \"abc123\";\nvar result = parseFloat(invalidInput);\nif (isNaN(result)) {\n    HMIRuntime.Trace(\"Error: Cannot convert '\" + invalidInput + \"' to number\");\n    result = 0; // Use default value\n    HMIRuntime.Trace(\"Using default value: \" + result);\n}\n\n// Convert multiple values from comma-separated string\nvar valuesString = \"10.5,25.0,37.5,42.0\";\nvar valueArray = valuesString.split(\",\");\nvar numbers = [];\nfor (var i = 0; i < valueArray.length; i++) {\n    var num = parseFloat(valueArray[i]);\n    if (!isNaN(num)) {\n        numbers.push(num);\n    }\n}\nHMIRuntime.Trace(\"Numbers: \" + numbers.join(\", \"));"
    },
    {
      "id": "conversion-number-string",
      "title": "Number to String Conversion",
      "category": "JavaScript Basics",
      "description": "Format numbers for display messages.",
      "code": "// Number to String Conversion - Siemens WinCC Unified\n// Convert temperature for display\nvar temperature = 78.456;\nvar tempString = temperature.toString();\nHMIRuntime.Trace(\"Temperature as string: \" + tempString);\n\n// Format with specific decimal places\nvar pressure = 123.456789;\nvar pressureString = pressure.toFixed(2);\nHMIRuntime.Trace(\"Pressure: \" + pressureString + \" bar\");\n\n// Build display message with numbers\nvar motorName = \"Motor 1\";\nvar speed = 1450;\nvar current = 8.5;\nvar statusMessage = motorName + \" running at \" + speed.toString() + \" RPM, \" + current.toString() + \" A\";\nHMIRuntime.Trace(\"Status: \" + statusMessage);\n\n// Convert to scientific notation\nvar largeNumber = 1234567.89;\nvar scientificString = largeNumber.toExponential(2);\nHMIRuntime.Trace(\"Scientific: \" + scientificString);\n\n// Convert to fixed width string (padding)\nvar count = 42;\nvar countString = count.toString();\nwhile (countString.length < 4) {\n    countString = \"0\" + countString; // Add leading zeros\n}\nHMIRuntime.Trace(\"Padded count: \" + countString);"
    },
    {
      "id": "conversion-boolean",
      "title": "Boolean Conversions",
      "category": "JavaScript Basics",
      "description": "Convert different true/false formats from PLC.",
      "code": "// Boolean Conversion - Siemens WinCC Unified\n// Convert PLC values to boolean\nvar plcValue1 = 1;  // PLC sends 1 for true\nvar isRunning = Boolean(plcValue1);\nHMIRuntime.Trace(\"Motor running: \" + isRunning);\n\n// Convert string values\nvar stringValue = \"true\";\nvar boolValue = (stringValue.toLowerCase() === \"true\");\nHMIRuntime.Trace(\"String to bool: \" + boolValue);\n\n// Handle different PLC formats\nvar plcStatus = \"ON\";  // PLC might send ON/OFF\nvar isOn = (plcStatus.toUpperCase() === \"ON\");\nHMIRuntime.Trace(\"Equipment on: \" + isOn);\n\n// Convert numbers to boolean (0 = false, anything else = true)\nvar values = [0, 1, 5, -1, 0.5];\nfor (var i = 0; i < values.length; i++) {\n    var boolResult = Boolean(values[i]);\n    HMIRuntime.Trace(\"Value \" + values[i] + \" as boolean: \" + boolResult);\n}\n\n// Convert boolean back to PLC format\nvar motorEnabled = true;\nvar plcFormat = motorEnabled ? 1 : 0;  // Convert to 1/0 for PLC\nHMIRuntime.Trace(\"PLC format: \" + plcFormat);\n\n// Handle null and undefined\nvar undefinedValue;\nvar nullValue = null;\nHMIRuntime.Trace(\"Undefined as boolean: \" + Boolean(undefinedValue));\nHMIRuntime.Trace(\"Null as boolean: \" + Boolean(nullValue));"
    },
    {
      "id": "loop-for-arrays",
      "title": "For Loops with Arrays",
      "category": "JavaScript Basics",
      "description": "Process multiple tags or equipment with for loops.",
      "code": "// For Loops with Arrays - Siemens WinCC Unified\n// Process multiple motor tags\nvar motorTags = [\"MOTOR_001_Speed\", \"MOTOR_002_Speed\", \"MOTOR_003_Speed\"];\nfor (var i = 0; i < motorTags.length; i++) {\n    var tagName = motorTags[i];\n    var speed = Tags(tagName).Read();\n    HMIRuntime.Trace(\"Motor \" + (i + 1) + \" speed: \" + speed + \" RPM\");\n}\n\n// Check multiple alarm states\nvar alarmTags = [\"ALM_TEMP_HIGH\", \"ALM_PRESSURE_LOW\", \"ALM_MOTOR_FAULT\"];\nvar activeAlarms = 0;\nfor (var i = 0; i < alarmTags.length; i++) {\n    var alarmState = Tags(alarmTags[i]).Read();\n    if (alarmState === true) {\n        activeAlarms = activeAlarms + 1;\n        HMIRuntime.Trace(\"Active alarm: \" + alarmTags[i]);\n    }\n}\nHMIRuntime.Trace(\"Total active alarms: \" + activeAlarms);\n\n// Update multiple setpoints\nvar setpointTags = [\"SP_TEMP_1\", \"SP_TEMP_2\", \"SP_TEMP_3\"];\nvar newSetpoint = 75.0;\nfor (var i = 0; i < setpointTags.length; i++) {\n    Tags(setpointTags[i]).Write(newSetpoint);\n    HMIRuntime.Trace(\"Updated \" + setpointTags[i] + \" to \" + newSetpoint);\n}\n\n// Process equipment status list\nvar equipment = [\"PUMP_001\", \"VALVE_002\", \"MOTOR_003\"];\nfor (var i = 0; i < equipment.length; i++) {\n    var statusTag = equipment[i] + \"_Status\";\n    var status = Tags(statusTag).Read();\n    HMIRuntime.Trace(equipment[i] + \" status: \" + status);\n}"
    },
    {
      "id": "loop-while",
      "title": "While Loops for Conditions",
      "category": "JavaScript Basics",
      "description": "Wait for equipment status changes with while loops.",
      "code": "// While Loops - Siemens WinCC Unified\n// Wait for motor to start (with timeout for safety)\nvar motorRunning = false;\nvar timeout = 0;\nvar maxTimeout = 10; // 10 seconds maximum wait\n\nwhile (motorRunning === false && timeout < maxTimeout) {\n    motorRunning = Tags(\"MOTOR_001_Running\").Read();\n    if (motorRunning === false) {\n        HMIRuntime.Trace(\"Waiting for motor to start... (\" + timeout + \"s)\");\n        // In real application, use a timer instead of blocking\n        timeout = timeout + 1;\n    }\n}\n\nif (motorRunning) {\n    HMIRuntime.Trace(\"Motor started successfully!\");\n} else {\n    HMIRuntime.Trace(\"Timeout: Motor failed to start\");\n}\n\n// Process queue until empty\nvar queueLength = Tags(\"QUEUE_LENGTH\").Read();\nwhile (queueLength > 0) {\n    HMIRuntime.Trace(\"Processing queue item, remaining: \" + queueLength);\n    // Process one item (this would trigger PLC logic)\n    Tags(\"PROCESS_NEXT_ITEM\").Write(true);\n    \n    // Check queue length again\n    queueLength = Tags(\"QUEUE_LENGTH\").Read();\n}\nHMIRuntime.Trace(\"Queue processing complete\");\n\n// Wait for stable temperature reading\nvar temperature = Tags(\"TEMP_SENSOR_1\").Read();\nvar previousTemp = temperature;\nvar stableCount = 0;\nvar requiredStableReadings = 3;\n\nwhile (stableCount < requiredStableReadings) {\n    temperature = Tags(\"TEMP_SENSOR_1\").Read();\n    if (Math.abs(temperature - previousTemp) < 0.5) {\n        stableCount = stableCount + 1;\n    } else {\n        stableCount = 0; // Reset if temperature changed\n    }\n    previousTemp = temperature;\n    HMIRuntime.Trace(\"Temperature: \" + temperature + \", Stable readings: \" + stableCount);\n}\nHMIRuntime.Trace(\"Temperature stabilized at: \" + temperature + \"°C\");"
    },
    {
      "id": "loop-break-continue",
      "title": "Break and Continue Logic",
      "category": "JavaScript Basics",
      "description": "Control loop execution with break and continue.",
      "code": "// Break and Continue Logic - Siemens WinCC Unified\n// Check equipment list, stop on first error\nvar equipment = [\"MOTOR_001\", \"PUMP_002\", \"VALVE_003\", \"MOTOR_004\"];\nvar errorFound = false;\n\nfor (var i = 0; i < equipment.length; i++) {\n    var statusTag = equipment[i] + \"_Status\";\n    var status = Tags(statusTag).Read();\n    \n    if (status === \"ERROR\") {\n        HMIRuntime.Trace(\"ERROR found in \" + equipment[i] + \" - stopping check\");\n        errorFound = true;\n        break; // Exit loop immediately\n    }\n    \n    HMIRuntime.Trace(equipment[i] + \" status: \" + status + \" - OK\");\n}\n\nif (errorFound) {\n    HMIRuntime.Trace(\"Equipment check failed - manual intervention required\");\n} else {\n    HMIRuntime.Trace(\"All equipment status OK\");\n}\n\n// Skip offline equipment in processing\nvar sensors = [\"TEMP_001\", \"TEMP_002\", \"TEMP_003\", \"TEMP_004\"];\nvar totalTemp = 0;\nvar validReadings = 0;\n\nfor (var i = 0; i < sensors.length; i++) {\n    var onlineStatus = Tags(sensors[i] + \"_Online\").Read();\n    \n    if (onlineStatus === false) {\n        HMIRuntime.Trace(\"Skipping offline sensor: \" + sensors[i]);\n        continue; // Skip to next iteration\n    }\n    \n    var temperature = Tags(sensors[i] + \"_Value\").Read();\n    totalTemp = totalTemp + temperature;\n    validReadings = validReadings + 1;\n    HMIRuntime.Trace(sensors[i] + \" temperature: \" + temperature + \"°C\");\n}\n\nif (validReadings > 0) {\n    var averageTemp = totalTemp / validReadings;\n    HMIRuntime.Trace(\"Average temperature: \" + averageTemp.toFixed(2) + \"°C (\" + validReadings + \" sensors)\");\n} else {\n    HMIRuntime.Trace(\"No valid temperature readings available\");\n}"
    },
    {
      "id": "conditional-if-else",
      "title": "If-Else Chain Logic",
      "category": "JavaScript Basics",
      "description": "Handle multiple equipment states with if-else chains.",
      "code": "// If-Else Chain Logic - Siemens WinCC Unified\n// Equipment state handling\nvar equipmentState = Tags(\"MOTOR_001_State\").Read();\n\nif (equipmentState === \"RUNNING\") {\n    HMIRuntime.Trace(\"Motor is running normally\");\n    // Set status indicator to green\n    Tags(\"STATUS_LIGHT\").Write(\"GREEN\");\n} else if (equipmentState === \"STARTING\") {\n    HMIRuntime.Trace(\"Motor is starting up\");\n    Tags(\"STATUS_LIGHT\").Write(\"YELLOW\");\n} else if (equipmentState === \"STOPPING\") {\n    HMIRuntime.Trace(\"Motor is stopping\");\n    Tags(\"STATUS_LIGHT\").Write(\"YELLOW\");\n} else if (equipmentState === \"FAULT\") {\n    HMIRuntime.Trace(\"Motor fault detected - check alarms\");\n    Tags(\"STATUS_LIGHT\").Write(\"RED\");\n} else if (equipmentState === \"MAINTENANCE\") {\n    HMIRuntime.Trace(\"Motor in maintenance mode\");\n    Tags(\"STATUS_LIGHT\").Write(\"BLUE\");\n} else {\n    HMIRuntime.Trace(\"Unknown motor state: \" + equipmentState);\n    Tags(\"STATUS_LIGHT\").Write(\"RED\");\n}\n\n// Temperature range checking\nvar temperature = Tags(\"TEMP_SENSOR_1\").Read();\nvar tempStatus = \"\";\n\nif (temperature < 0) {\n    tempStatus = \"FREEZING\";\n    HMIRuntime.Trace(\"WARNING: Temperature below freezing point\");\n} else if (temperature >= 0 && temperature < 20) {\n    tempStatus = \"COLD\";\n    HMIRuntime.Trace(\"Temperature is cold\");\n} else if (temperature >= 20 && temperature < 30) {\n    tempStatus = \"NORMAL\";\n    HMIRuntime.Trace(\"Temperature is normal\");\n} else if (temperature >= 30 && temperature < 40) {\n    tempStatus = \"WARM\";\n    HMIRuntime.Trace(\"Temperature is warm\");\n} else {\n    tempStatus = \"HOT\";\n    HMIRuntime.Trace(\"ALARM: Temperature is too hot!\");\n}\n\nTags(\"TEMP_STATUS\").Write(tempStatus);"
    },
    {
      "id": "conditional-switch",
      "title": "Switch Statement Logic",
      "category": "JavaScript Basics",
      "description": "Handle different equipment modes with switch statements.",
      "code": "// Switch Statement Logic - Siemens WinCC Unified\n// Handle different alarm types\nvar alarmType = Tags(\"CURRENT_ALARM_TYPE\").Read();\n\nswitch (alarmType) {\n    case \"TEMPERATURE_HIGH\":\n        HMIRuntime.Trace(\"High temperature alarm - reducing heating\");\n        Tags(\"HEATER_SETPOINT\").Write(70);\n        Tags(\"COOLING_FAN\").Write(true);\n        break;\n        \n    case \"TEMPERATURE_LOW\":\n        HMIRuntime.Trace(\"Low temperature alarm - increasing heating\");\n        Tags(\"HEATER_SETPOINT\").Write(90);\n        Tags(\"COOLING_FAN\").Write(false);\n        break;\n        \n    case \"PRESSURE_HIGH\":\n        HMIRuntime.Trace(\"High pressure alarm - opening relief valve\");\n        Tags(\"RELIEF_VALVE\").Write(true);\n        break;\n        \n    case \"PRESSURE_LOW\":\n        HMIRuntime.Trace(\"Low pressure alarm - starting backup pump\");\n        Tags(\"BACKUP_PUMP\").Write(true);\n        break;\n        \n    case \"MOTOR_FAULT\":\n        HMIRuntime.Trace(\"Motor fault - stopping system\");\n        Tags(\"SYSTEM_SHUTDOWN\").Write(true);\n        break;\n        \n    default:\n        HMIRuntime.Trace(\"Unknown alarm type: \" + alarmType);\n        break;\n}\n\n// Handle production modes\nvar productionMode = Tags(\"PRODUCTION_MODE\").Read();\n\nswitch (productionMode) {\n    case 1:\n        HMIRuntime.Trace(\"Production Mode: Standard\");\n        Tags(\"CONVEYOR_SPEED\").Write(100);\n        Tags(\"QUALITY_CHECK\").Write(true);\n        break;\n        \n    case 2:\n        HMIRuntime.Trace(\"Production Mode: High Speed\");\n        Tags(\"CONVEYOR_SPEED\").Write(150);\n        Tags(\"QUALITY_CHECK\").Write(false);\n        break;\n        \n    case 3:\n        HMIRuntime.Trace(\"Production Mode: Quality Focus\");\n        Tags(\"CONVEYOR_SPEED\").Write(75);\n        Tags(\"QUALITY_CHECK\").Write(true);\n        break;\n        \n    case 0:\n    default:\n        HMIRuntime.Trace(\"Production Mode: Stopped\");\n        Tags(\"CONVEYOR_SPEED\").Write(0);\n        Tags(\"QUALITY_CHECK\").Write(false);\n        break;\n}"
    },
    {
      "id": "conditional-comparison",
      "title": "Comparison Operations",
      "category": "JavaScript Basics",
      "description": "Compare values for limit checking and safety.",
      "code": "// Comparison Operations - Siemens WinCC Unified\n// Temperature limit checking\nvar currentTemp = Tags(\"TEMP_SENSOR_1\").Read();\nvar tempHighLimit = 100.0;\nvar tempLowLimit = 10.0;\n\n// Greater than comparison\nif (currentTemp > tempHighLimit) {\n    HMIRuntime.Trace(\"ALARM: Temperature too high (\" + currentTemp + \"°C > \" + tempHighLimit + \"°C)\");\n    Tags(\"TEMP_HIGH_ALARM\").Write(true);\n}\n\n// Less than comparison\nif (currentTemp < tempLowLimit) {\n    HMIRuntime.Trace(\"ALARM: Temperature too low (\" + currentTemp + \"°C < \" + tempLowLimit + \"°C)\");\n    Tags(\"TEMP_LOW_ALARM\").Write(true);\n}\n\n// Greater than or equal comparison\nvar pressure = Tags(\"PRESSURE_SENSOR_1\").Read();\nvar safetyLimit = 150.0;\nif (pressure >= safetyLimit) {\n    HMIRuntime.Trace(\"WARNING: Pressure at or above safety limit (\" + pressure + \" >= \" + safetyLimit + \")\");\n    Tags(\"PRESSURE_WARNING\").Write(true);\n}\n\n// Less than or equal comparison\nvar motorSpeed = Tags(\"MOTOR_001_Speed\").Read();\nvar minSpeed = 100;\nif (motorSpeed <= minSpeed) {\n    HMIRuntime.Trace(\"Motor speed low (\" + motorSpeed + \" <= \" + minSpeed + \")\");\n    Tags(\"LOW_SPEED_WARNING\").Write(true);\n}\n\n// Equality comparison\nvar equipmentStatus = Tags(\"PUMP_001_Status\").Read();\nif (equipmentStatus === \"RUNNING\") {\n    HMIRuntime.Trace(\"Pump is running normally\");\n} else if (equipmentStatus === \"STOPPED\") {\n    HMIRuntime.Trace(\"Pump is stopped\");\n}\n\n// Not equal comparison\nvar alarmState = Tags(\"SYSTEM_ALARM\").Read();\nif (alarmState !== \"OK\") {\n    HMIRuntime.Trace(\"System alarm active: \" + alarmState);\n    Tags(\"ALARM_INDICATOR\").Write(true);\n}\n\n// Range checking (between values)\nvar optimalTemp = 75.0;\nvar tolerance = 5.0;\nif (currentTemp >= (optimalTemp - tolerance) && currentTemp <= (optimalTemp + tolerance)) {\n    HMIRuntime.Trace(\"Temperature within optimal range\");\n    Tags(\"TEMP_OPTIMAL\").Write(true);\n} else {\n    HMIRuntime.Trace(\"Temperature outside optimal range\");\n    Tags(\"TEMP_OPTIMAL\").Write(false);\n}"
    },
    {
      "id": "error-try-catch",
      "title": "Try-Catch Error Handling",
      "category": "Best Practices",
      "description": "Handle PLC communication errors safely.",
      "code": "// Try-Catch Error Handling - Siemens WinCC Unified\n// Safe tag reading with error handling\nfunction safeReadTag(tagName) {\n    try {\n        var value = Tags(tagName).Read();\n        HMIRuntime.Trace(\"Successfully read \" + tagName + \": \" + value);\n        return value;\n    } catch (error) {\n        HMIRuntime.Trace(\"Error reading \" + tagName + \": \" + error.message);\n        return null; // Return safe default value\n    }\n}\n\n// Safe tag writing with error handling\nfunction safeWriteTag(tagName, value) {\n    try {\n        Tags(tagName).Write(value);\n        HMIRuntime.Trace(\"Successfully wrote \" + tagName + \": \" + value);\n        return true;\n    } catch (error) {\n        HMIRuntime.Trace(\"Error writing \" + tagName + \": \" + error.message);\n        return false;\n    }\n}\n\n// Example usage with error handling\nvar motorSpeed = safeReadTag(\"MOTOR_001_Speed\");\nif (motorSpeed !== null) {\n    // Only proceed if read was successful\n    var newSetpoint = motorSpeed + 100;\n    var writeSuccess = safeWriteTag(\"MOTOR_001_Setpoint\", newSetpoint);\n    \n    if (writeSuccess) {\n        HMIRuntime.Trace(\"Motor setpoint updated successfully\");\n    } else {\n        HMIRuntime.Trace(\"Failed to update motor setpoint\");\n    }\n} else {\n    HMIRuntime.Trace(\"Cannot update setpoint - failed to read current speed\");\n}\n\n// Handle screen navigation errors\ntry {\n    HMIRuntime.Screens.Show(\"DetailedView\");\n    HMIRuntime.Trace(\"Screen navigation successful\");\n} catch (error) {\n    HMIRuntime.Trace(\"Screen navigation failed: \" + error.message);\n    // Try alternative screen\n    try {\n        HMIRuntime.Screens.Show(\"MainView\");\n        HMIRuntime.Trace(\"Fallback screen loaded\");\n    } catch (fallbackError) {\n        HMIRuntime.Trace(\"All screen navigation failed: \" + fallbackError.message);\n    }\n}"
    },
    {
      "id": "error-logging",
      "title": "Error Logging Strategies",
      "category": "Best Practices",
      "description": "Log errors for debugging and system monitoring.",
      "code": "// Error Logging Strategies - Siemens WinCC Unified\n// Enhanced error logging function\nfunction logError(errorType, location, message, additionalData) {\n    var timestamp = new Date().toISOString();\n    var logEntry = \"[\" + timestamp + \"] ERROR - \" + errorType + \" in \" + location + \": \" + message;\n    \n    if (additionalData) {\n        logEntry = logEntry + \" | Data: \" + JSON.stringify(additionalData);\n    }\n    \n    // Log to HMI Runtime\n    HMIRuntime.Trace(logEntry);\n    \n    // Also write to error counter tag\n    try {\n        var errorCount = Tags(\"ERROR_COUNT\").Read();\n        Tags(\"ERROR_COUNT\").Write(errorCount + 1);\n        Tags(\"LAST_ERROR_TIME\").Write(timestamp);\n        Tags(\"LAST_ERROR_MESSAGE\").Write(message);\n    } catch (tagError) {\n        HMIRuntime.Trace(\"Failed to update error tags: \" + tagError.message);\n    }\n}\n\n// Log different types of errors\nfunction processMotorData() {\n    try {\n        var motorSpeed = Tags(\"MOTOR_001_Speed\").Read();\n        \n        if (motorSpeed < 0) {\n            logError(\"DATA_VALIDATION\", \"processMotorData\", \"Invalid motor speed\", {speed: motorSpeed});\n            return false;\n        }\n        \n        // Process successful\n        HMIRuntime.Trace(\"Motor data processed successfully: \" + motorSpeed + \" RPM\");\n        return true;\n        \n    } catch (error) {\n        logError(\"COMMUNICATION\", \"processMotorData\", \"Failed to read motor speed\", {error: error.message});\n        return false;\n    }\n}\n\n// Usage examples\nprocessMotorData();\n\n// Log system events\nlogError(\"SYSTEM\", \"Startup\", \"Application started\", {version: \"1.0.0\"});\nlogError(\"USER\", \"Login\", \"Invalid user credentials\", {username: \"operator1\"});\nlogError(\"HARDWARE\", \"SensorCheck\", \"Sensor not responding\", {sensor: \"TEMP_001\"});\n\n// Performance logging\nvar startTime = new Date().getTime();\n// ... some operation ...\nvar endTime = new Date().getTime();\nvar duration = endTime - startTime;\n\nif (duration > 1000) { // Log slow operations\n    logError(\"PERFORMANCE\", \"DataProcessing\", \"Operation took too long\", {duration: duration + \"ms\"});\n}"
    },
    {
      "id": "error-retry",
      "title": "Retry Logic for Failed Operations",
      "category": "Best Practices",
      "description": "Re-attempt failed operations with retry logic.",
      "code": "// Retry Logic - Siemens WinCC Unified\n// Retry function with configurable attempts\nfunction retryOperation(operationFunction, maxRetries, delayMs) {\n    var attempt = 0;\n    \n    while (attempt < maxRetries) {\n        try {\n            var result = operationFunction();\n            HMIRuntime.Trace(\"Operation successful on attempt \" + (attempt + 1));\n            return result;\n        } catch (error) {\n            attempt = attempt + 1;\n            HMIRuntime.Trace(\"Attempt \" + attempt + \" failed: \" + error.message);\n            \n            if (attempt >= maxRetries) {\n                HMIRuntime.Trace(\"All \" + maxRetries + \" attempts failed - giving up\");\n                throw error; // Re-throw the last error\n            }\n            \n            HMIRuntime.Trace(\"Waiting \" + delayMs + \"ms before retry...\");\n            // In real application, use a proper delay mechanism\n            // This is simplified for demonstration\n        }\n    }\n}\n\n// Example: Retry tag writing\nfunction writeTagWithRetry(tagName, value) {\n    function writeOperation() {\n        Tags(tagName).Write(value);\n        return true;\n    }\n    \n    try {\n        return retryOperation(writeOperation, 3, 1000); // 3 attempts, 1 second delay\n    } catch (error) {\n        HMIRuntime.Trace(\"Failed to write \" + tagName + \" after all retries\");\n        return false;\n    }\n}\n\n// Example: Retry screen navigation\nfunction navigateWithRetry(screenName) {\n    function navigationOperation() {\n        HMIRuntime.Screens.Show(screenName);\n        return true;\n    }\n    \n    try {\n        return retryOperation(navigationOperation, 2, 500); // 2 attempts, 0.5 second delay\n    } catch (error) {\n        HMIRuntime.Trace(\"Failed to navigate to \" + screenName + \" after all retries\");\n        return false;\n    }\n}\n\n// Usage examples\nvar writeSuccess = writeTagWithRetry(\"MOTOR_001_Setpoint\", 1500);\nif (writeSuccess) {\n    HMIRuntime.Trace(\"Motor setpoint updated successfully\");\n} else {\n    HMIRuntime.Trace(\"Failed to update motor setpoint after retries\");\n}\n\nvar navSuccess = navigateWithRetry(\"AlarmView\");\nif (!navSuccess) {\n    HMIRuntime.Trace(\"Navigation failed - user will need to navigate manually\");\n}"
    },
    {
      "id": "object-creation",
      "title": "Object Creation and Access",
      "category": "JavaScript Basics",
      "description": "Create equipment configuration objects for data management.",
      "code": "// Object Creation and Access - Siemens WinCC Unified\n// Create motor configuration object\nvar motor1 = {\n    name: \"Motor 1\",\n    tagPrefix: \"MOTOR_001\",\n    maxSpeed: 1800,\n    minSpeed: 100,\n    normalSpeed: 1450,\n    location: \"Building A - Line 1\",\n    isRunning: false\n};\n\n// Access object properties\nHMIRuntime.Trace(\"Motor name: \" + motor1.name);\nHMIRuntime.Trace(\"Location: \" + motor1.location);\nHMIRuntime.Trace(\"Max speed: \" + motor1.maxSpeed + \" RPM\");\n\n// Update object properties\nmotor1.isRunning = true;\nmotor1.currentSpeed = 1450;\nHMIRuntime.Trace(\"Motor status updated - Running: \" + motor1.isRunning);\n\n// Create alarm configuration object\nvar tempAlarm = {\n    id: \"TEMP_HIGH_001\",\n    description: \"High temperature in Tank 1\",\n    setpoint: 85.0,\n    hysteresis: 2.0,\n    priority: \"HIGH\",\n    isActive: false,\n    acknowledgeRequired: true\n};\n\n// Create recipe object\nvar recipe1 = {\n    name: \"Standard Mix\",\n    version: \"1.2\",\n    parameters: {\n        temperature: 75.0,\n        pressure: 2.5,\n        mixTime: 300,\n        speed: 120\n    },\n    createdBy: \"Operator\",\n    createdDate: \"2024-12-27\"\n};\n\n// Access nested properties\nHMIRuntime.Trace(\"Recipe: \" + recipe1.name);\nHMIRuntime.Trace(\"Temperature: \" + recipe1.parameters.temperature + \"°C\");\nHMIRuntime.Trace(\"Mix time: \" + recipe1.parameters.mixTime + \" seconds\");\n\n// Modify nested properties\nrecipe1.parameters.temperature = 80.0;\nHMIRuntime.Trace(\"Updated temperature: \" + recipe1.parameters.temperature + \"°C\");"
    },
    {
      "id": "object-properties",
      "title": "Property Checking and Validation",
      "category": "JavaScript Basics",
      "description": "Safely check if object properties exist before using them.",
      "code": "// Property Checking - Siemens WinCC Unified\n// Equipment configuration with property validation\nvar equipment = {\n    name: \"Pump 1\",\n    type: \"Centrifugal\",\n    maxFlow: 500,\n    location: \"Building B\"\n};\n\n// Check if property exists before using\nif (equipment.hasOwnProperty(\"maxFlow\")) {\n    HMIRuntime.Trace(\"Max flow rate: \" + equipment.maxFlow + \" L/min\");\n} else {\n    HMIRuntime.Trace(\"Max flow rate not configured\");\n}\n\n// Safe property access function\nfunction getPropertySafely(obj, propertyName, defaultValue) {\n    if (obj.hasOwnProperty(propertyName)) {\n        return obj[propertyName];\n    } else {\n        HMIRuntime.Trace(\"Property '\" + propertyName + \"' not found, using default: \" + defaultValue);\n        return defaultValue;\n    }\n}\n\n// Usage examples\nvar motorSpeed = getPropertySafely(equipment, \"speed\", 0);\nvar equipmentType = getPropertySafely(equipment, \"type\", \"Unknown\");\nvar maintenanceDate = getPropertySafely(equipment, \"lastMaintenance\", \"Never\");\n\nHMIRuntime.Trace(\"Motor speed: \" + motorSpeed);\nHMIRuntime.Trace(\"Equipment type: \" + equipmentType);\nHMIRuntime.Trace(\"Last maintenance: \" + maintenanceDate);\n\n// Validate configuration completeness\nvar requiredProperties = [\"name\", \"type\", \"location\"];\nvar isValid = true;\n\nfor (var i = 0; i < requiredProperties.length; i++) {\n    var property = requiredProperties[i];\n    if (!equipment.hasOwnProperty(property)) {\n        HMIRuntime.Trace(\"ERROR: Missing required property: \" + property);\n        isValid = false;\n    }\n}\n\nif (isValid) {\n    HMIRuntime.Trace(\"Equipment configuration is valid\");\n} else {\n    HMIRuntime.Trace(\"Equipment configuration is incomplete\");\n}\n\n// Check for undefined or null values\nif (equipment.name && equipment.name !== \"\") {\n    HMIRuntime.Trace(\"Valid equipment name: \" + equipment.name);\n} else {\n    HMIRuntime.Trace(\"Equipment name is empty or invalid\");\n}"
    },
    {
      "id": "object-iteration",
      "title": "Object Property Iteration",
      "category": "JavaScript Basics",
      "description": "Loop through object properties for configuration processing.",
      "code": "// Object Iteration - Siemens WinCC Unified\n// Equipment configuration object\nvar equipmentConfig = {\n    name: \"Conveyor System 1\",\n    speed: 120,\n    length: 50,\n    width: 2.5,\n    location: \"Production Line A\",\n    status: \"Running\",\n    lastMaintenance: \"2024-11-15\"\n};\n\n// Iterate through all properties\nHMIRuntime.Trace(\"Equipment Configuration:\");\nfor (var property in equipmentConfig) {\n    var value = equipmentConfig[property];\n    HMIRuntime.Trace(\"  \" + property + \": \" + value);\n}\n\n// Process specific types of properties\nvar numericProperties = [];\nvar stringProperties = [];\n\nfor (var property in equipmentConfig) {\n    var value = equipmentConfig[property];\n    if (typeof value === \"number\") {\n        numericProperties.push(property + \": \" + value);\n    } else if (typeof value === \"string\") {\n        stringProperties.push(property + \": \" + value);\n    }\n}\n\nHMIRuntime.Trace(\"Numeric properties: \" + numericProperties.join(\", \"));\nHMIRuntime.Trace(\"String properties: \" + stringProperties.join(\", \"));\n\n// Create summary report\nvar alarmSettings = {\n    tempHigh: 85.0,\n    tempLow: 15.0,\n    pressureHigh: 10.0,\n    pressureLow: 0.5,\n    flowLow: 50.0\n};\n\nvar alarmReport = \"Alarm Settings Report:\\n\";\nfor (var alarmType in alarmSettings) {\n    var limit = alarmSettings[alarmType];\n    alarmReport = alarmReport + \"- \" + alarmType + \": \" + limit + \"\\n\";\n}\nHMIRuntime.Trace(alarmReport);\n\n// Count properties\nvar propertyCount = 0;\nfor (var property in equipmentConfig) {\n    propertyCount = propertyCount + 1;\n}\nHMIRuntime.Trace(\"Total configuration properties: \" + propertyCount);\n\n// Find properties containing specific text\nvar locationProperties = [];\nfor (var property in equipmentConfig) {\n    if (property.toLowerCase().indexOf(\"location\") !== -1 || property.toLowerCase().indexOf(\"name\") !== -1) {\n        locationProperties.push(property + \": \" + equipmentConfig[property]);\n    }\n}\nHMIRuntime.Trace(\"Location-related properties: \" + locationProperties.join(\", \"));"
    },
    {
      "id": "screen-find-object",
      "title": "Find Screen Objects",
      "category": "Screen Object Manipulation",
      "description": "Use Screen.FindItem() to find and access screen objects.",
      "code": "// Find Screen Objects - Siemens WinCC Unified\n// Basic object finding\nvar rectangle = Screen.FindItem('Rectangle1');\nif (rectangle) {\n    HMIRuntime.Trace(\"Found rectangle object: \" + rectangle.Name);\n} else {\n    HMIRuntime.Trace(\"Rectangle1 not found on screen\");\n}\n\n// Find multiple objects by pattern\nvar objectNames = ['Motor1_Status', 'Motor2_Status', 'Motor3_Status'];\nfor (var i = 0; i < objectNames.length; i++) {\n    var obj = Screen.FindItem(objectNames[i]);\n    if (obj) {\n        HMIRuntime.Trace(\"Found object: \" + obj.Name);\n    } else {\n        HMIRuntime.Trace(\"Object not found: \" + objectNames[i]);\n    }\n}\n\n// Safe object finding function\nfunction findObjectSafely(objectName) {\n    try {\n        var obj = Screen.FindItem(objectName);\n        if (obj) {\n            return obj;\n        } else {\n            HMIRuntime.Trace(\"Object '\" + objectName + \"' not found\");\n            return null;\n        }\n    } catch (error) {\n        HMIRuntime.Trace(\"Error finding object '\" + objectName + \"': \" + error.message);\n        return null;\n    }\n}"
    },
    {
      "id": "screen-change-colors",
      "title": "Change Object Colors",
      "category": "Screen Object Manipulation",
      "description": "Change BackColor and ForeColor of screen objects dynamically.",
      "code": "// Change Object Colors - Siemens WinCC Unified\n// Change background color (your example from documentation)\nScreen.FindItem('Rectangle1').BackColor = 0xFFFFFF00; // Yellow\nHMIRuntime.Trace(\"Rectangle1 background changed to yellow\");\n\n// Change multiple colors based on equipment status\nvar motorStatus = Tags(\"MOTOR_001_Status\").Read();\nvar statusLight = Screen.FindItem('StatusLight1');\n\nif (statusLight) {\n    if (motorStatus === \"RUNNING\") {\n        statusLight.BackColor = 0xFF00FF00; // Green\n        HMIRuntime.Trace(\"Status light set to green - motor running\");\n    } else if (motorStatus === \"FAULT\") {\n        statusLight.BackColor = 0xFFFF0000; // Red\n        HMIRuntime.Trace(\"Status light set to red - motor fault\");\n    } else {\n        statusLight.BackColor = 0xFFFFFF00; // Yellow\n        HMIRuntime.Trace(\"Status light set to yellow - motor stopped\");\n    }\n}\n\n// Change text color\nvar textField = Screen.FindItem('TemperatureText');\nif (textField) {\n    var temperature = Tags(\"TEMP_SENSOR_1\").Read();\n    if (temperature > 85) {\n        textField.ForeColor = 0xFFFF0000; // Red text for high temp\n    } else if (temperature < 15) {\n        textField.ForeColor = 0xFF0000FF; // Blue text for low temp\n    } else {\n        textField.ForeColor = 0xFF000000; // Black text for normal\n    }\n    HMIRuntime.Trace(\"Temperature text color updated based on value: \" + temperature);\n}\n\n// Color multiple objects at once\nvar alarmObjects = ['AlarmIcon1', 'AlarmIcon2', 'AlarmIcon3'];\nvar alarmActive = Tags(\"SYSTEM_ALARM_ACTIVE\").Read();\nvar alarmColor = alarmActive ? 0xFFFF0000 : 0xFF808080; // Red if active, gray if not\n\nfor (var i = 0; i < alarmObjects.length; i++) {\n    var alarmIcon = Screen.FindItem(alarmObjects[i]);\n    if (alarmIcon) {\n        alarmIcon.BackColor = alarmColor;\n    }\n}\nHMIRuntime.Trace(\"Alarm icons updated - Active: \" + alarmActive);"
    },
    {
      "id": "screen-show-hide",
      "title": "Show and Hide Objects",
      "category": "Screen Object Manipulation",
      "description": "Control object visibility based on conditions.",
      "code": "// Show and Hide Objects - Siemens WinCC Unified\n// Hide object when not needed\nvar maintenancePanel = Screen.FindItem('MaintenancePanel');\nvar isMaintenanceMode = Tags(\"MAINTENANCE_MODE\").Read();\n\nif (maintenancePanel) {\n    maintenancePanel.Visible = isMaintenanceMode;\n    HMIRuntime.Trace(\"Maintenance panel visible: \" + isMaintenanceMode);\n}\n\n// Show alarm details only when alarm is active\nvar alarmDetails = Screen.FindItem('AlarmDetails');\nvar alarmActive = Tags(\"SYSTEM_ALARM_ACTIVE\").Read();\n\nif (alarmDetails) {\n    alarmDetails.Visible = alarmActive;\n    if (alarmActive) {\n        HMIRuntime.Trace(\"Alarm details shown - system alarm active\");\n    } else {\n        HMIRuntime.Trace(\"Alarm details hidden - no active alarms\");\n    }\n}\n\n// Show/hide equipment based on selection\nvar selectedEquipment = Tags(\"SELECTED_EQUIPMENT\").Read();\nvar equipmentPanels = ['MotorPanel', 'PumpPanel', 'ValvePanel'];\n\nfor (var i = 0; i < equipmentPanels.length; i++) {\n    var panel = Screen.FindItem(equipmentPanels[i]);\n    if (panel) {\n        // Show only the selected equipment panel\n        panel.Visible = (equipmentPanels[i] === selectedEquipment + \"Panel\");\n        HMIRuntime.Trace(equipmentPanels[i] + \" visible: \" + panel.Visible);\n    }\n}\n\n// Toggle object visibility\nfunction toggleObjectVisibility(objectName) {\n    var obj = Screen.FindItem(objectName);\n    if (obj) {\n        obj.Visible = !obj.Visible;\n        HMIRuntime.Trace(objectName + \" visibility toggled to: \" + obj.Visible);\n        return obj.Visible;\n    }\n    return false;\n}\n\n// Example usage\ntoggleObjectVisibility('AdvancedControls');"
    },
    {
      "id": "screen-text-content",
      "title": "Change Text Content",
      "category": "Screen Object Manipulation",
      "description": "Update text content of labels and text fields dynamically.",
      "code": "// Change Text Content - Siemens WinCC Unified\n// Update status text based on equipment state\nvar statusLabel = Screen.FindItem('StatusLabel');\nvar motorStatus = Tags(\"MOTOR_001_Status\").Read();\n\nif (statusLabel) {\n    statusLabel.Text = \"Motor Status: \" + motorStatus;\n    HMIRuntime.Trace(\"Status label updated: \" + statusLabel.Text);\n}\n\n// Update temperature display\nvar tempDisplay = Screen.FindItem('TemperatureDisplay');\nvar temperature = Tags(\"TEMP_SENSOR_1\").Read();\n\nif (tempDisplay) {\n    tempDisplay.Text = temperature.toFixed(1) + \"°C\";\n    HMIRuntime.Trace(\"Temperature display updated: \" + tempDisplay.Text);\n}\n\n// Build comprehensive status message\nvar statusMessage = Screen.FindItem('SystemStatusMessage');\nif (statusMessage) {\n    var motorRunning = Tags(\"MOTOR_001_Running\").Read();\n    var pumpRunning = Tags(\"PUMP_001_Running\").Read();\n    var temperature = Tags(\"TEMP_SENSOR_1\").Read();\n    var pressure = Tags(\"PRESSURE_SENSOR_1\").Read();\n    \n    var message = \"System Status:\\n\";\n    message += \"Motor: \" + (motorRunning ? \"RUNNING\" : \"STOPPED\") + \"\\n\";\n    message += \"Pump: \" + (pumpRunning ? \"RUNNING\" : \"STOPPED\") + \"\\n\";\n    message += \"Temperature: \" + temperature.toFixed(1) + \"°C\\n\";\n    message += \"Pressure: \" + pressure.toFixed(1) + \" bar\";\n    \n    statusMessage.Text = message;\n    HMIRuntime.Trace(\"System status message updated\");\n}\n\n// Update multiple text fields with current values\nvar textFields = [\n    {name: 'Speed1Display', tag: 'MOTOR_001_Speed', unit: ' RPM'},\n    {name: 'Speed2Display', tag: 'MOTOR_002_Speed', unit: ' RPM'},\n    {name: 'FlowDisplay', tag: 'FLOW_SENSOR_1', unit: ' L/min'}\n];\n\nfor (var i = 0; i < textFields.length; i++) {\n    var field = textFields[i];\n    var textObj = Screen.FindItem(field.name);\n    if (textObj) {\n        var value = Tags(field.tag).Read();\n        textObj.Text = value.toFixed(1) + field.unit;\n        HMIRuntime.Trace(field.name + \" updated: \" + textObj.Text);\n    }\n}"
    },
    {
      "id": "screen-object-properties",
      "title": "Access Object Properties",
      "category": "Screen Object Manipulation",
      "description": "Read and modify various object properties dynamically.",
      "code": "// Access Object Properties - Siemens WinCC Unified\n// Get object information\nvar button = Screen.FindItem('StartButton');\nif (button) {\n    HMIRuntime.Trace(\"Button name: \" + button.Name);\n    HMIRuntime.Trace(\"Button enabled: \" + button.Enabled);\n    HMIRuntime.Trace(\"Button visible: \" + button.Visible);\n    HMIRuntime.Trace(\"Button text: \" + button.Text);\n}\n\n// Enable/disable objects based on conditions\nvar systemEnabled = Tags(\"SYSTEM_ENABLED\").Read();\nvar controlButtons = ['StartButton', 'StopButton', 'ResetButton'];\n\nfor (var i = 0; i < controlButtons.length; i++) {\n    var btn = Screen.FindItem(controlButtons[i]);\n    if (btn) {\n        btn.Enabled = systemEnabled;\n        HMIRuntime.Trace(controlButtons[i] + \" enabled: \" + systemEnabled);\n    }\n}\n\n// Change object position (if supported)\nvar movableObject = Screen.FindItem('FloatingPanel');\nif (movableObject) {\n    // Example: Move object based on some condition\n    var newPosition = Tags(\"PANEL_POSITION\").Read();\n    if (newPosition === \"TOP\") {\n        movableObject.Top = 50;\n        movableObject.Left = 100;\n    } else {\n        movableObject.Top = 300;\n        movableObject.Left = 100;\n    }\n    HMIRuntime.Trace(\"Panel moved to position: \" + newPosition);\n}\n\n// Read current object values (for input fields)\nvar setpointInput = Screen.FindItem('SetpointInput');\nif (setpointInput) {\n    var currentValue = setpointInput.Text;\n    HMIRuntime.Trace(\"Current setpoint input: \" + currentValue);\n    \n    // Validate and update if needed\n    var numericValue = parseFloat(currentValue);\n    if (!isNaN(numericValue)) {\n        if (numericValue < 0) {\n            setpointInput.Text = \"0\";\n            HMIRuntime.Trace(\"Setpoint corrected to minimum value\");\n        } else if (numericValue > 100) {\n            setpointInput.Text = \"100\";\n            HMIRuntime.Trace(\"Setpoint corrected to maximum value\");\n        }\n    }\n}\n\n// Copy property name tip (as mentioned in documentation)\nHMIRuntime.Trace(\"TIP: Right-click any property and select 'Copy property name' to get the exact property name for your code\");"
    },
    {
      "id": "screen-advanced-manipulation",
      "title": "Advanced Object Manipulation",
      "category": "Screen Object Manipulation",
      "description": "Advanced techniques for working with screen objects.",
      "code": "// Advanced Object Manipulation - Siemens WinCC Unified\n// Batch update objects with same prefix\nfunction updateMotorObjects(motorNumber, status, speed) {\n    var prefix = \"Motor\" + motorNumber + \"_\";\n    var objects = [prefix + \"Status\", prefix + \"Speed\", prefix + \"Icon\"];\n    \n    for (var i = 0; i < objects.length; i++) {\n        var obj = Screen.FindItem(objects[i]);\n        if (obj) {\n            if (objects[i].indexOf(\"Status\") !== -1) {\n                obj.Text = status;\n            } else if (objects[i].indexOf(\"Speed\") !== -1) {\n                obj.Text = speed + \" RPM\";\n            } else if (objects[i].indexOf(\"Icon\") !== -1) {\n                obj.BackColor = (status === \"RUNNING\") ? 0xFF00FF00 : 0xFFFF0000;\n            }\n            HMIRuntime.Trace(\"Updated \" + objects[i]);\n        }\n    }\n}\n\n// Usage example\nupdateMotorObjects(1, \"RUNNING\", 1450);\nupdateMotorObjects(2, \"STOPPED\", 0);\n\n// Create object state management\nvar objectStates = {\n    alarmState: {\n        objects: ['AlarmIcon', 'AlarmText', 'AlarmPanel'],\n        active: {\n            visible: true,\n            color: 0xFFFF0000,\n            text: \"ALARM ACTIVE\"\n        },\n        inactive: {\n            visible: false,\n            color: 0xFF808080,\n            text: \"SYSTEM OK\"\n        }\n    }\n};\n\nfunction updateObjectGroup(groupName, isActive) {\n    var group = objectStates[groupName];\n    if (!group) return;\n    \n    var state = isActive ? group.active : group.inactive;\n    \n    for (var i = 0; i < group.objects.length; i++) {\n        var obj = Screen.FindItem(group.objects[i]);\n        if (obj) {\n            obj.Visible = state.visible;\n            obj.BackColor = state.color;\n            if (obj.Text !== undefined) {\n                obj.Text = state.text;\n            }\n            HMIRuntime.Trace(\"Updated \" + group.objects[i] + \" for state: \" + (isActive ? \"active\" : \"inactive\"));\n        }\n    }\n}\n\n// Usage example\nvar alarmActive = Tags(\"SYSTEM_ALARM_ACTIVE\").Read();\nupdateObjectGroup(\"alarmState\", alarmActive);\n\n// Object animation/blinking effect\nvar blinkingObjects = ['CriticalAlarm', 'UrgentWarning'];\nvar blinkState = Tags(\"BLINK_STATE\").Read(); // Toggle this tag every second\n\nfor (var i = 0; i < blinkingObjects.length; i++) {\n    var obj = Screen.FindItem(blinkingObjects[i]);\n    if (obj) {\n        obj.Visible = blinkState;\n        HMIRuntime.Trace(blinkingObjects[i] + \" blink state: \" + blinkState);\n    }\n}"
    },
    {
      "id": "filesystem-create-directory",
      "title": "Create Directory",
      "category": "File System Operations",
      "description": "Create directories and subdirectories with HMIRuntime.FileSystem.",
      "code": "// Create Directory - Siemens WinCC Unified\n// Create directory on Windows PC\nHMIRuntime.FileSystem.CreateDirectory(\"C:\\\\Users\\\\Public\\\\mydatadir\\\\mysubdir\").then(\n    function() {\n        HMIRuntime.Trace(\"Directory successfully created\");\n    }\n).catch(function(error) {\n    HMIRuntime.Trace(\"Error creating directory: \" + error.message);\n});\n\n// Create directory on Unified Comfort Panel (Linux)\nHMIRuntime.FileSystem.CreateDirectory(\"/home/industrial/mydatadir/mysubdir\").then(\n    function() {\n        HMIRuntime.Trace(\"Directory successfully created on Panel\");\n    }\n);\n\n// Create directory for production logs\nvar logDate = new Date();\nvar logPath = \"C:\\\\ProductionLogs\\\\\" + logDate.getFullYear() + \"\\\\\" + (logDate.getMonth() + 1);\nHMIRuntime.FileSystem.CreateDirectory(logPath).then(\n    function() {\n        HMIRuntime.Trace(\"Production log directory created: \" + logPath);\n    }\n);"
    },
    {
      "id": "filesystem-write-file",
      "title": "Write File",
      "category": "File System Operations",
      "description": "Write data to files for logging and data storage.",
      "code": "// Write File - Siemens WinCC Unified\n// Write production data to file\nvar productionData = \"Motor Speed: \" + Tags(\"MOTOR_001_Speed\").Read() + \" RPM\\n\";\nproductionData += \"Temperature: \" + Tags(\"TEMP_SENSOR_1\").Read() + \"°C\\n\";\nproductionData += \"Timestamp: \" + new Date().toISOString() + \"\\n\";\n\nHMIRuntime.FileSystem.WriteFile(\"C:\\\\Users\\\\Public\\\\production_log.txt\", productionData, \"utf8\").then(\n    function() {\n        HMIRuntime.Trace(\"Production data written successfully\");\n    }\n).catch(function(errorCode) {\n    HMIRuntime.Trace(\"Write failed errorcode=\" + errorCode);\n});\n\n// Write alarm log\nvar alarmData = \"ALARM: High temperature detected at \" + new Date().toLocaleString();\nHMIRuntime.FileSystem.WriteFile(\"C:\\\\Users\\\\Public\\\\alarm_log.txt\", alarmData, \"utf8\").then(\n    function() {\n        HMIRuntime.Trace(\"Alarm logged to file\");\n    }\n);\n\n// Write recipe data in JSON format\nvar recipeData = {\n    name: \"Recipe A\",\n    temperature: 75.0,\n    pressure: 2.5,\n    mixTime: 300\n};\nHMIRuntime.FileSystem.WriteFile(\"C:\\\\Recipes\\\\recipe_a.json\", JSON.stringify(recipeData, null, 2), \"utf8\").then(\n    function() {\n        HMIRuntime.Trace(\"Recipe saved to file\");\n    }\n);"
    },
    {
      "id": "filesystem-read-file",
      "title": "Read File",
      "category": "File System Operations",
      "description": "Read data from files for configuration and data retrieval.",
      "code": "// Read File - Siemens WinCC Unified\n// Read production log file\nHMIRuntime.FileSystem.ReadFile(\"C:\\\\Users\\\\Public\\\\production_log.txt\", \"utf8\").then(\n    function(text) {\n        HMIRuntime.Trace(\"Production log content: \" + text);\n        // Display in text field\n        Screen.Items('LogDisplay').Text = text;\n    }\n).catch(function(error) {\n    HMIRuntime.Trace(\"Error reading file: \" + error.message);\n});\n\n// Read configuration file\nHMIRuntime.FileSystem.ReadFile(\"C:\\\\Config\\\\motor_settings.txt\", \"utf8\").then(\n    function(configData) {\n        var lines = configData.split(\"\\n\");\n        for (var i = 0; i < lines.length; i++) {\n            if (lines[i].indexOf(\"MaxSpeed=\") !== -1) {\n                var maxSpeed = lines[i].split(\"=\")[1];\n                HMIRuntime.Trace(\"Max speed from config: \" + maxSpeed);\n                Tags(\"MOTOR_MAX_SPEED\").Write(parseFloat(maxSpeed));\n            }\n        }\n    }\n);\n\n// Read recipe file and parse JSON\nHMIRuntime.FileSystem.ReadFile(\"C:\\\\Recipes\\\\current_recipe.json\", \"utf8\").then(\n    function(jsonText) {\n        var recipe = JSON.parse(jsonText);\n        HMIRuntime.Trace(\"Recipe loaded: \" + recipe.name);\n        Tags(\"RECIPE_TEMP\").Write(recipe.temperature);\n        Tags(\"RECIPE_PRESSURE\").Write(recipe.pressure);\n        Tags(\"RECIPE_TIME\").Write(recipe.mixTime);\n    }\n);"
    },
    {
      "id": "filesystem-append-file",
      "title": "Append to File",
      "category": "File System Operations",
      "description": "Append data to existing files for continuous logging.",
      "code": "// Append to File - Siemens WinCC Unified\n// Append production data to log\nvar timestamp = new Date().toISOString();\nvar motorSpeed = Tags(\"MOTOR_001_Speed\").Read();\nvar temperature = Tags(\"TEMP_SENSOR_1\").Read();\nvar logEntry = timestamp + \",\" + motorSpeed + \",\" + temperature + \"\\n\";\n\nHMIRuntime.FileSystem.AppendFile(\"C:\\\\Users\\\\Public\\\\production_log.csv\", logEntry, \"utf8\").then(\n    function() {\n        HMIRuntime.Trace(\"Production data appended to log\");\n    }\n).catch(function(error) {\n    HMIRuntime.Trace(\"Error appending to file: \" + error.message);\n});\n\n// Append alarm to alarm log\nfunction logAlarm(alarmType, location, severity) {\n    var alarmEntry = new Date().toLocaleString() + \" - \" + severity + \" ALARM: \" + alarmType + \" in \" + location + \"\\n\";\n    \n    HMIRuntime.FileSystem.AppendFile(\"C:\\\\Logs\\\\alarm_history.txt\", alarmEntry, \"utf8\").then(\n        function() {\n            HMIRuntime.Trace(\"Alarm logged: \" + alarmType);\n        }\n    );\n}\n\n// Usage examples\nlogAlarm(\"High Temperature\", \"Tank 1\", \"CRITICAL\");\nlogAlarm(\"Low Pressure\", \"Pump 2\", \"WARNING\");\n\n// Append event log with tag value\nvar eventMessage = \"System started at \" + new Date().toLocaleString() + \" - Initial temp: \" + Tags(\"STARTUP_TEMP\").Read() + \"°C\\n\";\nHMIRuntime.FileSystem.AppendFile(\"C:\\\\Logs\\\\system_events.txt\", eventMessage, \"utf8\").then(\n    function() {\n        HMIRuntime.Trace(\"System event logged\");\n    }\n);"
    },
    {
      "id": "timers-setinterval",
      "title": "Set Timer Interval",
      "category": "Timer Functions",
      "description": "Create repeating timers for periodic operations.",
      "code": "// Timer SetInterval - Siemens WinCC Unified\n// Global timer variable (add to global definition area)\nvar timerId;\n\n// Example 1: Move object while button pressed\n// Add to button 'Press' event:\ntimerId = HMIRuntime.Timers.SetInterval(function() {\n    Screen.Items('Rectangle_1').Left += 5;\n    HMIRuntime.Trace(\"Object moved to position: \" + Screen.Items('Rectangle_1').Left);\n}, 100); // Every 100ms\n\n// Add to button 'Release' event:\nHMIRuntime.Timers.ClearInterval(timerId);\n\n// Example 2: Periodic data logging\nvar dataLogTimer = HMIRuntime.Timers.SetInterval(function() {\n    var temperature = Tags(\"TEMP_SENSOR_1\").Read();\n    var pressure = Tags(\"PRESSURE_SENSOR_1\").Read();\n    var logEntry = new Date().toISOString() + \",\" + temperature + \",\" + pressure + \"\\n\";\n    \n    HMIRuntime.FileSystem.AppendFile(\"C:\\\\Logs\\\\sensor_data.csv\", logEntry, \"utf8\");\n    HMIRuntime.Trace(\"Data logged - Temp: \" + temperature + \"°C, Pressure: \" + pressure + \" bar\");\n}, 60000); // Every minute\n\n// Example 3: Blink alarm indicator\nvar blinkTimer;\nvar isVisible = true;\n\nfunction startAlarmBlink() {\n    blinkTimer = HMIRuntime.Timers.SetInterval(function() {\n        isVisible = !isVisible;\n        Screen.Items('AlarmIcon').Visible = isVisible;\n    }, 500); // Blink every 500ms\n}\n\nfunction stopAlarmBlink() {\n    HMIRuntime.Timers.ClearInterval(blinkTimer);\n    Screen.Items('AlarmIcon').Visible = true; // Ensure visible when stopped\n}\n\n// Start/stop based on alarm state\nvar alarmActive = Tags(\"SYSTEM_ALARM\").Read();\nif (alarmActive) {\n    startAlarmBlink();\n} else {\n    stopAlarmBlink();\n}"
    },
    {
      "id": "timers-settimeout",
      "title": "Set Timer Timeout",
      "category": "Timer Functions",
      "description": "Create one-time delays for timed operations.",
      "code": "// Timer SetTimeout - Siemens WinCC Unified\n// Example 1: Delayed motor start sequence\nHMIRuntime.Trace(\"Starting motor sequence...\");\n\n// Step 1: Turn on cooling fan\nTags(\"COOLING_FAN\").Write(true);\nHMIRuntime.Trace(\"Cooling fan started\");\n\n// Step 2: Wait 3 seconds, then start motor\nHMIRuntime.Timers.SetTimeout(function() {\n    Tags(\"MOTOR_START\").Write(true);\n    HMIRuntime.Trace(\"Motor started after cooling delay\");\n}, 3000);\n\n// Step 3: Wait 10 seconds, then check motor status\nHMIRuntime.Timers.SetTimeout(function() {\n    var motorRunning = Tags(\"MOTOR_RUNNING\").Read();\n    if (motorRunning) {\n        HMIRuntime.Trace(\"Motor startup sequence completed successfully\");\n    } else {\n        HMIRuntime.Trace(\"ERROR: Motor failed to start within timeout period\");\n        Tags(\"MOTOR_FAULT_ALARM\").Write(true);\n    }\n}, 10000);\n\n// Example 2: Automatic screen timeout\nvar screenTimeoutId;\n\nfunction resetScreenTimeout() {\n    // Clear existing timeout\n    if (screenTimeoutId) {\n        HMIRuntime.Timers.ClearTimeout(screenTimeoutId);\n    }\n    \n    // Set new timeout for 5 minutes\n    screenTimeoutId = HMIRuntime.Timers.SetTimeout(function() {\n        HMIRuntime.Trace(\"Screen timeout - returning to main view\");\n        HMIRuntime.Screens.Show(\"MainOverview\");\n    }, 300000); // 5 minutes\n}\n\n// Call resetScreenTimeout() on user interaction\nresetScreenTimeout();\n\n// Example 3: Delayed alarm acknowledgment\nfunction acknowledgeAlarmWithDelay(alarmId, delaySeconds) {\n    HMIRuntime.Trace(\"Alarm acknowledgment scheduled in \" + delaySeconds + \" seconds\");\n    \n    HMIRuntime.Timers.SetTimeout(function() {\n        Tags(alarmId + \"_ACK\").Write(true);\n        HMIRuntime.Trace(\"Alarm \" + alarmId + \" automatically acknowledged\");\n    }, delaySeconds * 1000);\n}\n\n// Usage\nacknowledgeAlarmWithDelay(\"TEMP_HIGH_001\", 30); // Auto-ack after 30 seconds"
    },
    {
      "id": "alarm-subscription",
      "title": "Alarm Subscription and Filtering",
      "category": "Alarm Management",
      "description": "Subscribe to and filter alarms with HMIRuntime.Alarming.",
      "code": "// Alarm Subscription - Siemens WinCC Unified\n// Create alarm subscription with filtering\nvar alarmSubscription = HMIRuntime.Alarming.CreateSubscription();\n\n// Filter for Warning class alarms only\nalarmSubscription.Filter = 'AlarmClassName=\"Warning\"';\nalarmSubscription.Language = 1033; // English\n\n// Handle incoming alarms\nalarmSubscription.OnAlarm = function(ErrorCode, SystemNames, ResultSet) {\n    if (ErrorCode === 0) {\n        HMIRuntime.Trace(\"Received \" + ResultSet.length + \" warning alarms\");\n        \n        for (var index = 0; index < ResultSet.length; index++) {\n            var alarm = ResultSet[index];\n            HMIRuntime.Trace(\"Alarm \" + (index + 1) + \": \" + alarm.Name);\n            HMIRuntime.Trace(\"State: \" + alarm.State);\n            HMIRuntime.Trace(\"Message: \" + alarm.MessageText);\n            \n            // Update alarm display\n            Screen.Items('AlarmList').Text += alarm.Name + \" - \" + alarm.State + \"\\n\";\n        }\n    } else {\n        HMIRuntime.Trace(\"Alarm subscription error: \" + ErrorCode);\n    }\n};\n\n// Start the subscription\nalarmSubscription.Start();\nHMIRuntime.Trace(\"Alarm subscription started for Warning class\");\n\n// Example 2: Critical alarms subscription\nvar criticalAlarms = HMIRuntime.Alarming.CreateSubscription();\ncriticalAlarms.Filter = 'AlarmClassName=\"Critical\"';\ncriticalAlarms.Language = 1033;\n\ncriticalAlarms.OnAlarm = function(ErrorCode, SystemNames, ResultSet) {\n    if (ErrorCode === 0 && ResultSet.length > 0) {\n        // Flash critical alarm indicator\n        Screen.Items('CriticalAlarmIcon').BackColor = 0xFFFF0000; // Red\n        Screen.Items('CriticalAlarmIcon').Visible = true;\n        \n        // Count critical alarms\n        var criticalCount = 0;\n        for (var i = 0; i < ResultSet.length; i++) {\n            if (ResultSet[i].State === \"Active\") {\n                criticalCount++;\n            }\n        }\n        \n        Screen.Items('CriticalAlarmCount').Text = criticalCount.toString();\n        Tags(\"CRITICAL_ALARM_COUNT\").Write(criticalCount);\n        \n        HMIRuntime.Trace(\"Critical alarms active: \" + criticalCount);\n    }\n};\n\ncriticalAlarms.Start();\n\n// Function to stop subscriptions\nfunction stopAlarmSubscriptions() {\n    alarmSubscription.Stop();\n    criticalAlarms.Stop();\n    HMIRuntime.Trace(\"All alarm subscriptions stopped\");\n}"
    },
    {
      "id": "language-management",
      "title": "Runtime Language Management",
      "category": "Language Operations",
      "description": "Switch runtime language using HMIRuntime.Language functions.",
      "code": "// Language Management - Siemens WinCC Unified\n// Set specific language by ID\nfunction setLanguage(languageId, languageName) {\n    try {\n        HMIRuntime.Language.SetLanguage(languageId);\n        HMIRuntime.Trace(\"Language changed to: \" + languageName + \" (ID: \" + languageId + \")\");\n        return true;\n    } catch (error) {\n        HMIRuntime.Trace(\"Error changing language: \" + error.message);\n        return false;\n    }\n}\n\n// Common language switches\nfunction setGerman() {\n    setLanguage(1031, \"German\");  // de_DE\n}\n\nfunction setEnglish() {\n    setLanguage(1033, \"English\"); // en_US\n}\n\nfunction setFrench() {\n    setLanguage(1036, \"French\");  // fr_FR\n}\n\nfunction setSpanish() {\n    setLanguage(1034, \"Spanish\"); // es_ES\n}\n\nfunction setChinese() {\n    setLanguage(2052, \"Chinese\"); // zh_CN\n}\n\n// Toggle between configured languages\nfunction toggleLanguage() {\n    try {\n        HMIRuntime.Language.ToggleLanguage();\n        HMIRuntime.Trace(\"Language toggled to next configured language\");\n    } catch (error) {\n        HMIRuntime.Trace(\"Error toggling language: \" + error.message);\n    }\n}\n\n// Language selection based on operator preference\nvar operatorLanguage = Tags(\"OPERATOR_LANGUAGE\").Read();\nswitch (operatorLanguage) {\n    case \"DE\":\n        setGerman();\n        break;\n    case \"EN\":\n        setEnglish();\n        break;\n    case \"FR\":\n        setFrench();\n        break;\n    case \"ES\":\n        setSpanish();\n        break;\n    case \"CN\":\n        setChinese();\n        break;\n    default:\n        setEnglish(); // Default to English\n        HMIRuntime.Trace(\"Unknown language code, defaulting to English\");\n}\n\n// Store current language selection\nfunction saveLanguagePreference(languageCode) {\n    Tags(\"SAVED_LANGUAGE\").Write(languageCode);\n    HMIRuntime.Trace(\"Language preference saved: \" + languageCode);\n}\n\n// Language change with user confirmation\nfunction changeLanguageWithConfirm(newLanguageId, languageName) {\n    var currentLang = Tags(\"CURRENT_LANGUAGE\").Read();\n    if (currentLang !== newLanguageId) {\n        setLanguage(newLanguageId, languageName);\n        saveLanguagePreference(newLanguageId);\n        Tags(\"CURRENT_LANGUAGE\").Write(newLanguageId);\n        \n        // Update language indicator on screen\n        Screen.Items('LanguageIndicator').Text = languageName;\n    }\n}"
    },
    {
      "id": "popup-management",
      "title": "Popup Screen Management",
      "category": "Screen Management",
      "description": "Open and close popup screens with advanced options.",
      "code": "// Popup Management - Siemens WinCC Unified\n// Open popup screen with parameters\nfunction openMachineStatePopup() {\n    // Parameters: (PopupName, ScreenName, ToggleOpen, Template, Width, Height, IsModal, Position)\n    HMIRuntime.UI.SysFct.OpenScreenInPopup(\n        \"MachineState\",           // Popup window name\n        \"Popup_Machine_State\",   // Screen to display\n        false,                   // Don't toggle (just open)\n        \"\",                      // No template\n        400,                     // Width\n        300,                     // Height\n        false,                   // Not modal\n        undefined                // Default position\n    );\n    HMIRuntime.Trace(\"Machine state popup opened\");\n}\n\n// Open popup without frame/header\nfunction openFramelessPopup(popupName, screenName) {\n    // First open the popup\n    HMIRuntime.UI.SysFct.OpenScreenInPopup(popupName, screenName, false, \"\", 350, 250, false, undefined);\n    \n    // Remove frame and header\n    HMIRuntime.UI.SysFct.SetPropertyValue(\"/\" + popupName, \"WindowFlags\", 0);\n    HMIRuntime.Trace(\"Frameless popup opened: \" + popupName);\n}\n\n// Close specific popup\nfunction closeMachineStatePopup() {\n    HMIRuntime.UI.SysFct.ClosePopup(\"/MachineState\");\n    HMIRuntime.Trace(\"Machine state popup closed\");\n}\n\n// Toggle popup (open if closed, close if open)\nfunction toggleAlarmDetailsPopup() {\n    HMIRuntime.UI.SysFct.OpenScreenInPopup(\n        \"AlarmDetails\",\n        \"Popup_Alarm_Details\",\n        true,                    // Toggle mode\n        \"\",\n        500,\n        400,\n        false,\n        undefined\n    );\n    HMIRuntime.Trace(\"Alarm details popup toggled\");\n}\n\n// Open modal popup (blocks interaction with main screen)\nfunction openModalSettingsPopup() {\n    HMIRuntime.UI.SysFct.OpenScreenInPopup(\n        \"SystemSettings\",\n        \"Popup_System_Settings\",\n        false,\n        \"\",\n        600,\n        450,\n        true,                    // Modal popup\n        undefined\n    );\n    HMIRuntime.Trace(\"Modal settings popup opened\");\n}\n\n// Smart popup management with error handling\nfunction openPopupSafely(popupName, screenName, width, height, isModal) {\n    try {\n        HMIRuntime.UI.SysFct.OpenScreenInPopup(\n            popupName,\n            screenName,\n            false,\n            \"\",\n            width || 400,\n            height || 300,\n            isModal || false,\n            undefined\n        );\n        HMIRuntime.Trace(\"Popup opened successfully: \" + popupName);\n        return true;\n    } catch (error) {\n        HMIRuntime.Trace(\"Error opening popup: \" + error.message);\n        return false;\n    }\n}\n\n// Usage examples\nopenMachineStatePopup();\nopenFramelessPopup(\"QuickView\", \"Popup_Quick_Status\");\nopenPopupSafely(\"MotorDetails\", \"Popup_Motor_Info\", 450, 350, false);\n\n// Close all popups function\nfunction closeAllPopups() {\n    var popupNames = [\"MachineState\", \"AlarmDetails\", \"SystemSettings\", \"QuickView\", \"MotorDetails\"];\n    for (var i = 0; i < popupNames.length; i++) {\n        try {\n            HMIRuntime.UI.SysFct.ClosePopup(\"/\" + popupNames[i]);\n        } catch (error) {\n            // Ignore errors for popups that aren't open\n        }\n    }\n    HMIRuntime.Trace(\"All popups closed\");\n}"
    },
    {
      "id": "dataset-management",
      "title": "DataSet Management",
      "category": "Data Storage",
      "description": "Manage session and screen local data storage.",
      "code": "// DataSet Management - Siemens WinCC Unified\n// Session-local DataSet (persists across screen changes but cleared on logout)\nvar ui = HMIRuntime.UI;\n\n// Add data to session DataSet\nui.DataSet.Add('OPERATOR_NAME', 'John Smith');\nui.DataSet.Add('SHIFT_START_TIME', new Date().toISOString());\nui.DataSet.Add('PRODUCTION_COUNT', 0);\nui.DataSet.Add('LAST_ALARM_TIME', '');\n\nHMIRuntime.Trace(\"Session data initialized\");\n\n// Read and update session data\nfunction updateProductionCount() {\n    var currentCount = ui.DataSet.Exists('PRODUCTION_COUNT') ? ui.DataSet.Get('PRODUCTION_COUNT').Value : 0;\n    var newCount = currentCount + 1;\n    \n    if (ui.DataSet.Exists('PRODUCTION_COUNT')) {\n        ui.DataSet.Remove('PRODUCTION_COUNT');\n    }\n    ui.DataSet.Add('PRODUCTION_COUNT', newCount);\n    \n    HMIRuntime.Trace(\"Production count updated: \" + newCount);\n    return newCount;\n}\n\n// Display all session data\nfunction displaySessionData() {\n    HMIRuntime.Trace(\"=== Session DataSet Contents ===\");\n    for (var index in ui.DataSet) {\n        var item = ui.DataSet[index];\n        HMIRuntime.Trace(\"Key: \" + item.Name + \", Value: \" + item.Value);\n    }\n}\n\n// Screen-local DataSet (cleared when changing screens)\nvar screen = Screen;\n\n// Add screen-specific data\nscreen.DataSet.Add('SCREEN_ENTER_TIME', new Date().toISOString());\nscreen.DataSet.Add('USER_SELECTIONS', []);\nscreen.DataSet.Add('TEMP_VALUES', {});\n\n// Manage screen data\nfunction addUserSelection(selection) {\n    var selections = screen.DataSet.Exists('USER_SELECTIONS') ? screen.DataSet.Get('USER_SELECTIONS').Value : [];\n    selections.push(selection);\n    \n    screen.DataSet.Remove('USER_SELECTIONS');\n    screen.DataSet.Add('USER_SELECTIONS', selections);\n    \n    HMIRuntime.Trace(\"User selection added: \" + selection);\n}\n\n// Store temporary values\nfunction storeTempValue(key, value) {\n    var tempValues = screen.DataSet.Exists('TEMP_VALUES') ? screen.DataSet.Get('TEMP_VALUES').Value : {};\n    tempValues[key] = value;\n    \n    screen.DataSet.Remove('TEMP_VALUES');\n    screen.DataSet.Add('TEMP_VALUES', tempValues);\n    \n    HMIRuntime.Trace(\"Temporary value stored - \" + key + \": \" + value);\n}\n\n// Get stored value safely\nfunction getStoredValue(dataSet, key, defaultValue) {\n    if (dataSet.Exists(key)) {\n        return dataSet.Get(key).Value;\n    } else {\n        HMIRuntime.Trace(\"Key '\" + key + \"' not found, using default: \" + defaultValue);\n        return defaultValue;\n    }\n}\n\n// Clear old data\nfunction clearOldSessionData() {\n    var keysToRemove = ['OLD_DATA_1', 'OLD_DATA_2', 'TEMP_CACHE'];\n    for (var i = 0; i < keysToRemove.length; i++) {\n        if (ui.DataSet.Exists(keysToRemove[i])) {\n            ui.DataSet.Remove(keysToRemove[i]);\n            HMIRuntime.Trace(\"Removed old data: \" + keysToRemove[i]);\n        }\n    }\n}\n\n// Usage examples\nupdateProductionCount();\naddUserSelection(\"Motor 1\");\nstoreTempValue(\"LAST_TEMP\", 78.5);\ndisplaySessionData();\n\n// Get operator name safely\nvar operatorName = getStoredValue(ui.DataSet, 'OPERATOR_NAME', 'Unknown Operator');\nHMIRuntime.Trace(\"Current operator: \" + operatorName);"
    },
    {
      "id": "screen-information",
      "title": "Screen Information and Objects",
      "category": "Screen Management",
      "description": "Get screen details, count objects, and extract screen information.",
      "code": "// Screen Information - Siemens WinCC Unified\n// Get current screen name\nvar currentScreenName = Screen.Name;\nHMIRuntime.Trace(\"Current screen: \" + currentScreenName);\n\n// Extract information from screen name\nif (currentScreenName.indexOf('_') !== -1) {\n    var screenParts = currentScreenName.split('_');\n    var screenType = screenParts[0];    // e.g., \"Motor\"\n    var screenNumber = screenParts[1];  // e.g., \"01\"\n    HMIRuntime.Trace(\"Screen type: \" + screenType + \", Number: \" + screenNumber);\n}\n\n// Count all objects on screen\nvar screenItems = Screen.Items;\nvar totalObjects = screenItems.Count;\nHMIRuntime.Trace(\"Total objects on screen: \" + totalObjects);\n\n// List all object names\nHMIRuntime.Trace(\"=== Screen Objects ===\");\nfor (var i in Screen.Items) {\n    var objectName = Screen.Items(Number(i)).Name;\n    HMIRuntime.Trace(\"Object \" + (Number(i) + 1) + \": \" + objectName);\n}\n\n// Find objects by type/pattern\nfunction findObjectsByPattern(pattern) {\n    var matchingObjects = [];\n    for (var i in Screen.Items) {\n        var objectName = Screen.Items(Number(i)).Name;\n        if (objectName.indexOf(pattern) !== -1) {\n            matchingObjects.push(objectName);\n        }\n    }\n    return matchingObjects;\n}\n\n// Find all motor-related objects\nvar motorObjects = findObjectsByPattern(\"Motor\");\nHMIRuntime.Trace(\"Found \" + motorObjects.length + \" motor objects:\");\nfor (var j = 0; j < motorObjects.length; j++) {\n    HMIRuntime.Trace(\"  - \" + motorObjects[j]);\n}\n\n// Count objects by type\nfunction countObjectTypes() {\n    var typeCounts = {\n        buttons: 0,\n        labels: 0,\n        inputs: 0,\n        indicators: 0,\n        others: 0\n    };\n    \n    for (var i in Screen.Items) {\n        var objectName = Screen.Items(Number(i)).Name.toLowerCase();\n        \n        if (objectName.indexOf('button') !== -1 || objectName.indexOf('btn') !== -1) {\n            typeCounts.buttons++;\n        } else if (objectName.indexOf('label') !== -1 || objectName.indexOf('text') !== -1) {\n            typeCounts.labels++;\n        } else if (objectName.indexOf('input') !== -1 || objectName.indexOf('field') !== -1) {\n            typeCounts.inputs++;\n        } else if (objectName.indexOf('indicator') !== -1 || objectName.indexOf('light') !== -1) {\n            typeCounts.indicators++;\n        } else {\n            typeCounts.others++;\n        }\n    }\n    \n    HMIRuntime.Trace(\"Object count by type:\");\n    HMIRuntime.Trace(\"  Buttons: \" + typeCounts.buttons);\n    HMIRuntime.Trace(\"  Labels: \" + typeCounts.labels);\n    HMIRuntime.Trace(\"  Inputs: \" + typeCounts.inputs);\n    HMIRuntime.Trace(\"  Indicators: \" + typeCounts.indicators);\n    HMIRuntime.Trace(\"  Others: \" + typeCounts.others);\n    \n    return typeCounts;\n}\n\n// Get screen statistics\nfunction getScreenStatistics() {\n    var stats = {\n        screenName: Screen.Name,\n        totalObjects: Screen.Items.Count,\n        objectTypes: countObjectTypes(),\n        loadTime: new Date().toISOString()\n    };\n    \n    HMIRuntime.Trace(\"Screen statistics generated for: \" + stats.screenName);\n    return stats;\n}\n\n// Usage examples\ncountObjectTypes();\nvar screenStats = getScreenStatistics();\n\n// Store screen info in DataSet\nScreen.DataSet.Add('SCREEN_STATS', screenStats);\nHMIRuntime.Trace(\"Screen statistics stored in DataSet\");"
    },
    {
      "id": "math-random",
      "title": "Random Number Generation",
      "category": "JavaScript Basics",
      "description": "Generate random numbers for testing and simulation.",
      "code": "// Random Number Generation - Siemens WinCC Unified\n// Generate random number between 0 and 1\nvar randomValue = Math.random();\nHMIRuntime.Trace(\"Random value (0-1): \" + randomValue);\n\n// Generate random integer between min and max\nfunction getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nvar randomSpeed = getRandomInt(100, 1800);\nHMIRuntime.Trace(\"Random motor speed: \" + randomSpeed + \" RPM\");\n\n// Generate random temperature for simulation\nvar baseTemp = 75.0;\nvar variation = 10.0;\nvar randomTemp = baseTemp + (Math.random() * variation * 2) - variation;\nHMIRuntime.Trace(\"Simulated temperature: \" + randomTemp.toFixed(1) + \"°C\");\n\n// Generate random equipment ID for testing\nvar equipmentTypes = [\"MOTOR\", \"PUMP\", \"VALVE\", \"SENSOR\"];\nvar randomType = equipmentTypes[Math.floor(Math.random() * equipmentTypes.length)];\nvar randomId = getRandomInt(1, 999).toString().padStart(3, '0');\nvar randomEquipment = randomType + \"_\" + randomId;\nHMIRuntime.Trace(\"Random equipment: \" + randomEquipment);\n\n// Generate random production data for testing\nvar dailyProduction = getRandomInt(800, 1200);\nvar efficiency = (85 + Math.random() * 10).toFixed(1);\nHMIRuntime.Trace(\"Test data - Production: \" + dailyProduction + \" units, Efficiency: \" + efficiency + \"%\");"
    },
    {
      "id": "tagset-operations",
      "title": "TagSet Bulk Operations",
      "category": "Tag Operations",
      "description": "Read multiple tags efficiently using TagSet for better performance.",
      "code": "// TagSet Operations - Siemens WinCC Unified\n// Efficient way to read multiple tags at once\nfunction readMultipleTagsEfficient() {\n    try {\n        // Create TagSet with multiple tag names\n        var tagSet = Tags.CreateTagSet([\"MOTOR_001_Speed\", \"MOTOR_001_Current\", \"MOTOR_001_Temperature\"]);\n        \n        // Read all tags in one operation (much faster than individual reads)\n        tagSet.Read();\n        \n        // Access the values\n        var speed = tagSet.Item(\"MOTOR_001_Speed\").Value;\n        var current = tagSet.Item(\"MOTOR_001_Current\").Value;\n        var temperature = tagSet.Item(\"MOTOR_001_Temperature\").Value;\n        \n        HMIRuntime.Trace(\"Motor Status - Speed: \" + speed + \" RPM, Current: \" + current + \" A, Temp: \" + temperature + \"°C\");\n        \n        return {speed: speed, current: current, temperature: temperature};\n    } catch (error) {\n        HMIRuntime.Trace(\"Error reading TagSet: \" + error.message);\n        return null;\n    }\n}\n\n// Compare: Inefficient individual tag reading (NOT recommended)\nfunction readMultipleTagsInefficient() {\n    // This is slower - multiple individual read operations\n    var speed = Tags(\"MOTOR_001_Speed\").Read();\n    var current = Tags(\"MOTOR_001_Current\").Read();\n    var temperature = Tags(\"MOTOR_001_Temperature\").Read();\n    \n    HMIRuntime.Trace(\"Individual reads completed (slower method)\");\n}\n\n// Example usage\nvar motorData = readMultipleTagsEfficient();\nif (motorData) {\n    // Process the data\n    if (motorData.temperature > 85) {\n        HMIRuntime.Trace(\"WARNING: Motor temperature high!\");\n    }\n}"
    },
    {
      "id": "alert-dialogs",
      "title": "Alert Dialogs and Notifications",
      "category": "User Interface",
      "description": "Handle user notifications (alert() not available in WinCC for security).",
      "code": "// Alert Dialogs - Siemens WinCC Unified\n// NOTE: alert() function is NOT available in WinCC Unified for security reasons\n// Use these alternatives instead:\n\n// 1. Use HMIRuntime.Trace for debugging messages\nfunction showDebugMessage(message) {\n    HMIRuntime.Trace(\"DEBUG: \" + message);\n    // This appears in TraceViewer for diagnostics\n}\n\n// 2. Update screen objects to show status\nfunction showStatusOnScreen(message, isError) {\n    var statusLabel = Screen.FindItem('StatusMessage');\n    if (statusLabel) {\n        statusLabel.Text = message;\n        statusLabel.ForeColor = isError ? 0xFFFF0000 : 0xFF000000; // Red for errors, black for normal\n    }\n    \n    // Also log the message\n    HMIRuntime.Trace(isError ? \"ERROR: \" + message : \"INFO: \" + message);\n}\n\n// 3. Use alarm system for critical notifications\nfunction triggerSystemAlarm(alarmText, priority) {\n    // This would integrate with WinCC alarm system\n    Tags(\"SYSTEM_ALARM_TEXT\").Write(alarmText);\n    Tags(\"SYSTEM_ALARM_PRIORITY\").Write(priority);\n    Tags(\"SYSTEM_ALARM_TRIGGER\").Write(true);\n    \n    HMIRuntime.Trace(\"ALARM TRIGGERED: \" + alarmText);\n}\n\n// 4. Show popup screen for important messages\nfunction showImportantMessage(title, message) {\n    // Store message data for popup screen\n    Tags(\"POPUP_TITLE\").Write(title);\n    Tags(\"POPUP_MESSAGE\").Write(message);\n    \n    // Open popup screen\n    try {\n        HMIRuntime.Screens.Show(\"MessagePopup\");\n        HMIRuntime.Trace(\"Message popup shown: \" + title);\n    } catch (error) {\n        HMIRuntime.Trace(\"Failed to show popup: \" + error.message);\n        // Fallback to trace message\n        HMIRuntime.Trace(\"MESSAGE: \" + title + \" - \" + message);\n    }\n}\n\n// Usage examples\nshowDebugMessage(\"Motor startup sequence initiated\");\nshowStatusOnScreen(\"System ready for operation\", false);\ntriggerSystemAlarm(\"High temperature detected in Tank 1\", \"HIGH\");\nshowImportantMessage(\"Production Complete\", \"Daily production target reached: 1000 units\");"
    },
    {
      "id": "external-programs",
      "title": "External Program Execution",
      "category": "System Integration",
      "description": "Start external programs from WinCC runtime (limited on PC, full on Panel).",
      "code": "// External Program Execution - Siemens WinCC Unified\n// NOTE: StartProgram function has different capabilities on PC vs Unified Comfort Panel\n\n// For Unified Comfort Panel - Can start programs with user interfaces\nfunction openDocumentViewer(filePath) {\n    try {\n        // Open LibreOffice on Unified Comfort Panel\n        HMIRuntime.StartProgram(\"/opt/siemens/App_Restriction/runLibreoffice.sh\", filePath);\n        HMIRuntime.Trace(\"Document viewer opened: \" + filePath);\n    } catch (error) {\n        HMIRuntime.Trace(\"Failed to open document viewer: \" + error.message);\n    }\n}\n\nfunction openPDFViewer(pdfPath) {\n    try {\n        // Open PDF viewer on Unified Comfort Panel\n        HMIRuntime.StartProgram(\"/opt/siemens/App_Restriction/runOkular.sh\", pdfPath);\n        HMIRuntime.Trace(\"PDF viewer opened: \" + pdfPath);\n    } catch (error) {\n        HMIRuntime.Trace(\"Failed to open PDF viewer: \" + error.message);\n    }\n}\n\nfunction openFileBrowser() {\n    try {\n        // Open file browser on Unified Comfort Panel\n        HMIRuntime.StartProgram(\"/opt/siemens/App_Restriction/runThunar.sh\");\n        HMIRuntime.Trace(\"File browser opened\");\n    } catch (error) {\n        HMIRuntime.Trace(\"Failed to open file browser: \" + error.message);\n    }\n}\n\nfunction openWebBrowser(url) {\n    try {\n        // Open web browser on Unified Comfort Panel\n        HMIRuntime.StartProgram(\"/opt/siemens/App_Restriction/runChromium.sh\", url);\n        HMIRuntime.Trace(\"Web browser opened: \" + url);\n    } catch (error) {\n        HMIRuntime.Trace(\"Failed to open web browser: \" + error.message);\n    }\n}\n\n// For PC Runtime - Limited to programs without user interface\n// Use alternative methods for PC runtime\nfunction executeBackgroundTask() {\n    try {\n        // On PC runtime, can only start background processes\n        // For programs with UI, need to use ODK or Open Pipe\n        HMIRuntime.Trace(\"Background task execution initiated\");\n        \n        // Alternative: Write command to file for external monitoring\n        var command = \"START_BACKUP_\" + new Date().toISOString();\n        HMIRuntime.FileSystem.WriteFile(\"C:\\\\Commands\\\\backup_cmd.txt\", command, \"utf8\");\n        HMIRuntime.Trace(\"Command file written for external execution\");\n    } catch (error) {\n        HMIRuntime.Trace(\"Failed to execute background task: \" + error.message);\n    }\n}\n\n// Cross-platform function\nfunction openMaintenanceManual() {\n    var manualPath = \"/production/manuals/maintenance_guide.pdf\";\n    \n    // Check if running on Unified Comfort Panel or PC\n    if (typeof HMIRuntime.StartProgram === \"function\") {\n        openPDFViewer(manualPath);\n    } else {\n        HMIRuntime.Trace(\"Manual location: \" + manualPath);\n        showStatusOnScreen(\"Manual available at: \" + manualPath, false);\n    }\n}\n\n// Usage examples\n// openDocumentViewer(\"/production/reports/daily_report.xlsx\");\n// openPDFViewer(\"/manuals/equipment_manual.pdf\");\n// openWebBrowser(\"http://production-dashboard.local\");\n// executeBackgroundTask();\nopenMaintenanceManual();"
    },
    {
      "id": "udt-access",
      "title": "UDT (User Defined Type) Access",
      "category": "Tag Operations",
      "description": "Access individual elements of User Defined Types in WinCC.",
      "code": "// UDT Access - Siemens WinCC Unified\n// Access individual elements of User Defined Types (UDTs)\n\n// Example UDT structure: Motor_UDT with elements:\n// - Name (String)\n// - Speed (Real)\n// - Current (Real)\n// - Temperature (Real)\n// - Running (Bool)\n// - FaultCode (Int)\n\n// Read UDT elements individually\nfunction readMotorUDT(motorInstance) {\n    try {\n        // Access UDT elements using dot notation: UDT_Instance.Element_Name\n        var motorName = Tags(motorInstance + '.Name').Read();\n        var motorSpeed = Tags(motorInstance + '.Speed').Read();\n        var motorCurrent = Tags(motorInstance + '.Current').Read();\n        var motorTemp = Tags(motorInstance + '.Temperature').Read();\n        var isRunning = Tags(motorInstance + '.Running').Read();\n        var faultCode = Tags(motorInstance + '.FaultCode').Read();\n        \n        HMIRuntime.Trace(\"Motor UDT Data for \" + motorInstance + \":\");\n        HMIRuntime.Trace(\"  Name: \" + motorName);\n        HMIRuntime.Trace(\"  Speed: \" + motorSpeed + \" RPM\");\n        HMIRuntime.Trace(\"  Current: \" + motorCurrent + \" A\");\n        HMIRuntime.Trace(\"  Temperature: \" + motorTemp + \"°C\");\n        HMIRuntime.Trace(\"  Running: \" + isRunning);\n        HMIRuntime.Trace(\"  Fault Code: \" + faultCode);\n        \n        return {\n            name: motorName,\n            speed: motorSpeed,\n            current: motorCurrent,\n            temperature: motorTemp,\n            running: isRunning,\n            faultCode: faultCode\n        };\n    } catch (error) {\n        HMIRuntime.Trace(\"Error reading motor UDT: \" + error.message);\n        return null;\n    }\n}\n\n// Write to UDT elements\nfunction updateMotorSetpoints(motorInstance, newSpeed, startMotor) {\n    try {\n        Tags(motorInstance + '.SpeedSetpoint').Write(newSpeed);\n        Tags(motorInstance + '.StartCommand').Write(startMotor);\n        \n        HMIRuntime.Trace(\"Motor \" + motorInstance + \" updated - Speed: \" + newSpeed + \", Start: \" + startMotor);\n        return true;\n    } catch (error) {\n        HMIRuntime.Trace(\"Error updating motor UDT: \" + error.message);\n        return false;\n    }\n}\n\n// Process multiple motor UDTs\nfunction checkAllMotors() {\n    var motorInstances = [\"Motor_001\", \"Motor_002\", \"Motor_003\"];\n    var runningMotors = 0;\n    var faultyMotors = [];\n    \n    for (var i = 0; i < motorInstances.length; i++) {\n        var motorData = readMotorUDT(motorInstances[i]);\n        if (motorData) {\n            if (motorData.running) {\n                runningMotors++;\n            }\n            if (motorData.faultCode !== 0) {\n                faultyMotors.push(motorInstances[i] + \" (Code: \" + motorData.faultCode + \")\");\n            }\n        }\n    }\n    \n    HMIRuntime.Trace(\"Motor Summary - Running: \" + runningMotors + \"/\" + motorInstances.length);\n    if (faultyMotors.length > 0) {\n        HMIRuntime.Trace(\"Motors with faults: \" + faultyMotors.join(\", \"));\n    }\n}\n\n// Tank UDT example\nfunction readTankUDT(tankInstance) {\n    try {\n        var level = Tags(tankInstance + '.Level').Read();\n        var temperature = Tags(tankInstance + '.Temperature').Read();\n        var pressure = Tags(tankInstance + '.Pressure').Read();\n        var valveOpen = Tags(tankInstance + '.OutletValve').Read();\n        \n        HMIRuntime.Trace(\"Tank \" + tankInstance + \" - Level: \" + level + \"%, Temp: \" + temperature + \"°C, Pressure: \" + pressure + \" bar\");\n        \n        return {level: level, temperature: temperature, pressure: pressure, valveOpen: valveOpen};\n    } catch (error) {\n        HMIRuntime.Trace(\"Error reading tank UDT: \" + error.message);\n        return null;\n    }\n}\n\n// Usage examples\nvar motor1Data = readMotorUDT(\"Motor_001\");\nif (motor1Data && motor1Data.temperature > 85) {\n    HMIRuntime.Trace(\"WARNING: Motor 1 temperature high!\");\n}\n\nupdateMotorSetpoints(\"Motor_002\", 1450, true);\ncheckAllMotors();\nreadTankUDT(\"Tank_001\");"
    },
    {
      "id": "dataset-management",
      "title": "DataSet Management",
      "category": "Data Storage",
      "description": "Manage session and screen local data storage.",
      "code": "// DataSet Management - Siemens WinCC Unified\n// Session-local DataSet (persists across screen changes but cleared on logout)\nvar ui = HMIRuntime.UI;\n\n// Add data to session DataSet\nui.DataSet.Add('OPERATOR_NAME', 'John Smith');\nui.DataSet.Add('SHIFT_START_TIME', new Date().toISOString());\nui.DataSet.Add('PRODUCTION_COUNT', 0);\nui.DataSet.Add('LAST_ALARM_TIME', '');\n\nHMIRuntime.Trace(\"Session data initialized\");\n\n// Read and update session data\nfunction updateProductionCount() {\n    var currentCount = ui.DataSet.Exists('PRODUCTION_COUNT') ? ui.DataSet.Get('PRODUCTION_COUNT').Value : 0;\n    var newCount = currentCount + 1;\n    \n    if (ui.DataSet.Exists('PRODUCTION_COUNT')) {\n        ui.DataSet.Remove('PRODUCTION_COUNT');\n    }\n    ui.DataSet.Add('PRODUCTION_COUNT', newCount);\n    \n    HMIRuntime.Trace(\"Production count updated: \" + newCount);\n    return newCount;\n}\n\n// Display all session data\nfunction displaySessionData() {\n    HMIRuntime.Trace(\"=== Session DataSet Contents ===\");\n    for (var index in ui.DataSet) {\n        var item = ui.DataSet[index];\n        HMIRuntime.Trace(\"Key: \" + item.Name + \", Value: \" + item.Value);\n    }\n}\n\n// Screen-local DataSet (cleared when changing screens)\nvar screen = Screen;\n\n// Add screen-specific data\nscreen.DataSet.Add('SCREEN_ENTER_TIME', new Date().toISOString());\nscreen.DataSet.Add('USER_SELECTIONS', []);\nscreen.DataSet.Add('TEMP_VALUES', {});\n\n// Manage screen data\nfunction addUserSelection(selection) {\n    var selections = screen.DataSet.Exists('USER_SELECTIONS') ? screen.DataSet.Get('USER_SELECTIONS').Value : [];\n    selections.push(selection);\n    \n    screen.DataSet.Remove('USER_SELECTIONS');\n    screen.DataSet.Add('USER_SELECTIONS', selections);\n    \n    HMIRuntime.Trace(\"User selection added: \" + selection);\n}\n\n// Store temporary values\nfunction storeTempValue(key, value) {\n    var tempValues = screen.DataSet.Exists('TEMP_VALUES') ? screen.DataSet.Get('TEMP_VALUES').Value : {};\n    tempValues[key] = value;\n    \n    screen.DataSet.Remove('TEMP_VALUES');\n    screen.DataSet.Add('TEMP_VALUES', tempValues);\n    \n    HMIRuntime.Trace(\"Temporary value stored - \" + key + \": \" + value);\n}\n\n// Get stored value safely\nfunction getStoredValue(dataSet, key, defaultValue) {\n    if (dataSet.Exists(key)) {\n        return dataSet.Get(key).Value;\n    } else {\n        HMIRuntime.Trace(\"Key '\" + key + \"' not found, using default: \" + defaultValue);\n        return defaultValue;\n    }\n}\n\n// Clear old data\nfunction clearOldSessionData() {\n    var keysToRemove = ['OLD_DATA_1', 'OLD_DATA_2', 'TEMP_CACHE'];\n    for (var i = 0; i < keysToRemove.length; i++) {\n        if (ui.DataSet.Exists(keysToRemove[i])) {\n            ui.DataSet.Remove(keysToRemove[i]);\n            HMIRuntime.Trace(\"Removed old data: \" + keysToRemove[i]);\n        }\n    }\n}\n\n// Usage examples\nupdateProductionCount();\naddUserSelection(\"Motor 1\");\nstoreTempValue(\"LAST_TEMP\", 78.5);\ndisplaySessionData();\n\n// Get operator name safely\nvar operatorName = getStoredValue(ui.DataSet, 'OPERATOR_NAME', 'Unknown Operator');\nHMIRuntime.Trace(\"Current operator: \" + operatorName);"
    },
    {
      "id": "touch-direction",
      "title": "Touch Area Direction Detection",
      "category": "User Interface",
      "description": "Detect touch gesture directions in WinCC Unified touch areas.",
      "code": "// Touch Direction Detection - Siemens WinCC Unified\n// Detect swipe directions in touch areas for gesture navigation\n\n// Touch area event handler for swipe detection\nfunction handleTouchAreaSwipe(touchArea) {\n    try {\n        // Get touch direction from touch area object\n        // Direction values: 0=None, 1=Up, 2=Down, 3=Left, 4=Right\n        var direction = touchArea.Direction;\n        var directionName = getTouchDirectionName(direction);\n        \n        HMIRuntime.Trace(\"Touch swipe detected: \" + directionName);\n        \n        // Handle different swipe directions\n        switch (direction) {\n            case 1: // Up swipe\n                handleSwipeUp();\n                break;\n            case 2: // Down swipe\n                handleSwipeDown();\n                break;\n            case 3: // Left swipe\n                handleSwipeLeft();\n                break;\n            case 4: // Right swipe\n                handleSwipeRight();\n                break;\n            default:\n                HMIRuntime.Trace(\"No direction detected or tap gesture\");\n                break;\n        }\n    } catch (error) {\n        HMIRuntime.Trace(\"Error reading touch direction: \" + error.message);\n    }\n}\n\n// Convert direction number to readable name\nfunction getTouchDirectionName(direction) {\n    var directions = {\n        0: \"None/Tap\",\n        1: \"Up\",\n        2: \"Down\",\n        3: \"Left\",\n        4: \"Right\"\n    };\n    return directions[direction] || \"Unknown\";\n}\n\n// Handle specific swipe directions\nfunction handleSwipeUp() {\n    HMIRuntime.Trace(\"Swipe Up: Opening main menu\");\n    // Navigate to main menu or show system controls\n    try {\n        HMIRuntime.Screens.Show(\"MainMenu\");\n    } catch (error) {\n        HMIRuntime.Trace(\"Navigation failed: \" + error.message);\n    }\n}\n\nfunction handleSwipeDown() {\n    HMIRuntime.Trace(\"Swipe Down: Opening alarm list\");\n    // Show alarm overview or status panel\n    try {\n        HMIRuntime.Screens.Show(\"AlarmOverview\");\n    } catch (error) {\n        HMIRuntime.Trace(\"Navigation failed: \" + error.message);\n    }\n}\n\nfunction handleSwipeLeft() {\n    HMIRuntime.Trace(\"Swipe Left: Next screen\");\n    // Navigate to next screen in sequence\n    var currentScreen = Screen.Name;\n    var nextScreen = getNextScreen(currentScreen);\n    if (nextScreen) {\n        try {\n            HMIRuntime.Screens.Show(nextScreen);\n        } catch (error) {\n            HMIRuntime.Trace(\"Navigation failed: \" + error.message);\n        }\n    }\n}\n\nfunction handleSwipeRight() {\n    HMIRuntime.Trace(\"Swipe Right: Previous screen\");\n    // Navigate to previous screen in sequence\n    var currentScreen = Screen.Name;\n    var prevScreen = getPreviousScreen(currentScreen);\n    if (prevScreen) {\n        try {\n            HMIRuntime.Screens.Show(prevScreen);\n        } catch (error) {\n            HMIRuntime.Trace(\"Navigation failed: \" + error.message);\n        }\n    }\n}\n\n// Screen navigation helpers\nfunction getNextScreen(currentScreen) {\n    var screenSequence = [\"Overview\", \"Motors\", \"Pumps\", \"Valves\", \"Alarms\"];\n    var currentIndex = screenSequence.indexOf(currentScreen);\n    if (currentIndex >= 0 && currentIndex < screenSequence.length - 1) {\n        return screenSequence[currentIndex + 1];\n    }\n    return null; // Already at last screen\n}\n\nfunction getPreviousScreen(currentScreen) {\n    var screenSequence = [\"Overview\", \"Motors\", \"Pumps\", \"Valves\", \"Alarms\"];\n    var currentIndex = screenSequence.indexOf(currentScreen);\n    if (currentIndex > 0) {\n        return screenSequence[currentIndex - 1];\n    }\n    return null; // Already at first screen\n}\n\n// Advanced touch handling with speed detection\nfunction handleAdvancedTouch(touchArea) {\n    var direction = touchArea.Direction;\n    var speed = touchArea.Speed || 0; // Touch speed if available\n    \n    HMIRuntime.Trace(\"Advanced touch - Direction: \" + getTouchDirectionName(direction) + \", Speed: \" + speed);\n    \n    // Fast swipes could trigger different actions\n    if (speed > 100) {\n        HMIRuntime.Trace(\"Fast swipe detected - Quick action triggered\");\n        // Implement quick navigation or emergency actions\n    }\n}\n\n// Touch area configuration example\nfunction configureTouchArea() {\n    // This would typically be done in the screen design, but can be referenced in scripts\n    var touchArea = Screen.FindItem('MainTouchArea');\n    if (touchArea) {\n        HMIRuntime.Trace(\"Touch area configured: \" + touchArea.Name);\n        // Touch area is ready for gesture detection\n    } else {\n        HMIRuntime.Trace(\"Touch area not found - check screen configuration\");\n    }\n}\n\n// Usage: This function would be called from touch area events\n// var touchArea = Screen.FindItem('GestureArea');\n// handleTouchAreaSwipe(touchArea);\n\nHMIRuntime.Trace(\"Touch direction detection system ready\");\nconfiguTouchArea();"
    },
    {
      "id": "nanosecond-timestamps",
      "title": "High-Precision Timestamps",
      "category": "JavaScript Basics",
      "description": "Work with nanosecond precision timestamps using WinCC Math object.",
      "code": "// High-Precision Timestamps - Siemens WinCC Unified\n// Use Math.DatePrecise for nanosecond precision (WinCC-specific)\n\n// Create high-precision timestamp\nfunction createPreciseTimestamp() {\n    try {\n        // Math.DatePrecise provides 100ns resolution as 64-bit integer\n        var preciseTime = new Math.DatePrecise();\n        var timestampValue = preciseTime.Value; // 64-bit integer value\n        \n        HMIRuntime.Trace(\"Precise timestamp (100ns ticks): \" + timestampValue);\n        return preciseTime;\n    } catch (error) {\n        HMIRuntime.Trace(\"High-precision timestamps not available: \" + error.message);\n        // Fallback to standard Date\n        return new Date();\n    }\n}\n\n// Log events with precise timing\nfunction logPreciseEvent(eventName, eventData) {\n    var timestamp = createPreciseTimestamp();\n    var standardTime = new Date().toISOString();\n    \n    var logEntry = {\n        event: eventName,\n        data: eventData,\n        preciseTime: timestamp.Value || timestamp.getTime(),\n        standardTime: standardTime\n    };\n    \n    HMIRuntime.Trace(\"PRECISE LOG: \" + JSON.stringify(logEntry));\n    return logEntry;\n}\n\n// Measure precise duration between events\nvar preciseTimer = {\n    startTime: null,\n    \n    start: function() {\n        this.startTime = createPreciseTimestamp();\n        HMIRuntime.Trace(\"Precise timer started\");\n    },\n    \n    stop: function(operationName) {\n        if (!this.startTime) {\n            HMIRuntime.Trace(\"Timer not started\");\n            return null;\n        }\n        \n        var endTime = createPreciseTimestamp();\n        var duration;\n        \n        if (this.startTime.Value && endTime.Value) {\n            // Calculate duration in 100ns ticks\n            duration = endTime.Value - this.startTime.Value;\n            var milliseconds = duration / 10000; // Convert to milliseconds\n            HMIRuntime.Trace(\"Operation '\" + operationName + \"' took \" + milliseconds.toFixed(3) + \" ms (precise)\");\n        } else {\n            // Fallback to standard timing\n            duration = endTime.getTime() - this.startTime.getTime();\n            HMIRuntime.Trace(\"Operation '\" + operationName + \"' took \" + duration + \" ms (standard)\");\n        }\n        \n        this.startTime = null;\n        return duration;\n    }\n};\n\n// High-frequency data logging with precise timestamps\nfunction logHighFrequencyData() {\n    var timestamp = createPreciseTimestamp();\n    \n    // Simulate reading multiple sensors rapidly\n    var sensorData = {\n        timestamp: timestamp.Value || timestamp.getTime(),\n        motor1Speed: Tags(\"MOTOR_001_Speed\").Read(),\n        motor1Current: Tags(\"MOTOR_001_Current\").Read(),\n        pressure: Tags(\"PRESSURE_SENSOR_1\").Read(),\n        temperature: Tags(\"TEMP_SENSOR_1\").Read()\n    };\n    \n    // In real application, this would be written to high-speed logging system\n    HMIRuntime.Trace(\"High-freq data: \" + JSON.stringify(sensorData));\n    return sensorData;\n}\n\n// Synchronize with PLC timestamps (if PLC also uses nanosecond precision)\nfunction synchronizeWithPLC() {\n    var hmiTime = createPreciseTimestamp();\n    var plcTime = Tags(\"PLC_PRECISE_TIMESTAMP\").Read(); // Assuming PLC provides precise timestamp\n    \n    var timeDiff;\n    if (hmiTime.Value) {\n        timeDiff = Math.abs(hmiTime.Value - plcTime) / 10000; // Convert to milliseconds\n    } else {\n        timeDiff = Math.abs(hmiTime.getTime() - plcTime);\n    }\n    \n    HMIRuntime.Trace(\"Time synchronization - HMI/PLC difference: \" + timeDiff.toFixed(3) + \" ms\");\n    \n    if (timeDiff > 10) { // More than 10ms difference\n        HMIRuntime.Trace(\"WARNING: Significant time difference detected\");\n    }\n    \n    return timeDiff;\n}\n\n// Performance measurement for critical operations\nfunction measureCriticalOperation() {\n    preciseTimer.start();\n    \n    // Simulate critical operation\n    var tagSet = Tags.CreateTagSet([\"MOTOR_001_Speed\", \"MOTOR_002_Speed\", \"MOTOR_003_Speed\"]);\n    tagSet.Read();\n    \n    // Process the data\n    for (var i = 0; i < 3; i++) {\n        var tagName = \"MOTOR_00\" + (i + 1) + \"_Speed\";\n        var speed = tagSet.Item(tagName).Value;\n        // Perform calculations\n        var efficiency = speed / 1800 * 100;\n    }\n    \n    var duration = preciseTimer.stop(\"TagSet read and processing\");\n    \n    // Log if operation takes too long\n    if (duration && duration > 50000) { // More than 5ms in 100ns ticks\n        HMIRuntime.Trace(\"PERFORMANCE WARNING: Critical operation slow\");\n    }\n}\n\n// Usage examples\nlogPreciseEvent(\"System Startup\", {version: \"1.0\", operator: \"John\"});\nsynchronizeWithPLC();\nmeasureCriticalOperation();\n\n// Start high-frequency logging\nvar dataLogger = setInterval(function() {\n    logHighFrequencyData();\n}, 100); // Every 100ms\n\nHMIRuntime.Trace(\"High-precision timestamp system initialized\");"
    },
    {
      "id": "database-access",
      "title": "Database Operations",
      "category": "Data Storage",
      "description": "Connect to and query databases for production data management.",
      "code": "// Database Access - Siemens WinCC Unified\n// Establish database connections and perform queries\n\n// Create database connection (store in session for reuse)\nfunction createDatabaseConnection() {\n    try {\n        // Check if connection already exists in session\n        if (HMIRuntime.UI.DataSet.Exists('DB_CONNECTION')) {\n            HMIRuntime.Trace(\"Using existing database connection\");\n            return HMIRuntime.UI.DataSet.Get('DB_CONNECTION').Value;\n        }\n        \n        // Create new database connection\n        var connectionString = \"Server=production-db;Database=WinCC_Data;Trusted_Connection=true;\";\n        var dbConnection = HMIRuntime.CreateDatabaseConnection(connectionString);\n        \n        // Store connection in session for reuse (better performance)\n        HMIRuntime.UI.DataSet.Add('DB_CONNECTION', dbConnection);\n        \n        HMIRuntime.Trace(\"Database connection established and stored in session\");\n        return dbConnection;\n    } catch (error) {\n        HMIRuntime.Trace(\"Database connection failed: \" + error.message);\n        return null;\n    }\n}\n\n// Insert production data into database\nfunction logProductionData(motorId, speed, current, temperature, timestamp) {\n    var connection = createDatabaseConnection();\n    if (!connection) return false;\n    \n    try {\n        var query = \"INSERT INTO ProductionLog (MotorID, Speed, Current, Temperature, Timestamp) \" +\n                   \"VALUES ('\" + motorId + \"', \" + speed + \", \" + current + \", \" + temperature + \", '\" + timestamp + \"')\";\n        \n        var result = connection.ExecuteNonQuery(query);\n        HMIRuntime.Trace(\"Production data logged for \" + motorId + \": \" + result + \" rows affected\");\n        return true;\n    } catch (error) {\n        HMIRuntime.Trace(\"Failed to log production data: \" + error.message);\n        return false;\n    }\n}\n\n// Query production statistics\nfunction getProductionStatistics(startDate, endDate) {\n    var connection = createDatabaseConnection();\n    if (!connection) return null;\n    \n    try {\n        var query = \"SELECT MotorID, COUNT(*) as RecordCount, AVG(Speed) as AvgSpeed, \" +\n                   \"AVG(Current) as AvgCurrent, MAX(Temperature) as MaxTemp \" +\n                   \"FROM ProductionLog \" +\n                   \"WHERE Timestamp BETWEEN '\" + startDate + \"' AND '\" + endDate + \"' \" +\n                   \"GROUP BY MotorID\";\n        \n        var resultSet = connection.ExecuteQuery(query);\n        \n        HMIRuntime.Trace(\"Production statistics query executed\");\n        \n        // Process results\n        var statistics = [];\n        while (resultSet.Read()) {\n            var stat = {\n                motorId: resultSet.GetString(\"MotorID\"),\n                recordCount: resultSet.GetInt32(\"RecordCount\"),\n                avgSpeed: resultSet.GetDouble(\"AvgSpeed\").toFixed(1),\n                avgCurrent: resultSet.GetDouble(\"AvgCurrent\").toFixed(2),\n                maxTemp: resultSet.GetDouble(\"MaxTemp\").toFixed(1)\n            };\n            statistics.push(stat);\n            \n            HMIRuntime.Trace(\"Motor \" + stat.motorId + \": \" + stat.recordCount + \" records, Avg Speed: \" + stat.avgSpeed + \" RPM\");\n        }\n        \n        return statistics;\n    } catch (error) {\n        HMIRuntime.Trace(\"Failed to query production statistics: \" + error.message);\n        return null;\n    }\n}\n\n// Get alarm history from database\nfunction getAlarmHistory(hours) {\n    var connection = createDatabaseConnection();\n    if (!connection) return null;\n    \n    try {\n        var query = \"SELECT AlarmID, AlarmText, Severity, Timestamp, AcknowledgedBy \" +\n                   \"FROM AlarmHistory \" +\n                   \"WHERE Timestamp >= DATEADD(hour, -\" + hours + \", GETDATE()) \" +\n                   \"ORDER BY Timestamp DESC\";\n        \n        var resultSet = connection.ExecuteQuery(query);\n        \n        var alarms = [];\n        while (resultSet.Read()) {\n            var alarm = {\n                id: resultSet.GetString(\"AlarmID\"),\n                text: resultSet.GetString(\"AlarmText\"),\n                severity: resultSet.GetString(\"Severity\"),\n                timestamp: resultSet.GetDateTime(\"Timestamp\"),\n                acknowledgedBy: resultSet.GetString(\"AcknowledgedBy\")\n            };\n            alarms.push(alarm);\n        }\n        \n        HMIRuntime.Trace(\"Retrieved \" + alarms.length + \" alarms from last \" + hours + \" hours\");\n        return alarms;\n    } catch (error) {\n        HMIRuntime.Trace(\"Failed to get alarm history: \" + error.message);\n        return null;\n    }\n}\n\n// Update equipment maintenance records\nfunction updateMaintenanceRecord(equipmentId, maintenanceType, description, technician) {\n    var connection = createDatabaseConnection();\n    if (!connection) return false;\n    \n    try {\n        var timestamp = new Date().toISOString();\n        var query = \"INSERT INTO MaintenanceLog (EquipmentID, MaintenanceType, Description, Technician, Timestamp) \" +\n                   \"VALUES ('\" + equipmentId + \"', '\" + maintenanceType + \"', '\" + description + \"', '\" + technician + \"', '\" + timestamp + \"')\";\n        \n        var result = connection.ExecuteNonQuery(query);\n        HMIRuntime.Trace(\"Maintenance record updated for \" + equipmentId + \": \" + maintenanceType);\n        return true;\n    } catch (error) {\n        HMIRuntime.Trace(\"Failed to update maintenance record: \" + error.message);\n        return false;\n    }\n}\n\n// Export production report to database\nfunction generateProductionReport() {\n    var connection = createDatabaseConnection();\n    if (!connection) return false;\n    \n    try {\n        // Get current production data\n        var totalProduction = Tags(\"TOTAL_PRODUCTION_COUNT\").Read();\n        var efficiency = Tags(\"OVERALL_EFFICIENCY\").Read();\n        var runningHours = Tags(\"SYSTEM_RUNNING_HOURS\").Read();\n        var timestamp = new Date().toISOString();\n        \n        var query = \"INSERT INTO DailyReports (Date, TotalProduction, Efficiency, RunningHours, GeneratedAt) \" +\n                   \"VALUES ('\" + timestamp.split('T')[0] + \"', \" + totalProduction + \", \" + efficiency + \", \" + runningHours + \", '\" + timestamp + \"')\";\n        \n        var result = connection.ExecuteNonQuery(query);\n        HMIRuntime.Trace(\"Daily production report generated: \" + totalProduction + \" units, \" + efficiency + \"% efficiency\");\n        return true;\n    } catch (error) {\n        HMIRuntime.Trace(\"Failed to generate production report: \" + error.message);\n        return false;\n    }\n}\n\n// Close database connection when session ends\nfunction closeDatabaseConnection() {\n    try {\n        if (HMIRuntime.UI.DataSet.Exists('DB_CONNECTION')) {\n            var connection = HMIRuntime.UI.DataSet.Get('DB_CONNECTION').Value;\n            connection.Close();\n            HMIRuntime.UI.DataSet.Remove('DB_CONNECTION');\n            HMIRuntime.Trace(\"Database connection closed\");\n        }\n    } catch (error) {\n        HMIRuntime.Trace(\"Error closing database connection: \" + error.message);\n    }\n}\n\n// Usage examples\nvar currentTime = new Date().toISOString();\nlogProductionData(\"MOTOR_001\", 1450, 8.5, 78.2, currentTime);\n\nvar stats = getProductionStatistics('2024-12-01', '2024-12-27');\nif (stats) {\n    for (var i = 0; i < stats.length; i++) {\n        HMIRuntime.Trace(\"Statistics for \" + stats[i].motorId + \": \" + stats[i].recordCount + \" records\");\n    }\n}\n\nvar recentAlarms = getAlarmHistory(24); // Last 24 hours\nupdateMaintenanceRecord(\"MOTOR_001\", \"Preventive\", \"Oil change and filter replacement\", \"Tech_John\");\ngenerateProductionReport();\n\nHMIRuntime.Trace(\"Database operations system ready\");"
    },
    {
      "id": "math-random-generation",
      "title": "Random Number Generation",
      "category": "JavaScript Basics",
      "description": "Generate random numbers for testing and simulation.",
      "code": "// Random Number Generation - Siemens WinCC Unified\n// Generate random number between 0 and 1\nvar randomValue = Math.random();\nHMIRuntime.Trace(\"Random value (0-1): \" + randomValue);\n\n// Generate random integer between min and max\nfunction getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nvar randomSpeed = getRandomInt(100, 1800);\nHMIRuntime.Trace(\"Random motor speed: \" + randomSpeed + \" RPM\");\n\n// Generate random temperature for simulation\nvar baseTemp = 75.0;\nvar variation = 10.0;\nvar randomTemp = baseTemp + (Math.random() * variation * 2) - variation;\nHMIRuntime.Trace(\"Simulated temperature: \" + randomTemp.toFixed(1) + \"°C\");\n\n// Generate random equipment ID for testing\nvar equipmentTypes = [\"MOTOR\", \"PUMP\", \"VALVE\", \"SENSOR\"];\nvar randomType = equipmentTypes[Math.floor(Math.random() * equipmentTypes.length)];\nvar randomId = getRandomInt(1, 999).toString().padStart(3, '0');\nvar randomEquipment = randomType + \"_\" + randomId;\nHMIRuntime.Trace(\"Random equipment: \" + randomEquipment);\n\n// Generate random production data for testing\nvar dailyProduction = getRandomInt(800, 1200);\nvar efficiency = (85 + Math.random() * 10).toFixed(1);\nHMIRuntime.Trace(\"Test data - Production: \" + dailyProduction + \" units, Efficiency: \" + efficiency + \"%\");"
    },
    {
      "id": "tagset-bulk-operations",
      "title": "TagSet Bulk Operations",
      "category": "Tag Operations",
      "description": "Read multiple tags efficiently using TagSet for better performance.",
      "code": "// TagSet Operations - Siemens WinCC Unified\n// Efficient way to read multiple tags at once\nfunction readMultipleTagsEfficient() {\n    try {\n        // Create TagSet with multiple tag names\n        var tagSet = Tags.CreateTagSet([\"MOTOR_001_Speed\", \"MOTOR_001_Current\", \"MOTOR_001_Temperature\"]);\n        \n        // Read all tags in one operation (much faster than individual reads)\n        tagSet.Read();\n        \n        // Access the values\n        var speed = tagSet.Item(\"MOTOR_001_Speed\").Value;\n        var current = tagSet.Item(\"MOTOR_001_Current\").Value;\n        var temperature = tagSet.Item(\"MOTOR_001_Temperature\").Value;\n        \n        HMIRuntime.Trace(\"Motor Status - Speed: \" + speed + \" RPM, Current: \" + current + \" A, Temp: \" + temperature + \"°C\");\n        \n        return {speed: speed, current: current, temperature: temperature};\n    } catch (error) {\n        HMIRuntime.Trace(\"Error reading TagSet: \" + error.message);\n        return null;\n    }\n}\n\n// Compare: Inefficient individual tag reading (NOT recommended)\nfunction readMultipleTagsInefficient() {\n    // This is slower - multiple individual read operations\n    var speed = Tags(\"MOTOR_001_Speed\").Read();\n    var current = Tags(\"MOTOR_001_Current\").Read();\n    var temperature = Tags(\"MOTOR_001_Temperature\").Read();\n    \n    HMIRuntime.Trace(\"Individual reads completed (slower method)\");\n}\n\n// Example usage\nvar motorData = readMultipleTagsEfficient();\nif (motorData) {\n    // Process the data\n    if (motorData.temperature > 85) {\n        HMIRuntime.Trace(\"WARNING: Motor temperature high!\");\n    }\n}"
    },
    {
      "id": "alternative-alerts",
      "title": "Alert Alternatives (No alert() in WinCC)",
      "category": "User Interface",
      "description": "Handle user notifications since alert() is not available in WinCC for security.",
      "code": "// Alert Dialogs - Siemens WinCC Unified\n// NOTE: alert() function is NOT available in WinCC Unified for security reasons\n// Use these alternatives instead:\n\n// 1. Use HMIRuntime.Trace for debugging messages\nfunction showDebugMessage(message) {\n    HMIRuntime.Trace(\"DEBUG: \" + message);\n    // This appears in TraceViewer for diagnostics\n}\n\n// 2. Update screen objects to show status\nfunction showStatusOnScreen(message, isError) {\n    var statusLabel = Screen.FindItem('StatusMessage');\n    if (statusLabel) {\n        statusLabel.Text = message;\n        statusLabel.ForeColor = isError ? 0xFFFF0000 : 0xFF000000; // Red for errors, black for normal\n    }\n    \n    // Also log the message\n    HMIRuntime.Trace(isError ? \"ERROR: \" + message : \"INFO: \" + message);\n}\n\n// 3. Use alarm system for critical notifications\nfunction triggerSystemAlarm(alarmText, priority) {\n    // This would integrate with WinCC alarm system\n    Tags(\"SYSTEM_ALARM_TEXT\").Write(alarmText);\n    Tags(\"SYSTEM_ALARM_PRIORITY\").Write(priority);\n    Tags(\"SYSTEM_ALARM_TRIGGER\").Write(true);\n    \n    HMIRuntime.Trace(\"ALARM TRIGGERED: \" + alarmText);\n}\n\n// 4. Show popup screen for important messages\nfunction showImportantMessage(title, message) {\n    // Store message data for popup screen\n    Tags(\"POPUP_TITLE\").Write(title);\n    Tags(\"POPUP_MESSAGE\").Write(message);\n    \n    // Open popup screen\n    try {\n        HMIRuntime.Screens.Show(\"MessagePopup\");\n        HMIRuntime.Trace(\"Message popup shown: \" + title);\n    } catch (error) {\n        HMIRuntime.Trace(\"Failed to show popup: \" + error.message);\n        // Fallback to trace message\n        HMIRuntime.Trace(\"MESSAGE: \" + title + \" - \" + message);\n    }\n}\n\n// Usage examples\nshowDebugMessage(\"Motor startup sequence initiated\");\nshowStatusOnScreen(\"System ready for operation\", false);\ntriggerSystemAlarm(\"High temperature detected in Tank 1\", \"HIGH\");\nshowImportantMessage(\"Production Complete\", \"Daily production target reached: 1000 units\");"
    },
    {
      "id": "external-program-execution",
      "title": "External Program Execution",
      "category": "System Integration",
      "description": "Start external programs from WinCC runtime (limited on PC, full on Panel).",
      "code": "// External Program Execution - Siemens WinCC Unified\n// NOTE: StartProgram function has different capabilities on PC vs Unified Comfort Panel\n\n// For Unified Comfort Panel - Can start programs with user interfaces\nfunction openDocumentViewer(filePath) {\n    try {\n        // Open LibreOffice on Unified Comfort Panel\n        HMIRuntime.StartProgram(\"/opt/siemens/App_Restriction/runLibreoffice.sh\", filePath);\n        HMIRuntime.Trace(\"Document viewer opened: \" + filePath);\n    } catch (error) {\n        HMIRuntime.Trace(\"Failed to open document viewer: \" + error.message);\n    }\n}\n\nfunction openPDFViewer(pdfPath) {\n    try {\n        // Open PDF viewer on Unified Comfort Panel\n        HMIRuntime.StartProgram(\"/opt/siemens/App_Restriction/runOkular.sh\", pdfPath);\n        HMIRuntime.Trace(\"PDF viewer opened: \" + pdfPath);\n    } catch (error) {\n        HMIRuntime.Trace(\"Failed to open PDF viewer: \" + error.message);\n    }\n}\n\nfunction openWebBrowser(url) {\n    try {\n        // Open web browser on Unified Comfort Panel\n        HMIRuntime.StartProgram(\"/opt/siemens/App_Restriction/runChromium.sh\", url);\n        HMIRuntime.Trace(\"Web browser opened: \" + url);\n    } catch (error) {\n        HMIRuntime.Trace(\"Failed to open web browser: \" + error.message);\n    }\n}\n\n// For PC Runtime - Limited to programs without user interface\nfunction executeBackgroundTask() {\n    try {\n        // On PC runtime, can only start background processes\n        // For programs with UI, need to use ODK or Open Pipe\n        HMIRuntime.Trace(\"Background task execution initiated\");\n        \n        // Alternative: Write command to file for external monitoring\n        var command = \"START_BACKUP_\" + new Date().toISOString();\n        HMIRuntime.FileSystem.WriteFile(\"C:\\\\Commands\\\\backup_cmd.txt\", command, \"utf8\");\n        HMIRuntime.Trace(\"Command file written for external execution\");\n    } catch (error) {\n        HMIRuntime.Trace(\"Failed to execute background task: \" + error.message);\n    }\n}\n\n// Usage examples\n// openDocumentViewer(\"/production/reports/daily_report.xlsx\");\n// openPDFViewer(\"/manuals/equipment_manual.pdf\");\n// openWebBrowser(\"http://production-dashboard.local\");\nexecuteBackgroundTask();\n\nHMIRuntime.Trace(\"External program execution system ready\");"
    },
    {
      "id": "udt-user-defined-types",
      "title": "UDT (User Defined Type) Access",
      "category": "Tag Operations",
      "description": "Access individual elements of User Defined Types in WinCC.",
      "code": "// UDT Access - Siemens WinCC Unified\n// Access individual elements of User Defined Types (UDTs)\n\n// Example UDT structure: Motor_UDT with elements:\n// - Name (String), Speed (Real), Current (Real), Temperature (Real)\n// - Running (Bool), FaultCode (Int)\n\n// Read UDT elements individually\nfunction readMotorUDT(motorInstance) {\n    try {\n        // Access UDT elements using dot notation: UDT_Instance.Element_Name\n        var motorName = Tags(motorInstance + '.Name').Read();\n        var motorSpeed = Tags(motorInstance + '.Speed').Read();\n        var motorCurrent = Tags(motorInstance + '.Current').Read();\n        var motorTemp = Tags(motorInstance + '.Temperature').Read();\n        var isRunning = Tags(motorInstance + '.Running').Read();\n        var faultCode = Tags(motorInstance + '.FaultCode').Read();\n        \n        HMIRuntime.Trace(\"Motor UDT Data for \" + motorInstance + \":\");\n        HMIRuntime.Trace(\"  Name: \" + motorName);\n        HMIRuntime.Trace(\"  Speed: \" + motorSpeed + \" RPM\");\n        HMIRuntime.Trace(\"  Current: \" + motorCurrent + \" A\");\n        HMIRuntime.Trace(\"  Temperature: \" + motorTemp + \"°C\");\n        HMIRuntime.Trace(\"  Running: \" + isRunning);\n        HMIRuntime.Trace(\"  Fault Code: \" + faultCode);\n        \n        return {\n            name: motorName, speed: motorSpeed, current: motorCurrent,\n            temperature: motorTemp, running: isRunning, faultCode: faultCode\n        };\n    } catch (error) {\n        HMIRuntime.Trace(\"Error reading motor UDT: \" + error.message);\n        return null;\n    }\n}\n\n// Write to UDT elements\nfunction updateMotorSetpoints(motorInstance, newSpeed, startMotor) {\n    try {\n        Tags(motorInstance + '.SpeedSetpoint').Write(newSpeed);\n        Tags(motorInstance + '.StartCommand').Write(startMotor);\n        \n        HMIRuntime.Trace(\"Motor \" + motorInstance + \" updated - Speed: \" + newSpeed + \", Start: \" + startMotor);\n        return true;\n    } catch (error) {\n        HMIRuntime.Trace(\"Error updating motor UDT: \" + error.message);\n        return false;\n    }\n}\n\n// Usage examples\nvar motor1Data = readMotorUDT(\"Motor_001\");\nif (motor1Data && motor1Data.temperature > 85) {\n    HMIRuntime.Trace(\"WARNING: Motor 1 temperature high!\");\n}\n\nupdateMotorSetpoints(\"Motor_002\", 1450, true);"
    },
    {
      "id": "high-precision-timestamps",
      "title": "High-Precision Timestamps",
      "category": "JavaScript Basics",
      "description": "Work with nanosecond precision timestamps using WinCC Math object.",
      "code": "// High-Precision Timestamps - Siemens WinCC Unified\n// Use Math.DatePrecise for nanosecond precision (WinCC-specific)\n\n// Create high-precision timestamp\nfunction createPreciseTimestamp() {\n    try {\n        // Math.DatePrecise provides 100ns resolution as 64-bit integer\n        var preciseTime = new Math.DatePrecise();\n        var timestampValue = preciseTime.Value; // 64-bit integer value\n        \n        HMIRuntime.Trace(\"Precise timestamp (100ns ticks): \" + timestampValue);\n        return preciseTime;\n    } catch (error) {\n        HMIRuntime.Trace(\"High-precision timestamps not available: \" + error.message);\n        // Fallback to standard Date\n        return new Date();\n    }\n}\n\n// Log events with precise timing\nfunction logPreciseEvent(eventName, eventData) {\n    var timestamp = createPreciseTimestamp();\n    var standardTime = new Date().toISOString();\n    \n    var logEntry = {\n        event: eventName,\n        data: eventData,\n        preciseTime: timestamp.Value || timestamp.getTime(),\n        standardTime: standardTime\n    };\n    \n    HMIRuntime.Trace(\"PRECISE LOG: \" + JSON.stringify(logEntry));\n    return logEntry;\n}\n\n// Measure precise duration between events\nvar preciseTimer = {\n    startTime: null,\n    \n    start: function() {\n        this.startTime = createPreciseTimestamp();\n        HMIRuntime.Trace(\"Precise timer started\");\n    },\n    \n    stop: function(operationName) {\n        if (!this.startTime) {\n            HMIRuntime.Trace(\"Timer not started\");\n            return null;\n        }\n        \n        var endTime = createPreciseTimestamp();\n        var duration;\n        \n        if (this.startTime.Value && endTime.Value) {\n            // Calculate duration in 100ns ticks\n            duration = endTime.Value - this.startTime.Value;\n            var milliseconds = duration / 10000; // Convert to milliseconds\n            HMIRuntime.Trace(\"Operation '\" + operationName + \"' took \" + milliseconds.toFixed(3) + \" ms (precise)\");\n        } else {\n            // Fallback to standard timing\n            duration = endTime.getTime() - this.startTime.getTime();\n            HMIRuntime.Trace(\"Operation '\" + operationName + \"' took \" + duration + \" ms (standard)\");\n        }\n        \n        this.startTime = null;\n        return duration;\n    }\n};\n\n// Usage examples\nlogPreciseEvent(\"System Startup\", {version: \"1.0\", operator: \"John\"});\npreciseTimer.start();\n// ... perform operation ...\npreciseTimer.stop(\"Critical operation\");\n\nHMIRuntime.Trace(\"High-precision timestamp system initialized\");"
    }
  ],
  "embeddings": [
    [
      0.05818722544658423,
      0.12306905673347171,
      0.035439106086068047,
      0.02080108911985192,
      0.03939269411885813,
      0.05057248735369596,
      0.019973777920052716,
      0.025726599596483882,
      0,
      0.02581030000361655,
      0.010947716824320093,
      0.053736072447426064,
      0.032852934310661934,
      0,
      0,
      0.008395716740208895,
      0.13658408079346,
      0.09855880293198581,
      0.01843651695546683,
      0.000948835006654626,
      0.20487612119018997,
      0,
      0,
      0.026868036223713032,
      0.01574209623509318,
      0.029616310190304657,
      0.013980817332432022,
      0.047145734914757355,
      0.02080108911985192,
      0.014546806361646058,
      0.09855880293198581,
      0.06829204039673,
      0.008793984685214888,
      0.01574209623509318,
      0.021673141075824107,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.1,
      1.2,
      0.6,
      0,
      0,
      0,
      0,
      0,
      0.6,
      0
    ],
    [
      0,
      0.14086673570723532,
      0.08450863758985458,
      0.019841038852781833,
      0,
      0,
      0.019051911246819514,
      0,
      0,
      0.02461905538806502,
      0.01044243758627455,
      0.06406993253346954,
      0.031336645034785233,
      0,
      0,
      0.008008222121430023,
      0,
      0.15668322517392616,
      0.017585600788291442,
      0.0004525213108660524,
      0,
      0,
      0,
      0.025627973013387817,
      0.015015537947319652,
      0,
      0.01333554884016593,
      0.02248488895934582,
      0.019841038852781833,
      0.013875415298800856,
      0,
      0,
      0,
      0,
      0,
      0.05715573374045854,
      0.06514010007072707,
      0.048238372552756155,
      0.009177236074936519,
      0.13028020014145414,
      0.05447629729288176,
      0.019841038852781833,
      0.016901727517970918,
      0.048238372552756155,
      0.043812494515036444,
      0.05447629729288176,
      0.015015537947319652,
      0.048238372552756155,
      0.01624696421922021,
      0.06514010007072707,
      0.06514010007072707,
      0.03757456977491084,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.1,
      1.4,
      0.4,
      0,
      0,
      0,
      0,
      0,
      0.4,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.024922643359093763,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.008133350592077367,
      0,
      0,
      0,
      0.0013787758690450035,
      0,
      0,
      0,
      0.013014205045861,
      0,
      0,
      0,
      0,
      0.04030211016971309,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.21451840833205746,
      0.13231582826866436,
      0.011058530937204655,
      0.011058530937204655,
      0.3307895706716609,
      0.03816167242764382,
      0.06615791413433218,
      0.05466249546278935,
      0.11065497887616607,
      0.09798419424778593,
      0.06615791413433218,
      0.13231582826866436,
      0.09547884034036125,
      0.055327489438083036,
      0.020995855417204605,
      0.06100062291098608,
      0.04101044675254936,
      0.048992097123892964,
      0.048992097123892964,
      0.03366664004558474,
      0.16404178701019745,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.6,
      0,
      0,
      0,
      3.2,
      0,
      0.6,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.014441669002294589,
      0.07088588280298758,
      0.04333791334597958,
      0,
      0,
      0.011075200806233011,
      0,
      0,
      0.02432051172848816,
      0,
      0,
      0,
      0,
      0.03544294140149379,
      0.020766169501612284,
      0,
      0.018442780310867775,
      0,
      0.027439734583634447,
      0.019189404136639478,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.020766169501612284,
      0,
      0.02246920583509178,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.20013792867632868,
      0.10124119718075202,
      0.06059174773356104,
      0.04333791334597958,
      0.041096200246876886,
      0.08219240049375377,
      0.27026211731471866,
      0.1817752432006831,
      0.04584393538122177,
      0.09008737243823957,
      0.09008737243823957,
      0.0753395600859003,
      0.0753395600859003,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1.2,
      0.6,
      3.8,
      0.2,
      0,
      0,
      0,
      0.6,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.014441669002294589,
      0.07088588280298758,
      0.04333791334597958,
      0,
      0,
      0.011075200806233011,
      0,
      0,
      0.02432051172848816,
      0,
      0,
      0,
      0,
      0.03544294140149379,
      0.020766169501612284,
      0,
      0.018442780310867775,
      0,
      0.027439734583634447,
      0.019189404136639478,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.020766169501612284,
      0,
      0.02246920583509178,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3603494897529583,
      0.10383084750806142,
      0.041096200246876886,
      0.08667582669195915,
      0.06671264289210957,
      0.27026211731471866,
      0.20013792867632868,
      0.0753395600859003,
      0.09008737243823957,
      0.09008737243823957,
      0.0753395600859003,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1.2,
      0.6,
      0,
      2.8,
      0,
      0,
      0,
      0.6,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0.016734786905990114,
      0,
      0,
      0,
      0.009172411393349266,
      0,
      0,
      0,
      0,
      0.007034249160715561,
      0,
      0,
      0,
      0.001987424676100906,
      0,
      0,
      0,
      0.011255528688312217,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.007367933114639502,
      0,
      0,
      0,
      0,
      0,
      0.008061085741498294,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.09276471711656539,
      0,
      0.009564134864609431,
      0.009564134864609431,
      0,
      0.033004689667151414,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0659466193632282,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.02610164069734073,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.05275729549058256,
      0,
      0.055050862898947034,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.12711463037550608,
      0.12368628948875386,
      0.0023468039736600013,
      0.04785080167617992,
      0.0472756717516016,
      0.06600937933430283,
      0.03546849448869134,
      0.11443531093506108,
      0.0873512822804361,
      0.05220328139468146,
      0.03848394788482931,
      0.0236378358758008,
      0.03546849448869134,
      0.11443531093506108,
      0.042371543458502026,
      0.029117094093478697,
      0.029117094093478697,
      0.05721765546753054,
      0.04785080167617992,
      0.04785080167617992,
      0.09570160335235985,
      0.029117094093478697,
      0.010812422974488015,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.6,
      0,
      1.6,
      0,
      0.8,
      0,
      0.6,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0.014399700360968238,
      0.018547083430023266,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.018158178066033193,
      0,
      0,
      0,
      0.0020521315260204702,
      0,
      0,
      0,
      0.02905496940471293,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.006339849424224687,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.03404685929915502,
      0,
      0.0245593645174259,
      0,
      0,
      0,
      0.053213868733533634,
      0,
      0.00822960441838486,
      0.00822960441838486,
      0,
      0.02839938413220005,
      0,
      0,
      0,
      0,
      0,
      0,
      0.04736934714560558,
      0,
      0,
      0.045395812398873366,
      0.030519402234455338,
      0,
      0,
      0,
      0.12207760893782135,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.04736934714560558,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.026606934366766817,
      0,
      0,
      0.0203395331954565,
      0.02839938413220005,
      0,
      0,
      0.02505424375485376,
      0.022459551297711787,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.05010848750970752,
      0,
      0.08234789125668172,
      0.25521464548260525,
      0.022459551297711787,
      0.13245637876638924,
      0.026606934366766817,
      0.04923379656508441,
      0.05010848750970752,
      0.03124964527211848,
      0.04117394562834086,
      0.09846759313016883,
      0.10642773746706727,
      0.09846759313016883,
      0.09846759313016883,
      0.009303712792001314,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.6,
      0,
      0.8,
      0,
      2.4,
      0,
      0.6,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0.044227651108688155,
      0,
      0,
      0,
      0.016160915312091562,
      0,
      0,
      0,
      0,
      0.01859051563903398,
      0,
      0,
      0,
      0.002100991800449529,
      0,
      0,
      0,
      0.029746754390539427,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.00710143267703421,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.08172129841221236,
      0,
      0.008425547380727356,
      0.008425547380727356,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.07274578311646572,
      0,
      0,
      0.03485749880627776,
      0,
      0,
      0,
      0.025650773368064563,
      0.031246054668609035,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0020674225482242865,
      0,
      0.02082380779534832,
      0.029075559944871477,
      0.031246054668609035,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.051301546736129126,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.10081205963326809,
      0.05040602981663404,
      0.027240432804070788,
      0.033902525517587725,
      0.022994302519085876,
      0.10081205963326809,
      0.10081205963326809,
      0.10081205963326809,
      0.15121808944990212,
      0.10081205963326809,
      0.02424859437215524,
      0.051301546736129126,
      0.027240432804070788,
      0.10081205963326809,
      0.05040602981663404,
      0.025650773368064563,
      0.03732731209439464,
      0.06780505103517545,
      0.07465462418878928,
      0.08430855533422177,
      0.12646283300133265,
      0.10081205963326809,
      0.02082380779534832,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.6,
      0,
      0,
      0,
      1.2,
      1.4,
      0.6,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0026062936258740995,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.006901608233966115,
      0,
      0,
      0,
      0,
      0,
      0.015101780882806929,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.05792902165928978,
      0,
      0.008958809873178455,
      0.008958809873178455,
      0,
      0.06183157051567606,
      0,
      0,
      0,
      0,
      0,
      0,
      0.12891657767474937,
      0,
      0,
      0.04941822615573556,
      0.03322365306535644,
      0.0396898002016348,
      0.0396898002016348,
      0,
      0,
      0,
      0,
      0,
      0,
      0.024449638121559668,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0021982720765929124,
      0,
      0.022141770314041253,
      0.03091578525783803,
      0.03322365306535644,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.10814476494217856,
      0.02896451082964489,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.02896451082964489,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.10719256973663949,
      0.053596284868319743,
      0.10719256973663949,
      0.021128571482730663,
      0.053596284868319743,
      0.021128571482730663,
      0.0396898002016348,
      0.10719256973663949,
      0.03091578525783803,
      0.08964453984904593,
      0.08964453984904593,
      0.053596284868319743,
      0.10719256973663949,
      0.053596284868319743,
      0.022141770314041253,
      0.018500225093132632,
      0.03135124635552578,
      0.0396898002016348,
      0.10719256973663949,
      0.018500225093132632,
      0.025783315534949874,
      0.02896451082964489,
      0.10719256973663949,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.6,
      0,
      0,
      0,
      0.8,
      0,
      0.6,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.016615095572729173,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.003063946375655563,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.012427507184809868,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.04767075740712388,
      0,
      0.007372353958136436,
      0.007372353958136436,
      0,
      0.025441114951762545,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.020333540970328693,
      0,
      0,
      0,
      0,
      0.10936119134013163,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.005426984189088753,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.01666915208566902,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.04167288021417256,
      0,
      0,
      0.04767075740712388,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.022444426697056492,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.018220831820929782,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.09134486139734238,
      0.021217520075635835,
      0.02383537870356194,
      0,
      0.08821055217910957,
      0.08899412948366778,
      0.044105276089554786,
      0.044105276089554786,
      0.054680595670065814,
      0.06998618472401535,
      0.044105276089554786,
      0.03266139808259531,
      0.044105276089554786,
      0.044105276089554786,
      0.027340297835032907,
      0.1475399718348881,
      0.06532279616519061,
      0.1475399718348881,
      0.07376998591744405,
      0.021217520075635835,
      0.1475399718348881,
      0.17642110435821914,
      0.044105276089554786,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.6,
      0,
      0,
      0,
      0.6,
      0,
      0.6,
      1.8
    ],
    [
      0,
      0,
      0.02197224577336219,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.004117943928881078,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.010904541009666462,
      0.019520199331515546,
      0.013437347467010948,
      0,
      0,
      0,
      0.011930406897417475,
      0,
      0,
      0,
      0.010986122886681096,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.024423470353692044,
      0,
      0,
      0.007077459799810979,
      0.007077459799810979,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.020368819272610403,
      0,
      0,
      0.019520199331515546,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.02928029899727332,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.001736634940508401,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.008001193001121131,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.022881963555419462,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.016691571471357226,
      0,
      0.05007471441407167,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.03715122693129805,
      0,
      0,
      0.014615177823574781,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.03672422463597778,
      0.0846821300919452,
      0.0313549421592915,
      0.028478121434773688,
      0.052493371843263185,
      0.05794564234809641,
      0.0846821300919452,
      0.125419768637166,
      0.062709884318583,
      0.0846821300919452,
      0.03540959324037314,
      0.0846821300919452,
      0.0846821300919452,
      0.011430640512389437,
      0.062709884318583,
      0.03540959324037314,
      0.022881963555419462,
      0.0846821300919452,
      0.0423410650459726,
      0.052493371843263185,
      0.04309329925834847,
      0.021546649629174235,
      0.062709884318583,
      0.056956242869547376,
      0.0846821300919452,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.8,
      0,
      1.4,
      0.4,
      0,
      1,
      0.8,
      0
    ],
    [
      0,
      0.044020854908511035,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.058756209440222314,
      0,
      0.0025454323736215445,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.02621283896554438,
      0,
      0,
      0,
      0,
      0,
      0.011471545093670649,
      0,
      0,
      0,
      0.010563579698731822,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.006805249807510557,
      0.006805249807510557,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.009384711217074782,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.018769422434149564,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.06029796569094519,
      0.06600566410217153,
      0.003339682577900771,
      0,
      0,
      0,
      0,
      0,
      0.10358966167872229,
      0.01857232126541552,
      0,
      0.016819229373165955,
      0,
      0,
      0,
      0,
      0.020717932335744458,
      0,
      0,
      0,
      0,
      0,
      0.023080364426310954,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.01292052641058745,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.035311754457670944,
      0,
      0,
      0.02738280907189778,
      0,
      0.03714464253083104,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.09044694853641778,
      0,
      0,
      0,
      0,
      0,
      0.020717932335744458,
      0.06215379700723337,
      0.09044694853641778,
      0,
      0,
      0.08142512508840885,
      0.0340476858080511,
      0.0160495879532281,
      0.02738280907189778,
      0.08142512508840885,
      0.016819229373165955,
      0.08142512508840885,
      0.02738280907189778,
      0.030148982845472596,
      0.08142512508840885,
      0.022001888034057178,
      0.08142512508840885,
      0.08142512508840885,
      0.1628502501768177,
      0.0340476858080511,
      0.02738280907189778,
      0.12213768763261326,
      0.040712562544204425,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      1,
      0.2,
      0,
      1,
      1,
      0
    ],
    [
      0,
      0.013748254986441884,
      0,
      0,
      0,
      0,
      0.011156524603993408,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.03670057526596469,
      0,
      0.0037098593953883573,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.004911955409759667,
      0.035171530327055035,
      0,
      0,
      0,
      0,
      0.010748114321997723,
      0,
      0,
      0,
      0.03958963202407602,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.022003126444767606,
      0,
      0,
      0.006376089909739621,
      0.006376089909739621,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.061550178072346313,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0015645359824400008,
      0,
      0.015758557250533867,
      0.022003126444767606,
      0.023645662992460893,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.01941139606231913,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.020614381581458976,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.014416563965984019,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.03346957381198023,
      0,
      0,
      0.013166826868085388,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.018350287632982343,
      0,
      0,
      0,
      0.03308488705943944,
      0,
      0,
      0.025655965256552872,
      0,
      0,
      0,
      0,
      0.056495391278002696,
      0,
      0.03190053445078662,
      0,
      0,
      0.07208512034840184,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.025655965256552872,
      0,
      0,
      0.07629020729004071,
      0.038145103645020356,
      0.08801250577907042,
      0.03190053445078662,
      0.03190053445078662,
      0.12760213780314647,
      0.07629020729004071,
      0.19072551822510178,
      0.038145103645020356,
      0.06380106890157324,
      0.11443531093506108,
      0.028247695639001348,
      0.07629020729004071,
      0.025655965256552872,
      0.03190053445078662,
      0.036317155316245804,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.8,
      0,
      0,
      1.4,
      0,
      1.4,
      1.4,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.003268209467365934,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.005048398615586325,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0203446720123724,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.006553203518343499,
      0.006553203518343499,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.009037129320146086,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.018074258640292173,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.02903235385119583,
      0,
      0.0032159906305711124,
      0,
      0.016196294951937584,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.00740851203807512,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.012441988395380505,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.026368630958123786,
      0.017884457514844573,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.04237400658411011,
      0,
      0,
      0.059851804525483984,
      0,
      0,
      0,
      0,
      0.03278666040775291,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.04636547630932562,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.011466428065215447,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.03400391169997942,
      0,
      0,
      0.026368630958123786,
      0.024302486964473693,
      0.035768915029689145,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.05806470770239166,
      0,
      0.021187003292055057,
      0,
      0,
      0.04860497392894739,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.10547452383249514,
      0.05273726191624757,
      0.039204689857382034,
      0.039204689857382034,
      0.039204689857382034,
      0.07840937971476407,
      0.07840937971476407,
      0.09835998122325873,
      0.013532572058865537,
      0.024302486964473693,
      0.05806470770239166,
      0.039204689857382034,
      0.07840937971476407,
      0.07910589287437135,
      0.039204689857382034,
      0.039204689857382034,
      0.07840937971476407,
      0.022614324401566705,
      0.026368630958123786,
      0.07840937971476407,
      0.039204689857382034,
      0.1176140695721461,
      0.07840937971476407,
      0.039204689857382034,
      0.07840937971476407,
      0.039204689857382034,
      0.07840937971476407,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      1.2,
      0.2,
      0,
      3.4,
      1,
      0
    ],
    [
      0,
      0.025434271724917485,
      0,
      0,
      0,
      0,
      0,
      0.01329207645818334,
      0,
      0,
      0.005656320359232048,
      0,
      0,
      0,
      0,
      0,
      0,
      0.03394803212101734,
      0,
      0.002941388520629341,
      0,
      0,
      0,
      0,
      0,
      0,
      0.014446844576846423,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.026129118466076247,
      0.009942005747847895,
      0,
      0,
      0,
      0.02746530721670274,
      0,
      0.023731767862311407,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.005897883166509149,
      0.005897883166509149,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.01697401606050867,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.008133416388131478,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0028943915675140016,
      0,
      0.014576665456743826,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.006667660834267609,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.011197789555842455,
      0,
      0,
      0,
      0,
      0,
      0.013335321668535217,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.013909642892797688,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.03060352052998148,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.017955541357645197,
      0.052258236932152494,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.014576665456743826,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.020352891961410036,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.02435862970595797,
      0.04374447653605265,
      0.07838735539822875,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.07056844174328766,
      0.03528422087164383,
      0.04070578392282007,
      0.1058526626149315,
      0.14113688348657533,
      0,
      0,
      1.2,
      0,
      0.6,
      0,
      0,
      0.4,
      1.4,
      0
    ],
    [
      0,
      0,
      0.009897408006019005,
      0,
      0,
      0,
      0.022313049207986817,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.002914889524947995,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.026333653736170776,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.010748114321997723,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.020614381581458976,
      0,
      0.006376089909739621,
      0.006376089909739621,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.07093698897738268,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.008792882581763759,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.020614381581458976,
      0.0031290719648800016,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.015758557250533867,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.028833127931968038,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.03190053445078662,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.020614381581458976,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.025655965256552872,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0.2,
      0,
      0.2,
      0,
      1,
      1.4
    ],
    [
      0,
      0,
      0.00947079559196646,
      0,
      0,
      0,
      0.010675639922786796,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0035499516628285147,
      0,
      0,
      0,
      0,
      0,
      0.015829407170680074,
      0,
      0,
      0,
      0,
      0,
      0,
      0.004700233193821751,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.006101258448112913,
      0.006101258448112913,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.005988396346580692,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.01379516034676057,
      0,
      0,
      0.05917749195367102,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.02703012255111336,
      0.024550104685149732,
      0,
      0,
      0,
      0,
      0.030158618186366535,
      0,
      0,
      0,
      0,
      0,
      0.014389285751170022,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.09050581352286756,
      0.03475176069054555,
      0,
      0,
      0,
      0,
      0,
      0,
      0.10812049020445344,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.042109431644296626,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      0,
      1,
      1.2
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.023405463555442957,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0030428157109958697,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.004700233193821751,
      0.02524163706661493,
      0.01158392023018185,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.021054715822148313,
      0,
      0,
      0.006101258448112913,
      0.006101258448112913,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.03714939591236937,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.02703012255111336,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.004491297259935519,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.02759032069352114,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.019725830651223675,
      0.049100209370299464,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.018574697956184685,
      0,
      0,
      0,
      0.11144818773710811,
      0.08109036765334007,
      0.024550104685149732,
      0.02703012255111336,
      0.03052551141411478,
      0,
      0,
      0.06031723637273307,
      0,
      0,
      0,
      0,
      0,
      0.028778571502340044,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.01158392023018185,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.021054715822148313,
      0,
      0,
      0,
      0,
      1.2,
      0,
      0,
      0,
      0,
      3.4,
      1.2,
      0.2
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0024308996038259014,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.014789760616633233,
      0,
      0,
      0.010658409301081148,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.005849140330422297,
      0.005849140330422297,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0028704709760469438,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.012078659358326265,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.05552622920252458,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1.4,
      0,
      0,
      0.6,
      0,
      0.2,
      4.6,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.002344585052675561,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.004322611194716476,
      0,
      0,
      0.009345416850947964,
      0.007960958613537026,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0051285940578340425,
      0.0051285940578340425,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.005033724465241742,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.023191863771365596,
      0,
      0,
      0,
      0.06190895964081237,
      0,
      0,
      0,
      0,
      0,
      0,
      0.01476001396565971,
      0,
      0,
      0,
      0,
      0.12490811379231441,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.024190683291822064,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.010590708567807812,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.02799306393627846,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.14605812464142334,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      4.2,
      6.4,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.002770873244071118,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.004322611194716476,
      0,
      0,
      0.07476333480758371,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0051285940578340425,
      0.0051285940578340425,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.014145071979359092,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.03316226602234705,
      0,
      0.01399653196813923,
      0,
      0,
      0,
      0,
      0,
      0.04428004189697913,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.03316226602234705,
      0,
      0,
      0.08254527952108316,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.10710929140371044,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.8,
      0,
      0,
      0,
      0,
      0.2,
      7.4,
      1.2
    ],
    [
      0,
      0,
      0,
      0.009146578194544815,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.02889194223065305,
      0,
      0,
      0,
      0,
      0,
      0,
      0.002503309379259013,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.004230640743765062,
      0,
      0,
      0.009146578194544815,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.005019475035326936,
      0.005019475035326936,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.014445971115326525,
      0.013698733415625629,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.003694967958528512,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.027397466831251258,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.015281311793740591,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.010365374342960837,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.008106837242829387,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.028590100993640313,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1.2,
      0,
      0,
      0.4,
      0,
      1,
      6.4,
      0
    ],
    [
      0,
      0,
      0.018010037519149338,
      0,
      0.04003847598965909,
      0,
      0.030451825353522994,
      0.026148347130852474,
      0,
      0,
      0,
      0.006827123958484459,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.002652071616960881,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.05008726050641902,
      0,
      0.004469074184289534,
      0.008000081693244078,
      0.011014219235254875,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.02570077226171434,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.020019237994829544,
      0,
      0,
      0.005801196557222115,
      0.005801196557222115,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.016695753502139674,
      0,
      0,
      0,
      0,
      0,
      0,
      0.07064475288253848,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.001423471262711804,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.006558354918951747,
      0,
      0,
      0,
      0,
      0.07916071359029564,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.013681615960128873,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0451527352081694,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.020019237994829544,
      0.029024256754404218,
      0.029024256754404218,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.046685444975038834,
      0,
      0,
      0,
      0,
      0,
      0,
      0.02395930790749964,
      0.08605470793977571,
      0.07710231678514302,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.2,
      1.2,
      0,
      0,
      0,
      0.6,
      1.8,
      1.2,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.011908042861541152,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0030961984427677267,
      0,
      0,
      0,
      0,
      0,
      0,
      0.007603602408866539,
      0,
      0,
      0,
      0,
      0,
      0.004782693425292308,
      0.01712298186975048,
      0.011787146900886796,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.00620829807000963,
      0.00620829807000963,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.03780113970030567,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0030467279658042117,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.02807436140744256,
      0,
      0,
      0.016943170277221174,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.00701859035186064,
      0,
      0,
      0,
      0,
      0.05082951083166352,
      0,
      0,
      0,
      0,
      0,
      0.01786738532685123,
      0,
      0,
      0,
      0,
      0.03780113970030567,
      0,
      0.024980808276117268,
      0.02750433522744868,
      0,
      0,
      0,
      0.015343858375519815,
      0,
      0,
      0,
      0,
      0,
      0.04392518808251901,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.01086293185125674,
      0,
      0,
      0.012820331424188404,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.053602155980553685,
      0,
      0,
      0,
      0.06442846427364522,
      0,
      0,
      0,
      0.023023408703185606,
      0,
      0,
      0.02750433522744868,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.049961616552234536,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.049961616552234536,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      4.2,
      1,
      0
    ],
    [
      0,
      0,
      0.0083228203686978,
      0,
      0,
      0,
      0.05628973777469402,
      0.012083705871075764,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0028968220278925323,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.03321631323539723,
      0,
      0,
      0,
      0,
      0.004130507958206993,
      0,
      0,
      0,
      0,
      0,
      0.004519093521749043,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.04436408938980806,
      0,
      0.01600079809468657,
      0,
      0,
      0,
      0,
      0,
      0.005361711969553772,
      0.005361711969553772,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.007394014898301344,
      0,
      0,
      0,
      0.016323219416041087,
      0,
      0,
      0,
      0,
      0,
      0.029265475933382027,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.003946897592064547,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.00606150984933419,
      0,
      0,
      0,
      0,
      0.08779642780014608,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.032646438832082174,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.011072104411799077,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.027821382299983165,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.021574334420283097,
      0,
      0,
      0,
      0,
      0,
      0.026825449424525107,
      0,
      0,
      0,
      0,
      0,
      0.021574334420283097,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1.4,
      0,
      0,
      0,
      0,
      2,
      1.4,
      0
    ],
    [
      0.020497772600501264,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.036369059096005144,
      0.015426328252451039,
      0,
      0,
      0,
      0,
      0,
      0,
      0.030861847382743033,
      0,
      0.003342486955260614,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.008261015916413986,
      0.02218204469490403,
      0.010179808687129506,
      0.009381622962449003,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.007394014898301344,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.005361711969553772,
      0.005361711969553772,
      0,
      0.03700525811165461,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.04436408938980806,
      0.019883852970933025,
      0.023753744060069318,
      0.023753744060069318,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.014788029796602688,
      0,
      0.015430923691371516,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.009209427714817277,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.013251514051585296,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.017334820875317774,
      0,
      0,
      0,
      0,
      0,
      0.03466964175063555,
      0,
      0,
      0.02424603939733676,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.05058051961017341,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.03752649184979601,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.019883852970933025,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.013251514051585296,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.4,
      0,
      1,
      0,
      2.6,
      0,
      0.4,
      0,
      1.4,
      0
    ],
    [
      0.026842321262561177,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.028575689289718324,
      0.008080457656045781,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.001400661200299686,
      0,
      0,
      0,
      0,
      0,
      0.010929828760707671,
      0,
      0,
      0,
      0,
      0,
      0,
      0.01298159644007912,
      0,
      0,
      0.007371275184781359,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.016951262758793863,
      0,
      0.0058095831343796265,
      0,
      0.018858083468737744,
      0,
      0,
      0,
      0,
      0,
      0.004212773690363678,
      0.004212773690363678,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0058095831343796265,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.006202267644672859,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.01041190389767416,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.05238876369781693,
      0,
      0,
      0,
      0,
      0,
      0,
      0.025650773368064563,
      0,
      0,
      0,
      0,
      0,
      0,
      0.00476261488161972,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.007371275184781359,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.6,
      0,
      1.4,
      0,
      0,
      0.2,
      0,
      0,
      3.4,
      0.2
    ],
    [
      0.01745616763397527,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.015486180002169931,
      0.004379086729728037,
      0.01612082173422782,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0022772040159711026,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.01154555506201691,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.006296838494037273,
      0,
      0.013626486119345983,
      0,
      0,
      0,
      0,
      0,
      0.0045661030966522445,
      0.0045661030966522445,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.05667154644633546,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.002240819278075356,
      0,
      0.011285160353608123,
      0.015757077647543253,
      0.01693334575589135,
      0,
      0,
      0.012461428461956218,
      0,
      0.03385548106082437,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.030972360004339863,
      0,
      0,
      0,
      0,
      0.014762557132528685,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.01032412000144662,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.011285160353608123,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.011285160353608123,
      0,
      0.03994755584010543,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.020228994941478385,
      0.09137959545902746,
      0.04568979772951373,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3,
      1.2,
      1.6,
      0,
      0,
      0.4,
      0,
      0,
      1.6,
      0.6
    ],
    [
      0.011273774930275695,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.04500671063130636,
      0.004242240269424036,
      0,
      0.012730512045381502,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0005515103476180014,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.020446014393124615,
      0,
      0,
      0.05417887260814299,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.004423412374881862,
      0.004423412374881862,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.012200124582197217,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.006100062291098609,
      0,
      0.012730512045381502,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.01093249909255787,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.07001043875980989,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.010432232169598266,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0077398389440204276,
      0,
      0,
      0.018268972279468478,
      0,
      0.02860245444427433,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.014301227222137164,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.9,
      0,
      2.2,
      0,
      0.6,
      0.4,
      0,
      0,
      2.2,
      0
    ],
    [
      0.00975029183158979,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0735244762265185,
      0.0036689645573397068,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.00031798794817614496,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0029471732458558005,
      0.005275729549058256,
      0,
      0.10040872143594068,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.031654377294349535,
      0,
      0.017125178501340224,
      0,
      0,
      0,
      0,
      0,
      0.0038256539458437727,
      0.0038256539458437727,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.005275729549058256,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.020881312557872584,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.031654377294349535,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.011646837637391478,
      0.011646837637391478,
      0,
      0.01914032067047197,
      0.01914032067047197,
      0,
      0,
      0.008649938379590412,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.021790293189747484,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.013201875866860564,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.011010172579789406,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.036317155316245804,
      0,
      0.01694861738340081,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.04256219338642961,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.13854221238538553,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.013201875866860564,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1.7,
      0,
      2,
      1,
      2,
      0.4,
      0,
      0,
      2,
      0
    ],
    [
      0.023734263011106725,
      0,
      0,
      0.013575447636113883,
      0,
      0,
      0.013035518221508087,
      0,
      0,
      0.05053385053339662,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.00170290914352225,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.03216129358833222,
      0,
      0.002869616055175385,
      0.0051368945609251435,
      0,
      0.045624313775278307,
      0,
      0,
      0.0031395807624782827,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.030821367365550863,
      0,
      0.00555817196973323,
      0,
      0,
      0,
      0,
      0,
      0.0037249788420057784,
      0.0037249788420057784,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.010720431196110738,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.015410683682775431,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.018636628021249022,
      0,
      0,
      0.0009140183897412636,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.022680683820183404,
      0,
      0,
      0,
      0,
      0,
      0,
      0.021055771055581922,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.007072288140532078,
      0,
      0,
      0.012043138713378664,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.015384397709026085,
      0.021440862392221476,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.01650260113646921,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.05590988406374707,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.014988484965670363,
      0,
      0.00920631502531189,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1.2,
      0,
      1.8,
      0,
      2.6,
      0,
      0,
      0,
      1.8,
      0
    ],
    [
      0.01950058366317958,
      0.01649790598373026,
      0.041569113625279826,
      0,
      0.013201875866860564,
      0,
      0,
      0,
      0,
      0.008649938379590412,
      0.011006893672019121,
      0.05852874917922353,
      0.055050862898947034,
      0,
      0,
      0.005627399328572449,
      0,
      0.08808138063831525,
      0.04325107220904111,
      0.0006359758963522899,
      0,
      0,
      0,
      0.022511057376624434,
      0.031654377294349535,
      0.019850932235663664,
      0.018741852424016985,
      0.015800192241702468,
      0.006971175813139562,
      0.004875145915794895,
      0.03303051773936822,
      0,
      0.005894346491711601,
      0.005275729549058256,
      0,
      0.006693914762396046,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.01694861738340081,
      0,
      0.01914032067047197,
      0.005275729549058256,
      0.03389723476680162,
      0.005708392833780074,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.03858110487158388,
      0.0615743166157269,
      0,
      0,
      0.020881312557872584,
      0,
      0,
      0.023293675274782957,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.00945513435032032,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.00945513435032032,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.6,
      6,
      2.6,
      1.6,
      0,
      0,
      0,
      0,
      3.2,
      0
    ],
    [
      0.013875415298800856,
      0.007825929761513072,
      0,
      0.006613679617593944,
      0,
      0,
      0,
      0,
      0,
      0.02461905538806502,
      0,
      0.038441959520081725,
      0,
      0,
      0,
      0.008008222121430023,
      0,
      0,
      0.01172373385886096,
      0.0010558830586874556,
      0,
      0,
      0,
      0.012813986506693908,
      0.010010358631546434,
      0,
      0.02222591473360988,
      0,
      0,
      0.004625138432933618,
      0.041782193379713645,
      0,
      0.008388108468974202,
      0.015015537947319652,
      0.006890947418979973,
      0.025402548329092684,
      0,
      0,
      0.0030590786916455063,
      0,
      0,
      0.019841038852781833,
      0,
      0,
      0,
      0,
      0.005005179315773217,
      0,
      0.01083130947948014,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.006890947418979973,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.00990523800822161,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0008905820207735389,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.012524856591636945,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.01172373385886096,
      0,
      0,
      0,
      0,
      0,
      0,
      0.022099127824794087,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.008970255665688508,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.02067284225693992,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.014989925972897212,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.5,
      7.2,
      0.6,
      0,
      0,
      6.4,
      0,
      0.4,
      3.6,
      0
    ],
    [
      0,
      0.007825929761513072,
      0.011267818345313945,
      0.013227359235187888,
      0,
      0,
      0,
      0,
      0,
      0.004103175898010836,
      0.006961625057516367,
      0.025627973013387817,
      0,
      0,
      0,
      0.016016444242860046,
      0,
      0.031336645034785233,
      0.017585600788291442,
      0.0006033617478214032,
      0,
      0,
      0,
      0.02989930184895245,
      0.015015537947319652,
      0,
      0.004445182946721977,
      0,
      0.013227359235187888,
      0.004625138432933618,
      0,
      0,
      0.005592072312649468,
      0,
      0,
      0.012701274164546342,
      0,
      0,
      0,
      0,
      0.03631753152858784,
      0,
      0,
      0,
      0,
      0,
      0.010010358631546434,
      0.016079457517585383,
      0.01083130947948014,
      0,
      0,
      0.012524856591636945,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.008970255665688508,
      0,
      0,
      0,
      0,
      0,
      0,
      0.006890947418979973,
      0,
      0,
      0,
      0,
      0,
      0,
      0.032158915035170765,
      0.006100431112173519,
      0.029208329676690962,
      0,
      0,
      0.00990523800822161,
      0,
      0.043812494515036444,
      0.011049563912397043,
      0,
      0,
      0,
      0.01815876576429392,
      0,
      0,
      0,
      0,
      0.016079457517585383,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0017811640415470779,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.026910766997065527,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.007494962986448606,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.1,
      5.2,
      2,
      1.8,
      0.2,
      0.6,
      0,
      0,
      2.4,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0005767428471822237,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.014254301973420211,
      0.012758300216676828,
      0.008782580043798005,
      0,
      0,
      0,
      0.007797651566939526,
      0,
      0,
      0,
      0.03590236237477482,
      0,
      0,
      0,
      0.012758300216676828,
      0,
      0.013804610120906061,
      0,
      0,
      0,
      0,
      0,
      0.004625790718830705,
      0.004625790718830705,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.006379150108338414,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.006379150108338414,
      0.012624322951654993,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0011350555166721574,
      0,
      0.011432678789603001,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.023143524993707938,
      0,
      0.036606765364606476,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.01756516008759601,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.038209615225032106,
      0.008093949222505023,
      0,
      0,
      0.009552403806258027,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.01715469668080496,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.02049342624790294,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.007471006870842769,
      0,
      0,
      0,
      0,
      0,
      0,
      0.04224833260622399,
      0.014082777535407997,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.02049342624790294,
      0,
      0.018613151264557967,
      0.16200467495595555,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.01596305251875297,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1.6,
      0,
      0.4,
      0.2,
      0,
      0,
      3,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0.013273625192223935,
      0,
      0.006730294733930806,
      0,
      0,
      0,
      0.003688904582107857,
      0.004526680015951652,
      0,
      0,
      0,
      0.00565798302057556,
      0,
      0,
      0,
      0.0012788645741866698,
      0,
      0,
      0,
      0.009053360031903305,
      0,
      0,
      0,
      0.007943031425855859,
      0,
      0.00490164127403291,
      0.022140020948489565,
      0,
      0.0029631904917571906,
      0.010608803984519318,
      0,
      0,
      0,
      0.03408145886879511,
      0.003241958396037357,
      0,
      0,
      0,
      0.04179503272106939,
      0,
      0.015477239910203092,
      0,
      0.005304401992259659,
      0,
      0.005739416707876705,
      0,
      0,
      0,
      0,
      0,
      0.003846445543375532,
      0.003846445543375532,
      0,
      0,
      0,
      0,
      0.01924434415237671,
      0,
      0,
      0,
      0,
      0,
      0.007302906232071167,
      0.08487043187615455,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.001887646674465653,
      0,
      0,
      0,
      0,
      0,
      0,
      0.010497398976104423,
      0,
      0.028519562850150962,
      0.01426450321827804,
      0,
      0,
      0.011710135668029475,
      0.0468405426721179,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.004348474457131049,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.012435849758380142,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.017040729434397554,
      0,
      0,
      0,
      0,
      0,
      0.03408145886879511,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.02342027133605895,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.2,
      2.2,
      0,
      0,
      0,
      0,
      0,
      2.8,
      0
    ],
    [
      0,
      0,
      0.043694806935663445,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0025068652164454606,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.005545511173726008,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0124842305530467,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.004021283977165329,
      0.004021283977165329,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.03471957830558591,
      0,
      0,
      0.011091022347452016,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.005545511173726008,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.013001115656488331,
      0.00592034638809682,
      0,
      0,
      0,
      0,
      0,
      0.024484829124061632,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.02194910695003652,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.004546132387000643,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.013876971791870479,
      0,
      0,
      0,
      0,
      0,
      0.009938635538688973,
      0.008304078308849307,
      0.007036217221836752,
      0.03563061609010398,
      0,
      0.008304078308849307,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.014912889728199768,
      0.007634856515347129,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.011573192768528638,
      0,
      0,
      0,
      0.020866036724987373,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0447386691845993,
      0.036727243686092446,
      0,
      0,
      0,
      0,
      0,
      0,
      0.009483847426907515,
      0,
      0,
      0,
      0,
      0,
      0.01781530804505199,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.01781530804505199,
      0,
      0.016180750815212322,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.032361501630424644,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1.4,
      0,
      2.2,
      0,
      0,
      1.2,
      1.4,
      0.2
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.02231006579290457,
      0,
      0,
      0,
      0.00929525781951699,
      0,
      0,
      0.010205929028919139,
      0.0013131198752809557,
      0,
      0,
      0,
      0.02231006579290457,
      0.00871437470156944,
      0,
      0.0077393810233105835,
      0.026098531827812108,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0053260745077756575,
      0,
      0,
      0,
      0.0196180765833591,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.09559157680236184,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.08172129841221236,
      0.0015505669111682148,
      0,
      0,
      0,
      0,
      0,
      0,
      0.08622863444657204,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.007143922322429581,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.014903188813711808,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.09484712475099949,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      1.2,
      1.8,
      0,
      0,
      0,
      0,
      1.2,
      0
    ],
    [
      0.014240557806664035,
      0,
      0.005782169940358471,
      0,
      0,
      0,
      0,
      0.008394995657800004,
      0,
      0.012633462633349154,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0013932892992454772,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0067877238180569415,
      0,
      0,
      0,
      0.008608848165526154,
      0,
      0,
      0,
      0,
      0,
      0.0031395807624782827,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.01650260113646921,
      0,
      0,
      0,
      0,
      0,
      0.0051368945609251435,
      0,
      0,
      0,
      0,
      0,
      0,
      0.03756581263812114,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0051368945609251435,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0036560735589650545,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.022680683820183404,
      0.021055771055581922,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.007072288140532078,
      0,
      0,
      0.024086277426757327,
      0,
      0,
      0.004211154211116385,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.017570075233007604,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.026071036443016175,
      0,
      0,
      0.015384397709026085,
      0.010720431196110738,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.04392518808251901,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3,
      0,
      1.2,
      1.2,
      3.2,
      0,
      0,
      2.2,
      1.6,
      0
    ],
    [
      0.01734426912350107,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.015386909617540637,
      0,
      0,
      0,
      0,
      0,
      0.0033367592172625095,
      0,
      0,
      0,
      0.0016969549157476967,
      0,
      0,
      0,
      0.010678322088911589,
      0,
      0,
      0,
      0,
      0.008267099521992428,
      0.005781423041167023,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.007647696729113765,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.006769568424675088,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.011212819582110635,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.012512948289433043,
      0,
      0,
      0,
      0,
      0,
      0,
      0.03812769445108449,
      0,
      0,
      0,
      0,
      0,
      0,
      0.06905977445248151,
      0,
      0,
      0,
      0,
      0,
      0.0312823707235826,
      0,
      0.013056935431160514,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0011132275259669235,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.044003776068114356,
      0,
      0,
      0.0051289698725135455,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.014667925356038116,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3,
      0,
      1,
      1,
      2.8,
      0,
      0,
      0,
      1,
      0
    ],
    [
      0.03221078551507341,
      0.03114400619377651,
      0.011210329476205198,
      0,
      0,
      0,
      0.006318235872669736,
      0,
      0,
      0.028575689289718324,
      0.003463053281162478,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.002251062643338781,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0353800275351341,
      0,
      0,
      0,
      0,
      0,
      0.00556354133146248,
      0,
      0.013711579047970353,
      0,
      0,
      0,
      0.0030434711473003757,
      0,
      0,
      0,
      0.028025823690513,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0049796426866111085,
      0,
      0,
      0,
      0,
      0,
      0,
      0.03034653231821011,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0008860382349532656,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.010993188586313384,
      0,
      0,
      0,
      0,
      0,
      0,
      0.028575689289718324,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.004082241327102617,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.03569795622059712,
      0,
      0,
      0,
      0.008516107893549604,
      0,
      0.01703221578709921,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.03790941523601842,
      0,
      0,
      0.014913446758749775,
      0.020784509461847348,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.01599741946902627,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.11070940261614487,
      0,
      0,
      0.00892448905514928,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.7,
      0,
      0.8,
      1,
      0,
      0,
      0,
      4,
      2.4,
      0
    ],
    [
      0.017512660085865155,
      0,
      0.010666138724933102,
      0,
      0,
      0,
      0.006011525393413924,
      0,
      0,
      0.0077681485447777966,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0014278585051598742,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.006260521968110771,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.008687189488410782,
      0,
      0,
      0,
      0.026665346812332756,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.008491261431112907,
      0,
      0.015220845708393929,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.028873399681403792,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0025290800104491276,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0038840742723888983,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.012741109670694946,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.04051352298873113,
      0,
      0,
      0,
      0,
      0.02764866158715892,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.025482219341389892,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.2,
      0,
      2,
      1,
      0,
      0,
      0,
      1.4,
      2.4,
      0
    ],
    [
      0.008428990602075285,
      0.007131104221939482,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.007477750468337505,
      0.006343536851475194,
      0,
      0,
      0,
      0,
      0.004864807830775248,
      0,
      0,
      0,
      0.0019242728639631199,
      0,
      0,
      0,
      0.003892098705304224,
      0,
      0,
      0,
      0,
      0.01205296752739083,
      0.008428990602075285,
      0,
      0,
      0.002547789955529547,
      0.01824317694534163,
      0.006279134330378947,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.004560794236335408,
      0,
      0.004934825580604269,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.027794020254061594,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.004560794236335408,
      0.009025800988800063,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.00405755827221589,
      0,
      0,
      0,
      0,
      0,
      0.030205583592300328,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.042770025337232634,
      0,
      0,
      0.011216625702506257,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0068295223474648505,
      0.028933977360824027,
      0,
      0,
      0.013659044694929701,
      0.009518139847014205,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.054598598270794656,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.2,
      0,
      0.6,
      1,
      2.2,
      0,
      0,
      1.6,
      2.2,
      0
    ],
    [
      0,
      0,
      0,
      0.013719867291817223,
      0,
      0,
      0,
      0,
      0,
      0,
      0.007220834501147294,
      0.026582206051120338,
      0,
      0,
      0,
      0.022150401612466022,
      0,
      0,
      0,
      0.0006258273448147533,
      0,
      0,
      0,
      0,
      0.010383084750806142,
      0,
      0.009221390155433887,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.006345961115647592,
      0,
      0,
      0.013719867291817223,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.03766978004295015,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.001847483979264256,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.09328836908664753,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.028590100993640313,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.020548100123438443,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.014295050496820156,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.8,
      1.6,
      0,
      0,
      2.2,
      0,
      0,
      2.4,
      0
    ],
    [
      0.014430431910752889,
      0,
      0,
      0.010317340203446553,
      0,
      0,
      0,
      0,
      0,
      0.01280190880179381,
      0,
      0,
      0,
      0,
      0,
      0.01665710201257445,
      0,
      0,
      0,
      0.0007059332449510418,
      0,
      0,
      0,
      0,
      0.007808079732606219,
      0,
      0,
      0.011692142258859825,
      0,
      0,
      0,
      0,
      0.004361816403866585,
      0.007808079732606219,
      0.010749877973608758,
      0.06934895693842304,
      0,
      0,
      0.00477216275896699,
      0,
      0,
      0.020634680406893105,
      0.008788898309344876,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.023424239197818657,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0013893079524067208,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.019202863202690715,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.010749877973608758,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.017237319703339388,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.021499755947217515,
      0,
      0,
      0,
      0,
      0.020997348737305275,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.09271302775695427,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.04572256204955775,
      0,
      0,
      0.03661114168867114,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.013993598838474073,
      0,
      0,
      0,
      0,
      0.01830557084433557,
      0,
      0,
      0,
      0.11331069836919407,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.021499755947217515,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.02278249714781895,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.2,
      0.8,
      1.4,
      0,
      1.2,
      3.8,
      0,
      0.8,
      2.2,
      0
    ],
    [
      0.0386529426180881,
      0,
      0,
      0.00921191089593442,
      0,
      0,
      0,
      0.022786416785457154,
      0,
      0.022860551431774657,
      0,
      0.017848052634323656,
      0,
      0,
      0,
      0.014872412511227185,
      0,
      0,
      0,
      0.0008403967201798116,
      0,
      0,
      0,
      0,
      0.0069714997612555524,
      0.013115794512849206,
      0.006191504818648467,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0069714997612555524,
      0,
      0.03538212088695052,
      0,
      0,
      0.008521719212441053,
      0,
      0,
      0,
      0.00784723063334364,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.00849702904909883,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.002480907057869144,
      0,
      0,
      0,
      0,
      0,
      0.015390464020838738,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.005715137857943664,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.005715137857943664,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.011922551050969446,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.019196210667158497,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0965760705801607,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.016329486446270622,
      0,
      0,
      0.03268851936488495,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.05961275525484723,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.03489067193384578,
      0,
      0,
      0.05058513320053306,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.020341515310552633,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.4,
      0.8,
      1.4,
      0.2,
      0,
      1.6,
      0,
      2,
      1.8,
      0
    ],
    [
      0.01853223276209703,
      0.010452440434897596,
      0.007524741703206229,
      0.008833339215279581,
      0,
      0,
      0,
      0,
      0,
      0.016440807536550268,
      0.004649030432245518,
      0.017114571019214465,
      0,
      0,
      0,
      0.017826521845649024,
      0,
      0,
      0,
      0.001208789802998359,
      0,
      0,
      0,
      0,
      0.006684999771066968,
      0,
      0.0059370594151423655,
      0,
      0,
      0.0061774109206990105,
      0.02790249215426082,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.026500017645838744,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.009203662648637635,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.02673999908426787,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0011894759866495895,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.014757979198064543,
      0,
      0,
      0,
      0,
      0,
      0.014757979198064543,
      0.016440807536550268,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.009203662648637635,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.01840732529727527,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.05291839483844421,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.023487617491211168,
      0,
      0,
      0.031345155555369125,
      0,
      0,
      0.053931546414311485,
      0.029515958396129086,
      0.014757979198064543,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.01198082092335109,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.01950556262655732,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.027610987945912904,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.01950556262655732,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3,
      1.6,
      1.4,
      0,
      2.8,
      3.6,
      0,
      0.6,
      2.4,
      0
    ],
    [
      0.016201832235126747,
      0,
      0,
      0.007722560032519875,
      0,
      0,
      0,
      0,
      0,
      0.014373400600816402,
      0,
      0,
      0,
      0,
      0,
      0.015584863409968609,
      0,
      0,
      0,
      0.001409048393115852,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.023167680097559623,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.007722560032519875,
      0,
      0,
      0,
      0,
      0.011688742114679969,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.028493031541888293,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.011688742114679969,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0010399011619810785,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.01290218540669116,
      0.014373400600816402,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.03659069330409054,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.008751603487170528,
      0,
      0,
      0,
      0,
      0.012196897768030181,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.01368938983519693,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.01705276732621179,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.01705276732621179,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.00804631584850955,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3,
      0.4,
      1.6,
      0.8,
      2.2,
      2,
      0,
      0.2,
      5.2,
      0
    ],
    [
      0.00490164127403291,
      0,
      0,
      0.007009062638210973,
      0,
      0,
      0,
      0,
      0,
      0.021742372285655245,
      0,
      0.004526680015951652,
      0,
      0,
      0,
      0.016973949061726678,
      0,
      0,
      0,
      0.00031971614354666745,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.021027187914632917,
      0.00490164127403291,
      0,
      0,
      0.020742333442300337,
      0,
      0,
      0.026921178935723225,
      0,
      0,
      0,
      0,
      0,
      0.007009062638210973,
      0,
      0,
      0,
      0,
      0.021217607969038637,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.012930261596454742,
      0,
      0,
      0,
      0.010497398976104423,
      0,
      0,
      0.011710135668029475,
      0,
      0,
      0.01924434415237671,
      0,
      0,
      0.015913205976778977,
      0,
      0,
      0,
      0,
      0.05112218830319266,
      0.01924434415237671,
      0,
      0,
      0,
      0,
      0,
      0.001887646674465653,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.00950652095005032,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.007943031425855859,
      0.006730294733930806,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.015477239910203092,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.007943031425855859,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.5,
      0.2,
      2.8,
      2,
      1.8,
      0,
      0,
      0,
      8.8,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.003941474384788734,
      0.00668727530155513,
      0.004103000605591645,
      0,
      0,
      0,
      0.010256836214639438,
      0,
      0,
      0,
      0.0008693759174273912,
      0,
      0,
      0,
      0,
      0,
      0,
      0.004270003323205839,
      0,
      0.006353041997196152,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0061003656701638835,
      0,
      0,
      0.005877047732717968,
      0,
      0,
      0,
      0.010823766390818813,
      0,
      0,
      0,
      0.004807930869831415,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.008616748053247582,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.02344008013544505,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.07692689391730265,
      0.009514883801001054,
      0.07023730783658759,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0034219407694746815,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.07014315624328495,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.03488629875898832,
      0.061783137259687676,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.022543806458541343,
      0,
      0,
      0.015765897539154937,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.008222449000668583,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.008616748053247582,
      0.007199594986982651,
      0,
      0,
      0,
      0,
      0.010033901119512512,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.010033901119512512,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.016444898001337166,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.1,
      1.2,
      2.2,
      0.8,
      10.4,
      0,
      1.2,
      0.8,
      2.4,
      0
    ],
    [
      0.00920308157573526,
      0,
      0,
      0.0065799363542388715,
      0,
      0,
      0,
      0,
      0,
      0.016328965308410468,
      0.003463053281162478,
      0.025497218049033796,
      0,
      0,
      0,
      0.023902091535900834,
      0,
      0,
      0.011663918890193302,
      0.0003001416857785041,
      0,
      0,
      0,
      0.008499072683011264,
      0.009959285373222217,
      0,
      0.008845006883783525,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.012636471745339472,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0049796426866111085,
      0,
      0.005388023848210784,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.012138612927284043,
      0,
      0.010392254730923674,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.019709402159216467,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.009854701079608234,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.008516107893549604,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.07264826896625941,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.007456723379374888,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.4,
      2,
      1.8,
      1,
      0,
      0.8,
      0,
      0.2,
      2.4,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.01016866581434975,
      0.015597549118634906,
      0.007628771263149963,
      0,
      0,
      0.01559653746495735,
      0,
      0,
      0.008562277537370364,
      0.00022032872813702926,
      0,
      0,
      0,
      0.006239019647453963,
      0.007310936079219306,
      0,
      0.003246481927381219,
      0,
      0,
      0.003377910091468373,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.004468317190043997,
      0,
      0,
      0,
      0.004114652766547227,
      0,
      0,
      0,
      0.010966404118828958,
      0,
      0.03955253461607917,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.006551310317637674,
      0,
      0,
      0,
      0,
      0,
      0,
      0.005032714407120205,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0222768551849033,
      0,
      0,
      0,
      0.0072341625902742086,
      0,
      0.05332981542092451,
      0,
      0,
      0,
      0,
      0,
      0,
      0.003655468039609653,
      0.028936650361096834,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.001300850142702922,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0072341625902742086,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.00299670149854724,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.00625152489563941,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.013102620635275349,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.019660438892607934,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.021331926168369805,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.009147367173667431,
      0,
      0,
      0,
      2,
      3.2,
      3.2,
      1,
      0,
      0,
      0,
      3.2,
      0
    ],
    [
      0.0030265167598055556,
      0,
      0.04055280260184297,
      0,
      0.016391590841404055,
      0,
      0.004155618224977411,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.010480559152207077,
      0,
      0,
      0,
      0.0010857474405007634,
      0,
      0,
      0,
      0.008384991170487624,
      0,
      0,
      0,
      0,
      0,
      0.0030265167598055556,
      0,
      0,
      0.001829620974776252,
      0,
      0,
      0,
      0,
      0,
      0.004003492247455528,
      0,
      0,
      0.008655486747857846,
      0.007373236836698722,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.004509177002352667,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0718540711534532,
      0,
      0,
      0,
      0.00648161547517857,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.01296323095035714,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0011655268057103362,
      0,
      0,
      0,
      0,
      0,
      0,
      0.00648161547517857,
      0.01911283317770046,
      0,
      0.05284567635227837,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.00648161547517857,
      0,
      0,
      0,
      0.021691258015947214,
      0,
      0,
      0,
      0,
      0,
      0,
      0.00268496409433595,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.08202209103064591,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.005601198480321216,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.005869798170500869,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.004509177002352667,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.006835174252553825,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.038357854068420925,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.009018354004705334,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.004904422088447913,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.03278318168280811,
      0,
      0,
      0,
      0,
      2,
      4,
      0.2,
      10,
      0,
      0.4,
      3.8,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.005443853839529013,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.00532970414224865,
      0,
      0,
      0,
      0.001806996360796182,
      0,
      0,
      0,
      0.008528079757014716,
      0,
      0,
      0,
      0,
      0,
      0.0030781638034882443,
      0,
      0,
      0.007443372702844001,
      0,
      0,
      0,
      0,
      0,
      0.0040718112277875335,
      0,
      0,
      0.004401595649934536,
      0.026246709968180095,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.004586125415362098,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.109620374763118,
      0,
      0,
      0,
      0,
      0,
      0.019438990740459856,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.006592223247792539,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.015619087751139564,
      0.0029635408541098993,
      0,
      0,
      0,
      0,
      0,
      0.07353805334189159,
      0.006592223247792539,
      0,
      0,
      0,
      0,
      0,
      0,
      0.029415221336756635,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.007809543875569782,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.005461565188478588,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.006951815451402867,
      0,
      0.007809543875569782,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.017909896124326884,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.008957913283833307,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0417108927084172,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.005696782072135572,
      0,
      0,
      0,
      0,
      0,
      0.010701345446857167,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.008335655410816397,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.004586125415362098,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.008957913283833307,
      0,
      0,
      0,
      0.009719495370229928,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      3,
      9.4,
      0,
      0.6,
      0,
      1.2,
      3.4,
      0
    ],
    [
      0,
      0,
      0.00757663647357317,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0035898926751238036,
      0,
      0,
      0,
      0.002231398188063638,
      0,
      0,
      0,
      0.005744200847828304,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.007520373110114801,
      0.006731103217763982,
      0.00926713618414548,
      0,
      0,
      0,
      0.01234180023870773,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.004881006758490331,
      0.004881006758490331,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.013462206435527964,
      0,
      0,
      0,
      0.014859758364947748,
      0,
      0,
      0,
      0,
      0.028094923134635037,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.004790717077264554,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.014859758364947748,
      0,
      0,
      0,
      0,
      0,
      0,
      0.011036128277408457,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.005518064138704228,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.014859758364947748,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.02412689454909323,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.01853427236829096,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.01576640070674405,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0.4,
      0,
      0.2,
      1,
      1.4
    ],
    [
      0.04595678952469073,
      0.029160311531752532,
      0.020992591503212282,
      0.0328577713485559,
      0,
      0.03994260147680446,
      0.007887733955689608,
      0,
      0,
      0.03567410892219612,
      0.004323302185400292,
      0.015915460947804536,
      0,
      0,
      0,
      0.006631011947680911,
      0,
      0,
      0.007280662746744864,
      0.0014987966984098553,
      0,
      0,
      0,
      0.010610307298536356,
      0.006216623990928518,
      0.023391225882788393,
      0.0055210870994317545,
      0.009309030460875656,
      0.008214442837138975,
      0.005744598690586342,
      0,
      0,
      0.0069455675220805495,
      0.037299743945571104,
      0.008558820042682132,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.022282800698207123,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.001106136904782421,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.01372398065552499,
      0.03567410892219612,
      0,
      0,
      0,
      0,
      0,
      0,
      0.04117194196657497,
      0.008558820042682132,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.014574499079885008,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.042526296742311405,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.011141400349103561,
      0.009309030460875656,
      0.007887733955689608,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.007280662746744864,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.033424201047310684,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3,
      1,
      0.8,
      0,
      0.2,
      0.8,
      0,
      0,
      0.8,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.019141610050529022,
      0.003247648053147587,
      0.011955633343566086,
      0,
      0,
      0,
      0.012452976983084963,
      0,
      0,
      0.005469205986789204,
      0.0001407362928530785,
      0,
      0,
      0,
      0,
      0.004669904146295585,
      0,
      0.06221129243618077,
      0,
      0,
      0.00431532054747395,
      0,
      0,
      0.0026087418683412586,
      0,
      0,
      0.029626177776154745,
      0,
      0,
      0.002854164329525711,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.004669904146295585,
      0,
      0.00505288360884839,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.008369377295738082,
      0,
      0,
      0,
      0,
      0,
      0,
      0.006429352855029161,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.028458948968273595,
      0,
      0,
      0,
      0.00924172924212064,
      0,
      0,
      0.041237606945788007,
      0,
      0,
      0,
      0,
      0,
      0.014009712438886756,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.008309258088556941,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.003828322010105804,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.012858705710058323,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.010309401736447002,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.005925235555230949,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.012858705710058323,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.025116445858020663,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.005469205986789204,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.010309401736447002,
      0,
      0,
      0,
      0,
      0,
      0.007986397833185275,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.010948307921253331,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.013985816099114623,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.5,
      1.8,
      1.6,
      1.6,
      3,
      0.8,
      0,
      1,
      1.8,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.005462497174595893,
      0,
      0,
      0.004649030432245518,
      0.02852428503202411,
      0,
      0,
      0,
      0.01604386966108412,
      0,
      0,
      0.019573014576009306,
      0.0002014649671663932,
      0,
      0,
      0,
      0,
      0.016712499427667418,
      0,
      0.014842648537855914,
      0,
      0,
      0.0030887054603495052,
      0,
      0,
      0,
      0,
      0,
      0.0042410076405591385,
      0,
      0,
      0,
      0,
      0,
      0.004416669607639791,
      0,
      0,
      0,
      0,
      0,
      0,
      0.003616618747429156,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.004601831324318817,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.006614799354805526,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.003568427959948769,
      0.012126573027525048,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.005990410461675545,
      0,
      0,
      0.01073799389016832,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.005005197884785884,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.013805493972956452,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.03307399677402763,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.007836288888842281,
      0,
      0,
      0,
      0.0073789895990322716,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.004601831324318817,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.010010395769571767,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      4,
      3.6,
      0.2,
      0,
      0,
      0,
      0.2,
      4.6,
      0
    ],
    [
      0.029792558374302135,
      0.004582751662147295,
      0,
      0.003872875451744201,
      0,
      0,
      0,
      0,
      0,
      0.028833127931968038,
      0.0040766272859330075,
      0.022511057376624434,
      0,
      0,
      0,
      0.0062526659206360545,
      0,
      0,
      0.010297874335485978,
      0.0014132797696717553,
      0,
      0,
      0,
      0.015007371584416288,
      0.008792882581763759,
      0.011028295686479813,
      0.007809105176673743,
      0.008777884578723591,
      0.007745750903488402,
      0.0027084143976638304,
      0.018350287632982343,
      0,
      0.011461229289439226,
      0.0146548043029396,
      0.004035239479582867,
      0.011156524603993408,
      0,
      0,
      0,
      0,
      0,
      0,
      0.01319654400802534,
      0,
      0,
      0,
      0.0058619217211758395,
      0,
      0.003171329352100041,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.006116762544327448,
      0,
      0.004035239479582867,
      0,
      0.00788188766415363,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0010430239882933338,
      0,
      0.010505704833689244,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.006470465354106377,
      0,
      0,
      0,
      0,
      0.006470465354106377,
      0.0264303672709707,
      0,
      0,
      0,
      0.008551988418850957,
      0,
      0,
      0,
      0.004035239479582867,
      0,
      0,
      0,
      0,
      0,
      0.007208281982992009,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0050124839253325,
      0,
      0,
      0.018831797092667565,
      0,
      0.014668750963178405,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.026333653736170776,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.005514147843239906,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.003432624778495326,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.01941139606231913,
      0,
      0.025655965256552872,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.013166826868085388,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1.2,
      3,
      3,
      0,
      0.2,
      1.8,
      0,
      0.2,
      3.6,
      0.2
    ],
    [
      0.0030265167598055556,
      0,
      0.04055280260184297,
      0,
      0.016391590841404055,
      0,
      0.004155618224977411,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.010480559152207077,
      0,
      0,
      0,
      0.0010857474405007634,
      0,
      0,
      0,
      0.008384991170487624,
      0,
      0,
      0,
      0,
      0,
      0.0030265167598055556,
      0,
      0,
      0.001829620974776252,
      0,
      0,
      0,
      0,
      0,
      0.004003492247455528,
      0,
      0,
      0.008655486747857846,
      0.007373236836698722,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.004509177002352667,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0718540711534532,
      0,
      0,
      0,
      0.00648161547517857,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.01296323095035714,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0011655268057103362,
      0,
      0,
      0,
      0,
      0,
      0,
      0.00648161547517857,
      0.01911283317770046,
      0,
      0.05284567635227837,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.00648161547517857,
      0,
      0,
      0,
      0.021691258015947214,
      0,
      0,
      0,
      0,
      0,
      0,
      0.00268496409433595,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.08202209103064591,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.005601198480321216,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.005869798170500869,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.004509177002352667,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.006835174252553825,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.038357854068420925,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.009018354004705334,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.004904422088447913,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.03278318168280811,
      0,
      0,
      0,
      0,
      2,
      4,
      0.2,
      10,
      0,
      0.4,
      3.8,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0.0028933977360824027,
      0.007453500817672901,
      0,
      0,
      0.0015858842128687984,
      0.02140654287917323,
      0.004759069923507103,
      0,
      0,
      0.013378221534631932,
      0,
      0,
      0.013353552000454948,
      0.0010308604628373856,
      0,
      0,
      0,
      0.00973024676326056,
      0.01140198559083852,
      0.004290213158408618,
      0.01012629292769609,
      0.0068295223474648505,
      0.0030132418818477075,
      0.002107247650518821,
      0,
      0,
      0,
      0.015962779827173926,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.010267404566991677,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.004086915548619764,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.021977763195765068,
      0.03613222633028007,
      0.04657636683257379,
      0,
      0.009025800988800063,
      0.018051601977600126,
      0,
      0,
      0.030205583592300328,
      0,
      0,
      0,
      0,
      0,
      0.004560794236335408,
      0,
      0.009518139847014205,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0012172674816647668,
      0,
      0,
      0,
      0,
      0,
      0.010068527864100108,
      0.004512900494400032,
      0,
      0.004086915548619764,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.004512900494400032,
      0.013307533380735368,
      0.005346253167154079,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0018694376170843763,
      0,
      0,
      0,
      0,
      0.004512900494400032,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.016546538897370625,
      0.016546538897370625,
      0,
      0,
      0,
      0,
      0,
      0.0028933977360824027,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.01603875950146224,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.026615066761470737,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0034147611737324252,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      4.2,
      4,
      9.2,
      1,
      0,
      0,
      0,
      4,
      0
    ],
    [
      0.014614152687394417,
      0,
      0.02797392401701205,
      0.0029853414940528215,
      0,
      0,
      0,
      0,
      0,
      0.011112768057112681,
      0.006284800399146719,
      0.0038560607543291847,
      0,
      0,
      0,
      0.009639526627647249,
      0,
      0.009430008922504814,
      0.0026459816000901472,
      0.0014298416419725962,
      0,
      0,
      0,
      0.013496212640152147,
      0.0022592823300365216,
      0.004250488962497427,
      0.00200650619122867,
      0.010149429044149153,
      0,
      0.0020877360981992024,
      0,
      0,
      0,
      0.006777846990109564,
      0,
      0,
      0,
      0,
      0.0013808341316455409,
      0,
      0,
      0.008956024482158464,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0016383008795858747,
      0.0016383008795858747,
      0,
      0,
      0,
      0.004049073737984396,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0031104970988451264,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.004715004461252407,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.001205996486464167,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.00185212800951878,
      0,
      0,
      0.004471114378711143,
      0,
      0,
      0,
      0.004987650377123665,
      0.027994473889606138,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.005296750823013764,
      0,
      0.008942228757422286,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.008098147475968792,
      0,
      0,
      0,
      0.003863789692443802,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0033831430147163843,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.006592157739530946,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.010583926400360589,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.008098147475968792,
      0,
      0,
      0,
      0,
      0.005296750823013764,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.009331491296535379,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.01696074330117503,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.5,
      1.4,
      2.4,
      0,
      0.4,
      5.2,
      0,
      0.6,
      17.4,
      1.6
    ],
    [
      0.007368480346585421,
      0,
      0.0035902362374774822,
      0.004214599756309866,
      0,
      0,
      0.006070461916878767,
      0.010425158006418307,
      0,
      0.0039221534319221225,
      0,
      0.020414439287625097,
      0,
      0,
      0,
      0.005953825270017418,
      0,
      0,
      0.013074262023974844,
      0.001489919021887411,
      0,
      0,
      0,
      0.024497327145150117,
      0.011163512689592224,
      0,
      0.00991450118018872,
      0.011940504757822533,
      0,
      0.0014736960693170842,
      0,
      0,
      0.0008908938733387632,
      0.007973937635423018,
      0.0021956450109495013,
      0,
      0,
      0,
      0.004873532229337204,
      0,
      0,
      0.008429199512619731,
      0,
      0,
      0,
      0,
      0.006379150108338414,
      0,
      0.010353457590679545,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0021956450109495013,
      0.0015947875270846035,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.003328238443236994,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.006379150108338414,
      0.0031560807379137482,
      0.01664119221618497,
      0,
      0,
      0.01024671312395147,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0019863471541762753,
      0,
      0.0057163393948015005,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0028581696974007502,
      0.012866022510603722,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0052295379092294975,
      0,
      0.005123356561975735,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0026147689546147487,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.003328238443236994,
      0.0035206943838519992,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.00857450909220225,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.004776201903129013,
      0,
      0.015370069685927204,
      0,
      0,
      0,
      0.011216648801676207,
      0,
      0,
      0,
      0,
      0,
      0,
      0.026347740131394015,
      0,
      0,
      0,
      0,
      0,
      0.023143524993707938,
      0,
      0,
      0,
      0.003328238443236994,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.011206510306264152,
      0,
      0.011571762496853969,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.002727380959372096,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.003990763129688242,
      0,
      0,
      0,
      0,
      0,
      0,
      0.023143524993707938,
      0,
      0,
      0,
      0.009306575632278984,
      0,
      0.008782580043798005,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.003990763129688242,
      0,
      0,
      0.3,
      5.8,
      5,
      0,
      3.4,
      11.8,
      0.2,
      2.6,
      11.8,
      0
    ],
    [
      0,
      0,
      0.00757663647357317,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0035898926751238036,
      0,
      0,
      0,
      0.002231398188063638,
      0,
      0,
      0,
      0.005744200847828304,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.007520373110114801,
      0.006731103217763982,
      0.00926713618414548,
      0,
      0,
      0,
      0.01234180023870773,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.004881006758490331,
      0.004881006758490331,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.013462206435527964,
      0,
      0,
      0,
      0.014859758364947748,
      0,
      0,
      0,
      0,
      0.028094923134635037,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.004790717077264554,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.014859758364947748,
      0,
      0,
      0,
      0,
      0,
      0,
      0.011036128277408457,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.005518064138704228,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.014859758364947748,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.02412689454909323,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.01853427236829096,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.01576640070674405,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0.4,
      0,
      0.2,
      1,
      1.4
    ],
    [
      0.04595678952469073,
      0.029160311531752532,
      0.020992591503212282,
      0.0328577713485559,
      0,
      0.03994260147680446,
      0.007887733955689608,
      0,
      0,
      0.03567410892219612,
      0.004323302185400292,
      0.015915460947804536,
      0,
      0,
      0,
      0.006631011947680911,
      0,
      0,
      0.007280662746744864,
      0.0014987966984098553,
      0,
      0,
      0,
      0.010610307298536356,
      0.006216623990928518,
      0.023391225882788393,
      0.0055210870994317545,
      0.009309030460875656,
      0.008214442837138975,
      0.005744598690586342,
      0,
      0,
      0.0069455675220805495,
      0.037299743945571104,
      0.008558820042682132,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.022282800698207123,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.001106136904782421,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.01372398065552499,
      0.03567410892219612,
      0,
      0,
      0,
      0,
      0,
      0,
      0.04117194196657497,
      0.008558820042682132,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.014574499079885008,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.042526296742311405,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.011141400349103561,
      0.009309030460875656,
      0.007887733955689608,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.007280662746744864,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.033424201047310684,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.3,
      1,
      0.8,
      0,
      0.2,
      0.8,
      0,
      0,
      0.8,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.01905045952647888,
      0.003232183062418313,
      0.011898701756215772,
      0,
      0,
      0,
      0.01239367709268932,
      0,
      0,
      0.0054431621487568745,
      0.00014006612002996863,
      0,
      0,
      0,
      0,
      0.004647666507503702,
      0,
      0.06191504818648467,
      0,
      0,
      0.0042947714020097885,
      0,
      0,
      0.0025963192880158244,
      0,
      0,
      0.029485100739125435,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.004647666507503702,
      0,
      0.005028822258330065,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.00832952311813933,
      0,
      0,
      0,
      0,
      0,
      0,
      0.006398736889052833,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.028323430163662764,
      0,
      0,
      0,
      0.009197721007634352,
      0,
      0,
      0.04104123738890331,
      0,
      0,
      0,
      0,
      0,
      0.013942999522511105,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.008269690192897146,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.003810091905295777,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.012797473778105665,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.010260309347225827,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.005897020147825088,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.012797473778105665,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.024996843734887232,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0054431621487568745,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.010260309347225827,
      0,
      0,
      0,
      0,
      0,
      0.007948367367312964,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.010896173121628317,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.013919216974833126,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.5,
      1.8,
      1.6,
      1.6,
      3.2,
      0.6,
      0,
      1,
      1.8,
      0
    ],
    [
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.006934996412965221,
      0,
      0,
      0.005902247331372572,
      0.028970752102090574,
      0,
      0,
      0,
      0.01131596604115112,
      0,
      0,
      0.019879374804155543,
      0.00012788645741866698,
      0,
      0,
      0,
      0,
      0.01697408637523091,
      0,
      0.015074968254100617,
      0,
      0,
      0.003921313019226329,
      0,
      0,
      0,
      0,
      0,
      0.005384235787144645,
      0,
      0,
      0,
      0,
      0,
      0.005607250110568778,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.005842324985656934,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.008397919180883538,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.003775293348931306,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.013632583547518042,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.011684649971313868,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.016795838361767075,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.009948679806704113,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.005842324985656934,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.012708850281369375,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      3.2,
      2.8,
      0,
      0,
      0,
      0,
      0.2,
      3.6,
      0
    ],
    [
      0.029364250981183202,
      0.00709793629532581,
      0,
      0.005998453606654972,
      0,
      0,
      0,
      0,
      0,
      0.029771880934404207,
      0.0031570160144550963,
      0.023243975523770343,
      0,
      0,
      0,
      0.004842180817608851,
      0,
      0,
      0.01063315396501343,
      0.0009576613788095528,
      0,
      0,
      0,
      0.015495983682513563,
      0.009079162479774673,
      0.008540517357204134,
      0.008063355112658469,
      0.006797757127244084,
      0.005998453606654972,
      0.004194892997311886,
      0.02842160828736335,
      0,
      0.012679698848449375,
      0.022697906199436683,
      0.006249929054423696,
      0.017279640433161884,
      0,
      0,
      0,
      0,
      0,
      0,
      0.020439298393825293,
      0,
      0,
      0,
      0.009079162479774673,
      0,
      0.00491187290348518,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.006249929054423696,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0008077371816318143,
      0,
      0.0081358132781826,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.010021697501941505,
      0,
      0,
      0,
      0,
      0,
      0.022328910700803156,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.006249929054423696,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.01458369402757744,
      0,
      0.02271950730576004,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.027191028508976336,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.008540517357204134,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.005316576982506715,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.03973691362991678,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.02039327138173225,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.8,
      2,
      2.2,
      0,
      0.2,
      0.8,
      0,
      0.2,
      2.8,
      0
    ],
    [
      0,
      0,
      0.033582035024789375,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.005928021337186425,
      0.007274315484149379,
      0,
      0,
      0,
      0.00909230459201662,
      0,
      0,
      0.004991546075279229,
      0.0011560042220814003,
      0,
      0,
      0,
      0.01818578871037345,
      0.004262052255789421,
      0,
      0.0037851994524488444,
      0.01914652116625517,
      0,
      0.0039384366568648715,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.016895207756735618,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0030905937990440956,
      0.0030905937990440956,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.005867837321838841,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.008894680905070044,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0007583558692176423,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0084345913170446,
      0,
      0,
      0,
      0,
      0.029339186609194205,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.0084345913170446,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.00763842731357755,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.006382173722085057,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.012435860888547461,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.004991546075279229,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.017603511965516523,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0.031995812690426256,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1.4,
      1.6,
      0,
      0,
      2,
      0,
      0.4,
      11.2,
      1
    ]
  ]
}